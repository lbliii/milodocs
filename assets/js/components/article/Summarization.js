/**
 * Article Summarization Component
 * Handles AI-powered article summarization with keyboard shortcuts
 */

import { Component } from '../../core/Component.js';

export class ArticleSummarization extends Component {
  constructor(config = {}) {
    super({
      name: 'article-summarization',
      selector: config.selector || '#articleSummarizationContainer',
      ...config
    });
    
    this.summaryEndpoint = config.summaryEndpoint || 'https://summarization-1-lc4762co7a-uc.a.run.app';
    this.articleContent = null;
    this.summaryContainer = null;
    this.isLoading = false;
  }

  async onInit() {
    if (!this.element) {
      console.warn('ArticleSummarization: Summarization container not found');
      return;
    }

    this.articleContent = document.getElementById('articleContent');
    if (!this.articleContent) {
      console.warn('ArticleSummarization: Article content not found');
      return;
    }

    this.setupKeyboardShortcuts();
    console.log('ArticleSummarization: Initialized with keyboard shortcut Ctrl/Cmd + /');
  }

  /**
   * Setup keyboard shortcuts
   */
  setupKeyboardShortcuts() {
    this.addEventListenerSafe(document, 'keydown', (e) => {
      if ((e.ctrlKey || e.metaKey) && e.code === 'Slash') {
        e.preventDefault();
        this.toggleSummarization();
      }
    });
  }

  /**
   * Toggle summarization container visibility
   */
  async toggleSummarization() {
    this.element.classList.toggle('hidden');
    
    if (!this.element.classList.contains('hidden')) {
      await this.fetchAndDisplaySummary();
    }

    this.emit('summarization:toggled', { 
      visible: !this.element.classList.contains('hidden') 
    });
  }

  /**
   * Fetch and display article summary
   */
  async fetchAndDisplaySummary() {
    if (this.isLoading) return;
    
    const articleText = this.articleContent.innerText;
    if (!articleText || articleText.trim().length < 100) {
      this.displayError('Article too short to summarize');
      return;
    }

    this.isLoading = true;
    this.showLoadingState();

    try {
      const response = await fetch(this.summaryEndpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          article_text: articleText
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      this.updateUIWithSummary(data.summarization || data.summary);
      
      this.emit('summarization:completed', { summary: data.summarization });
      
    } catch (error) {
      console.error('Summarization failed:', error);
      this.displayError('Failed to generate summary. Please try again.');
      this.emit('summarization:error', { error });
    } finally {
      this.isLoading = false;
    }
  }

  /**
   * Show loading state
   */
  showLoadingState() {
    this.element.innerHTML = `
      <div class="flex items-center justify-center p-8">
        <div class="animate-spin h-8 w-8 border-2 border-brand border-t-transparent rounded-full mr-3"></div>
        <span class="text-gray-600">Generating summary...</span>
      </div>
    `;
  }

  /**
   * Update UI with generated summary
   */
  updateUIWithSummary(summary) {
    if (!summary) {
      this.displayError('No summary generated');
      return;
    }

    this.element.innerHTML = `
      <div class="bg-blue-50 border border-blue-200 rounded-lg p-6">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-semibold text-blue-900">Article Summary</h3>
          <button 
            class="text-blue-600 hover:text-blue-800 text-sm"
            onclick="this.closest('#articleSummarizationContainer').classList.add('hidden')"
          >
            ✕ Close
          </button>
        </div>
        <div class="prose prose-sm text-gray-700">
          ${this.formatSummary(summary)}
        </div>
        <div class="mt-4 text-xs text-gray-500">
          Generated by AI • Press Ctrl/Cmd + / to toggle
        </div>
      </div>
    `;
  }

  /**
   * Format summary text for display
   */
  formatSummary(summary) {
    // Convert line breaks to paragraphs
    return summary
      .split('\n')
      .filter(line => line.trim())
      .map(line => `<p>${line.trim()}</p>`)
      .join('');
  }

  /**
   * Display error message
   */
  displayError(message) {
    this.element.innerHTML = `
      <div class="bg-red-50 border border-red-200 rounded-lg p-6">
        <div class="flex items-center justify-between mb-2">
          <h3 class="text-lg font-semibold text-red-900">Summary Error</h3>
          <button 
            class="text-red-600 hover:text-red-800 text-sm"
            onclick="this.closest('#articleSummarizationContainer').classList.add('hidden')"
          >
            ✕ Close
          </button>
        </div>
        <p class="text-red-700">${message}</p>
        <button 
          class="mt-3 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 text-sm"
          onclick="this.closest('[data-component]').__component?.fetchAndDisplaySummary()"
        >
          Try Again
        </button>
      </div>
    `;
  }

  /**
   * Show summarization container
   */
  show() {
    this.element.classList.remove('hidden');
    this.fetchAndDisplaySummary();
  }

  /**
   * Hide summarization container
   */
  hide() {
    this.element.classList.add('hidden');
  }

  /**
   * Component cleanup
   */
  onDestroy() {
    this.isLoading = false;
    console.log('ArticleSummarization: Component destroyed');
  }
}

// Auto-register component
import ComponentManager from '../../core/ComponentManager.js';
ComponentManager.register('article-summarization', ArticleSummarization);