openapi: 3.1.0
info:
  title: NeMo Microservices Platform
  summary: This is the OpenAPI Schema for NeMo Microservices.
  version: 1.1.0
paths:
  /v1/chat/completions:
    post:
      tags:
      - Completions
      summary: Send chat completion requests
      description: Chat completion for the provided conversation.
      operationId: chat_completion_v1_chat_completions_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCompletionRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCompletionResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/ChatCompletionStreamResponse'
        '400':
          description: Invalid Request Body
        '422':
          description: Validation Error
        '500':
          description: Internal Server Error
  /v1/completions:
    post:
      tags:
      - Completions
      summary: Send completion requests
      description: Completion for the provided conversation.
      operationId: create_completion_v1_completions_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletionResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/CompletionStreamResponse'
        '400':
          description: Invalid Request Body
        '422':
          description: Validation Error
        '500':
          description: Internal Server Error
  /v1/customization/configs:
    get:
      tags:
      - Customization
      summary: List Customization Configs
      description: List available customization configs.
      operationId: list_customization_configs_customization_configs_get
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          exclusiveMinimum: 0
          description: Page number.
          default: 1
          title: Page
        description: Page number.
      - name: page_size
        in: query
        required: false
        schema:
          type: integer
          exclusiveMinimum: 0
          description: Page size.
          default: 10
          title: Page Size
        description: Page size.
      - name: sort
        in: query
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/CustomizationConfigSortField'
          description: The field to sort by. To sort in decreasing order, use `-`
            in front of the field name.
          default: -created_at
        description: The field to sort by. To sort in decreasing order, use `-` in
          front of the field name.
      - in: query
        name: filter
        style: deepObject
        required: false
        explode: true
        schema:
          $ref: '#/components/schemas/CustomizationConfigFilter'
        description: '

          Filter customization configs on various criteria.

          '
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomizationConfigOutputsPage'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
      - Customization Configurations
      summary: Create Customization Config
      description: Create a new customization config.
      operationId: create_customization_config_customization_configs_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomizationConfigInput'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomizationConfigOutput'
        '422':
          description: Validation Error
  /v1/customization/jobs:
    get:
      tags:
      - Customization
      summary: List Customization Jobs
      description: List available customization jobs.
      operationId: list_customization_jobs_customization_jobs_get
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          exclusiveMinimum: 0
          description: Page number.
          default: 1
          title: Page
        description: Page number.
      - name: page_size
        in: query
        required: false
        schema:
          type: integer
          exclusiveMinimum: 0
          description: Page size.
          default: 10
          title: Page Size
        description: Page size.
      - name: sort
        in: query
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/GenericSortField'
          description: The field to sort by. To sort in decreasing order, use `-`
            in front of the field name.
          default: created_at
        description: The field to sort by. To sort in decreasing order, use `-` in
          front of the field name.
      - in: query
        name: filter
        style: deepObject
        required: false
        explode: true
        schema:
          $ref: '#/components/schemas/CustomizationJobListFilter'
        description: '

          Filter jobs on various criteria.

          '
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomizationJobOutputsPage'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
      - Customization
      summary: Create Customization Job
      description: Create a new customization job.
      operationId: create_customization_job_customization_jobs_post
      parameters:
      - name: wandb-api-key
        in: header
        required: false
        schema:
          anyOf:
          - type: string
          - type: 'null'
          title: Wandb-Api-Key
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomizationJobInput'
            examples:
              post__v1_customization_jobs_create_customization_job_request:
                summary: Create Customization Job
                description: Request to create a model customization job
                value:
                  config: meta/llama-3.2-1b-instruct@v1.0.0+A100
                  dataset:
                    name: sample-squad-test
                    namespace: default
                  hyperparameters:
                    training_type: sft
                    finetuning_type: lora
                    epochs: 2
                    batch_size: 16
                    learning_rate: 0.0001
                    lora:
                      adapter_dim: 16
                  sha: main
                  project: test-project
                  ownership:
                    created_by: me
                    access_policies:
                      arbitrary: json
                  output_model: default/test-example-model@v3
              post__v1_customization_jobs_create_llama_3.2_1b_xlam_fine-tuning_job_request:
                summary: Create Llama 3.2 1B xLAM Fine-tuning Job
                description: Request to start a LoRA fine-tuning job for Llama 3.2
                  1B model with specific training parameters
                value:
                  name: llama-3.2-1b-xlam-ft
                  output_model: xlam-tutorial-ns/llama-3.2-1b-xlam-run3
                  config: meta/llama-3.2-1b-instruct@v1.0.0+A100
                  dataset:
                    name: xlam-ft-dataset
                    namespace: xlam-tutorial-ns
                  hyperparameters:
                    training_type: sft
                    finetuning_type: lora
                    epochs: 2
                    batch_size: 16
                    learning_rate: 0.0001
                    lora:
                      adapter_dim: 32
                      adapter_dropout: 0.1
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomizationJobOutput'
              examples:
                post__v1_customization_jobs_customization_job_created_response:
                  summary: Customization Job Created
                  description: Confirmation of successful customization job creation
                  value:
                    id: cust-XZEETL7Mav74RKfoKNZBNf
                    created_at: '2025-04-08T11:18:19.283503'
                    updated_at: '2025-04-08T11:18:19.283505'
                    namespace: default
                    project: test-project
                    ownership:
                      created_by: me
                      access_policies:
                        arbitrary: json
                    dataset: default/sample-squad-test
                    output_model: default/test-example-model@v3
                    config: meta/llama-3.2-1b-instruct@v1.0.0+A100
                    config_snapshot:
                      base_model: meta/llama-3.2-1b-instruct
                      precision: bf16-mixed
                      max_seq_length: 4096
                      prompt_template: '{prompt} {completion}'
                      training_option:
                        training_type: sft
                        finetuning_type: lora
                        num_gpus: 1
                        num_nodes: 1
                        micro_batch_size: 1
                        tensor_parallel_size: 1
                        pipeline_parallel_size: 1
                        use_sequence_parallel: false
                    hyperparameters:
                      finetuning_type: lora
                      training_type: sft
                      batch_size: 16
                      epochs: 2
                      learning_rate: 0.0001
                      lora:
                        adapter_dim: 16
                        alpha: 16
                      sequence_packing_enabled: false
                    status: created
                    status_details:
                      status: created
                      created_at: '2025-04-08T11:18:19.610756'
                      updated_at: '2025-04-08T11:18:19.610756'
                      steps_completed: 0
                      epochs_completed: 0
                      percentage_done: 0.0
                      status_logs:
                      - updated_at: '2025-04-08T11:18:19.610756'
                        message: created
                post__v1_customization_jobs_llama_3.2_1b_xlam_fine-tuning_job_created_response:
                  summary: Llama 3.2 1B xLAM Fine-tuning Job Created
                  description: Complete job configuration including model settings,
                    training parameters, and initial status
                  value:
                    id: cust-AW21JJAyGZjs24Ksq4QFNU
                    created_at: '2025-04-04T15:24:28.559409'
                    updated_at: '2025-04-04T15:24:28.559411'
                    namespace: default
                    dataset: xlam-tutorial-ns/xlam-ft-dataset
                    output_model: xlam-tutorial-ns/llama-3.2-1b-xlam-run3@cust-AW21JJAyGZjs24Ksq4QFNU
                    config: meta/llama-3.2-1b-instruct@v1.0.0+A100
                    config_snapshot:
                      base_model: meta/llama-3.2-1b-instruct
                      precision: bf16-mixed
                      max_seq_length: 4096
                      prompt_template: '{prompt} {completion}'
                      training_option:
                        training_type: sft
                        finetuning_type: lora
                        num_gpus: 1
                        num_nodes: 1
                        micro_batch_size: 1
                        tensor_parallel_size: 1
                        pipeline_parallel_size: 1
                        use_sequence_parallel: false
                    hyperparameters:
                      finetuning_type: lora
                      training_type: sft
                      batch_size: 16
                      epochs: 2
                      learning_rate: 0.0001
                      lora:
                        adapter_dim: 32
                        alpha: 16
                        adapter_dropout: 0.1
                      sequence_packing_enabled: false
                    status: created
                    status_details:
                      status: created
                      created_at: '2025-04-04T15:24:29.220140'
                      updated_at: '2025-04-04T15:24:29.220140'
                      steps_completed: 0
                      epochs_completed: 0
                      percentage_done: 0.0
                      status_logs:
                      - updated_at: '2025-04-04T15:24:29.220140'
                        message: created
        '409':
          description: Job cannot be created at this time
        '422':
          description: Validation Error
  /v1/customization/jobs/{job_id}:
    get:
      tags:
      - Customization
      summary: Get Customization Job
      description: Get info about a customization job.
      operationId: get_customization_job_customization_jobs__job_id__get
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          pattern: ^cust-[a-zA-Z0-9]{14,22}$
          title: Job Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomizationJobOutput'
        '404':
          description: Job does not exist.
        '422':
          description: Validation Error
  /v1/customization/jobs/{job_id}/cancel:
    post:
      tags:
      - Customization
      summary: Cancel Customization Job
      description: Cancel a customization job.
      operationId: cancel_customization_job_customization_jobs__job_id__cancel_post
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          pattern: ^cust-[a-zA-Z0-9]{14,22}$
          title: Job Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomizationJobOutput'
        '404':
          description: Job does not exist.
        '422':
          description: Validation Error
  /v1/customization/jobs/{job_id}/container-logs:
    get:
      tags:
      - Customization
      summary: Get Customization Job Logs
      description: List the metrics emitted from training.
      operationId: get_customization_job_logs_customization_jobs__job_id__container_logs_get
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          pattern: ^cust-[a-zA-Z0-9]{14,22}$
          title: Job Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobLogs'
        '404':
          description: Job does not exist.
        '422':
          description: Validation Error
  /v1/customization/jobs/{job_id}/status:
    get:
      tags:
      - Customization
      summary: Get Customization Job Status
      description: List the metrics emitted from training.
      operationId: get_customization_job_status_customization_jobs__job_id__status_get
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          pattern: ^cust-[a-zA-Z0-9]{14,22}$
          title: Job Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomizationStatusDetails'
              examples:
                get__v1_customization_jobs_{job_id}_status_llama_3.2_1b_xlam_fine-tuning_job_status_response:
                  summary: Llama 3.2 1B xLAM Fine-tuning Job Status
                  description: Detailed training progress including metrics, status
                    logs, and current training loss
                  value:
                    created_at: '2025-04-04T15:24:29.220140'
                    updated_at: '2025-04-04T15:24:29.220140'
                    status: running
                    steps_completed: 0
                    epochs_completed: 0
                    percentage_done: 0.0
                    metrics: {}
                    status_logs:
                    - updated_at: '2025-04-04T15:24:29'
                      message: PVCCreated
                      detail: ''
                    - updated_at: '2025-04-04T15:24:29'
                      message: EntityHandler_0_Created
                      detail: ''
                    - updated_at: '2025-04-04T15:24:29'
                      message: EntityHandler_0_Pending
                      detail: ''
                    - updated_at: '2025-04-04T15:24:29.220140'
                      message: created
                      detail: ''
        '404':
          description: Job does not exist.
        '422':
          description: Validation Error
  /v1/evaluation/configs:
    get:
      tags:
      - Evaluation
      summary: List Evaluation Configs
      description: List available evaluation configs.
      operationId: list_evaluation_configs_v1_evaluation_configs_get
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          description: Page number.
          default: 1
          title: Page
        description: Page number.
      - name: page_size
        in: query
        required: false
        schema:
          type: integer
          description: Page size.
          default: 10
          title: Page Size
        description: Page size.
      - name: sort
        in: query
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/GenericSortField'
          description: The field to sort by. To sort in decreasing order, use `-`
            in front of the field name.
          default: created_at
        description: The field to sort by. To sort in decreasing order, use `-` in
          front of the field name.
      - in: query
        name: filter
        style: deepObject
        required: false
        explode: true
        schema:
          $ref: '#/components/schemas/EvaluationConfigFilter'
        description: '

          Filter configs on various criteria.

          '
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationConfigsPage'
        '400':
          description: Invalid Request Body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
      - Evaluation
      summary: Create Evaluation Config
      description: Create a new evaluation config.
      operationId: create_evaluation_config_v1_evaluation_configs_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluationConfigInput'
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationConfigOutput'
        '422':
          description: Validation Error
  /v1/evaluation/configs/{namespace}/{config_name}:
    get:
      tags:
      - Evaluation
      summary: Get Evaluation Config
      description: Get evaluation config info.
      operationId: get_evaluation_config_v1_evaluation_configs__namespace___config_name__get
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: config_name
        in: path
        required: true
        schema:
          type: string
          title: Config Name
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationConfigOutput'
        '404':
          description: Evaluation Config does not exist.
        '422':
          description: Validation Error
    patch:
      tags:
      - Evaluation
      summary: Update Evaluation Config
      description: Update the evaluation config.
      operationId: update_evaluation_config_v1_evaluation_configs__namespace___config_name__patch
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: config_name
        in: path
        required: true
        schema:
          type: string
          title: Config Name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluationConfigUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationConfigOutput'
        '404':
          description: Evaluation config does not exist.
        '422':
          description: Validation Error
    delete:
      tags:
      - Evaluation
      summary: Delete Evaluation Config
      operationId: delete_evaluation_config_v1_evaluation_configs__namespace___config_name__delete
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: config_name
        in: path
        required: true
        schema:
          type: string
          title: Config Name
      responses:
        '200':
          description: Successful model deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '404':
          description: Evaluation config does not exist.
        '422':
          description: Unable to delete evaluation config due to validation error
            while processing request.
  /v1/evaluation/jobs:
    post:
      tags:
      - Evaluation
      summary: Launch an Evaluation Job
      description: 'Start a new evaluation job by providing the necessary model and
        evaluation specifications.


        A unique `id` will be created and provided in the response along with additional
        details.'
      operationId: launch_evaluation_job_v1_evaluation_jobs_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluationJobInput'
            examples:
              post__v1_evaluation_jobs_create_evaluation_job_request:
                summary: Create Evaluation Job
                description: Request to create an evaluation job for a model
                value:
                  config:
                    schema_version: '1.0'
                    type: custom
                    params:
                      parallelism: 8
                    tasks:
                      qa:
                        type: completion
                        params:
                          template:
                            messages:
                            - role: '{{item.messages[0].role}}'
                              content: '{{item.messages[0].content}}'
                            - role: '{{item.messages[1].role}}'
                              content: '{{item.messages[1].content}}'
                            max_tokens: 20
                            temperature: 0.7
                            top_p: 0.9
                        metrics:
                          bleu:
                            type: bleu
                            params:
                              references:
                              - '{{item.messages[2].content | trim}}'
                          string-check:
                            type: string-check
                            params:
                              check:
                              - '{{item.messages[2].content}}'
                              - equals
                              - '{{output_text | trim}}'
                  target:
                    type: model
                    model: meta/llama-3.2-1b-instruct
              post__v1_evaluation_jobs_create_base_model_evaluation_job_request:
                summary: Create Base Model Evaluation Job
                description: Request to create an evaluation job for the base Llama
                  3.2 1B model using tool calling accuracy metrics
                value:
                  config:
                    type: custom
                    tasks:
                      custom-tool-calling:
                        type: chat-completion
                        dataset:
                          files_url: hf://datasets/xlam-tutorial-ns/xlam-ft-dataset/testing/xlam-test-single.jsonl
                          limit: 50
                        params:
                          template:
                            messages: '{{ item.messages[:-1] | tojson}}'
                            tools: '{{ item.tools | tojson }}'
                            tool_choice: auto
                        metrics:
                          tool-calling-accuracy:
                            type: tool-calling
                            params:
                              tool_calls_ground_truth: '{{ item.messages[-1].tool_calls
                                | tojson }}'
                  target:
                    type: model
                    model: meta/llama-3.2-1b-instruct
              post__v1_evaluation_jobs_create_fine-tuned_model_evaluation_job_request:
                summary: Create Fine-tuned Model Evaluation Job
                description: Request to create an evaluation job for the fine-tuned
                  Llama 3.2 1B model using the same evaluation configuration
                value:
                  config:
                    type: custom
                    tasks:
                      custom-tool-calling:
                        type: chat-completion
                        dataset:
                          files_url: hf://datasets/xlam-tutorial-ns/xlam-ft-dataset/testing/xlam-test-single.jsonl
                          limit: 50
                        params:
                          template:
                            messages: '{{ item.messages[:-1] | tojson}}'
                            tools: '{{ item.tools | tojson }}'
                            tool_choice: auto
                        metrics:
                          tool-calling-accuracy:
                            type: tool-calling
                            params:
                              tool_calls_ground_truth: '{{ item.messages[-1].tool_calls
                                | tojson }}'
                  target:
                    type: model
                    model: xlam-tutorial-ns/llama-3.2-1b-xlam-run3@cust-AW21JJAyGZjs24Ksq4QFNU
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationJob'
              examples:
                post__v1_evaluation_jobs_evaluation_job_created_response:
                  summary: Evaluation Job Created
                  description: Confirmation of successful evaluation job creation
                  value:
                    created_at: '2025-04-08T11:37:54.712122'
                    updated_at: '2025-04-08T11:37:54.712123'
                    id: eval-4yfG4MijQkjvTcJZywxS5S
                    namespace: default
                    target:
                      schema_version: '1.0'
                      id: eval-target-6PyRmfUy2KmRYiee8pZyH6
                      type_prefix: eval-target
                      namespace: default
                      created_at: '2025-04-08T11:37:54.711778'
                      updated_at: '2025-04-08T11:37:54.711778'
                      custom_fields: {}
                      name: eval-target-6PyRmfUy2KmRYiee8pZyH6
                      type: model
                      model: meta/llama-3.2-1b-instruct
                    config:
                      schema_version: '1.0'
                      id: eval-config-HKDFjEac3Jd8Rxufjz9Lwq
                      type_prefix: eval-config
                      namespace: default
                      created_at: '2025-04-08T11:37:54.711541'
                      updated_at: '2025-04-08T11:37:54.711544'
                      custom_fields: {}
                      name: eval-config-HKDFjEac3Jd8Rxufjz9Lwq
                      type: custom
                      params:
                        parallelism: 8
                      tasks:
                        qa:
                          type: completion
                          params:
                            template:
                              messages:
                              - role: '{{item.messages[0].role}}'
                                content: '{{item.messages[0].content}}'
                              - role: '{{item.messages[1].role}}'
                                content: '{{item.messages[1].content}}'
                              max_tokens: 20
                              temperature: 0.7
                              top_p: 0.9
                          metrics:
                            bleu:
                              type: bleu
                              params:
                                references:
                                - '{{item.messages[2].content | trim}}'
                            string-check:
                              type: string-check
                              params:
                                check:
                                - '{{item.messages[2].content}}'
                                - equals
                                - '{{output_text | trim}}'
                    status: created
                    status_details:
                      task_status: {}
                post__v1_evaluation_jobs_base_model_evaluation_job_created_response:
                  summary: Base Model Evaluation Job Created
                  description: Response containing evaluation job details including
                    configuration and target model information
                  value:
                    created_at: '2025-04-04T15:42:36.270485'
                    updated_at: '2025-04-04T15:42:36.270486'
                    id: eval-8smz8Zx4LY8r4fpYF1o97t
                    namespace: default
                    target:
                      schema_version: '1.0'
                      id: eval-target-KA9v7deYYpqVJByGZNDi3t
                      type: model
                      model: meta/llama-3.2-1b-instruct
                    config:
                      type: custom
                      tasks:
                        custom-tool-calling:
                          type: chat-completion
                          params:
                            template:
                              messages: '{{ item.messages[:-1] | tojson}}'
                              tools: '{{ item.tools | tojson }}'
                              tool_choice: auto
                          metrics:
                            tool-calling-accuracy:
                              type: tool-calling
                              params:
                                tool_calls_ground_truth: '{{ item.messages[-1].tool_calls
                                  | tojson }}'
                          dataset:
                            files_url: hf://datasets/xlam-tutorial-ns/xlam-ft-dataset/testing/xlam-test-single.jsonl
                            limit: 50
                    status: created
                    status_details:
                      task_status: {}
                post__v1_evaluation_jobs_fine-tuned_model_evaluation_job_created_response:
                  summary: Fine-tuned Model Evaluation Job Created
                  description: Response containing evaluation job details for the
                    fine-tuned model
                  value:
                    created_at: '2025-04-04T15:45:18.292841'
                    updated_at: '2025-04-04T15:45:18.292842'
                    id: eval-MjpZDNRpaEVWUeusZ9TNik
                    namespace: default
                    target:
                      schema_version: '1.0'
                      id: eval-target-WzWDX4Qwc4rfdZxPuKJqcQ
                      type: model
                      model: xlam-tutorial-ns/llama-3.2-1b-xlam-run3@cust-AW21JJAyGZjs24Ksq4QFNU
                    config:
                      type: custom
                      tasks:
                        custom-tool-calling:
                          type: chat-completion
                          params:
                            template:
                              messages: '{{ item.messages[:-1] | tojson}}'
                              tools: '{{ item.tools | tojson }}'
                              tool_choice: auto
                          metrics:
                            tool-calling-accuracy:
                              type: tool-calling
                              params:
                                tool_calls_ground_truth: '{{ item.messages[-1].tool_calls
                                  | tojson }}'
                          dataset:
                            files_url: hf://datasets/xlam-tutorial-ns/xlam-ft-dataset/testing/xlam-test-single.jsonl
                            limit: 50
                    status: created
                    status_details:
                      task_status: {}
        '400':
          description: Invalid Request Body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
      - Evaluation
      summary: List Evaluations
      description: List available evaluation jobs.
      operationId: list_evaluation_jobs_v1_evaluation_jobs_get
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          description: Page number.
          default: 1
          title: Page
        description: Page number.
      - name: page_size
        in: query
        required: false
        schema:
          type: integer
          description: Page size.
          default: 10
          title: Page Size
        description: Page size.
      - name: sort
        in: query
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/GenericSortField'
          description: The field to sort by. To sort in decreasing order, use `-`
            in front of the field name.
          default: created_at
        description: The field to sort by. To sort in decreasing order, use `-` in
          front of the field name.
      - in: query
        name: filter
        style: deepObject
        required: false
        explode: true
        schema:
          $ref: '#/components/schemas/EvaluationJobFilter'
        description: '

          Filter jobs on various criteria.

          '
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationJobsPage'
        '400':
          description: Invalid Query Parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Evaluations Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1/evaluation/jobs/{job_id}:
    get:
      tags:
      - Evaluation
      summary: Get Evaluation Details
      description: 'Access detailed information about a specific evaluation.

        Once an evaluation is finished, retrieve comprehensive results.'
      operationId: get_evaluation_job_v1_evaluation_jobs__job_id__get
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationJob'
        '400':
          description: Invalid ID Supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Evaluation Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
      - Evaluation
      summary: Delete Evaluation
      description: Delete Evaluation by Evaluation ID.
      operationId: delete_evaluation_job_v1_evaluation_jobs__job_id__delete
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      responses:
        '204':
          description: Successful Response
        '400':
          description: Invalid ID Supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Evaluation Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1/evaluation/jobs/{job_id}/cancel:
    post:
      tags:
      - Evaluation
      summary: Stop Evaluation Job
      description: Cancel an evaluation job.
      operationId: cancel_evaluation_v1_evaluation_jobs__job_id__cancel_post
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '400':
          description: Invalid ID Supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Evaluation Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1/evaluation/jobs/{job_id}/download-results:
    get:
      tags:
      - Evaluation
      summary: Download Evaluation Results
      description: 'Download the result directory containing configuration files,
        logs, and evaluation results

        for a specific evaluation run.

        The result directory is packaged and provided as a downloadable archive.'
      operationId: download_evaluation_results_v1_evaluation_jobs__job_id__download_results_get
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      responses:
        '200':
          description: Successful Response
          content:
            application/zip:
              schema:
                type: string
                format: binary
              examples:
                get__v1_evaluation_jobs_{job_id}_download-results_download_evaluation_results_response:
                  summary: Download Evaluation Results
                  description: Response containing the complete evaluation results
                    file for detailed analysis
                  value: Zip archive containing configuration files, logs, and evaluation
                    results for a specific evaluation run.
        '400':
          description: Invalid ID Supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1/evaluation/jobs/{job_id}/logs:
    get:
      tags:
      - Evaluation
      summary: Download Evaluation Job Logs
      description: 'Return the logs generated by the evaluation job.


        The logs are returned as a ZIP file.'
      operationId: download_evaluation_job_logs_v1_evaluation_jobs__job_id__logs_get
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      responses:
        '200':
          description: Successful Response.
          content:
            application/json:
              schema: {}
        '404':
          description: Job does not exist.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '501':
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1/evaluation/jobs/{job_id}/results:
    get:
      tags:
      - Evaluation
      summary: Evaluation Job Results
      description: Return the results of the evaluation.
      operationId: evaluation_job_results_v1_evaluation_jobs__job_id__results_get
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      responses:
        '200':
          description: Successful Response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationResult'
              examples:
                get__v1_evaluation_jobs_{job_id}_results_evaluation_job_results_response:
                  summary: Evaluation Job Results
                  description: Detailed results of the completed evaluation job
                  value:
                    created_at: '2025-04-08T11:37:54.738716'
                    updated_at: '2025-04-08T11:37:54.738717'
                    id: evaluation_result-CH449CEgMSYtUGP1vrgTrC
                    job: eval-4yfG4MijQkjvTcJZywxS5S
                    tasks:
                      qa:
                        metrics:
                          bleu:
                            scores:
                              sentence:
                                value: 32.30330716268888
                                stats:
                                  count: 200
                                  sum: 6460.661432537776
                                  mean: 32.30330716268888
                              corpus:
                                value: 14.025647116695085
                          string-check:
                            scores:
                              string-check:
                                value: 0.255
                                stats:
                                  count: 200
                                  sum: 51.0
                                  mean: 0.255
                    groups: {}
                    namespace: default
                    custom_fields: {}
                get__v1_evaluation_jobs_{job_id}_results_base_model_evaluation_results_response:
                  summary: Base Model Evaluation Results
                  description: Response containing evaluation metrics for the base
                    model including function name and arguments accuracy
                  value:
                    created_at: '2025-04-04T15:42:36.298023'
                    updated_at: '2025-04-04T15:42:36.298025'
                    id: evaluation_result-Fx9TBJzq5cATuLs3URmAHM
                    job: eval-8smz8Zx4LY8r4fpYF1o97t
                    tasks:
                      custom-tool-calling:
                        metrics:
                          tool-calling-accuracy:
                            scores:
                              function_name_accuracy:
                                value: 0.12
                                stats:
                                  count: 50
                                  sum: 6.0
                                  mean: 0.12
                              function_name_and_args_accuracy:
                                value: 0.1
                                stats:
                                  count: 50
                                  sum: 5.0
                                  mean: 0.1
                get__v1_evaluation_jobs_{job_id}_results_fine-tuned_model_evaluation_results_response:
                  summary: Fine-tuned Model Evaluation Results
                  description: Response containing evaluation metrics for the fine-tuned
                    model showing improved accuracy scores
                  value:
                    created_at: '2025-04-04T15:45:18.316575'
                    updated_at: '2025-04-04T15:45:18.316576'
                    id: evaluation_result-4kBKymmYbEAKQvXEu1poTm
                    job: eval-MjpZDNRpaEVWUeusZ9TNik
                    tasks:
                      custom-tool-calling:
                        metrics:
                          tool-calling-accuracy:
                            scores:
                              function_name_accuracy:
                                value: 0.96
                                stats:
                                  count: 50
                                  sum: 48.0
                                  mean: 0.96
                              function_name_and_args_accuracy:
                                value: 0.64
                                stats:
                                  count: 50
                                  sum: 32.0
                                  mean: 0.64
        '404':
          description: Job does not exist.
        '422':
          description: Validation Error.
  /v1/evaluation/jobs/{job_id}/status:
    get:
      tags:
      - Evaluation
      summary: Get Evaluation Details
      description: 'Access detailed information about a specific evaluation.

        Once an evaluation is finished, retrieve comprehensive results.'
      operationId: get_evaluation_details_v1_evaluation_jobs__job_id__status_get
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationStatusDetails'
              examples:
                get__v1_evaluation_jobs_{job_id}_status_evaluation_job_status_response:
                  summary: Evaluation Job Status
                  description: Response containing current status and progress of
                    the evaluation job
                  value:
                    status: running
                    status_details:
                      progress: 32.0
        '400':
          description: Invalid ID Supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Evaluation Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1/evaluation/live:
    post:
      tags:
      - Evaluation
      summary: Launch a live evaluation Job
      description: 'Start a live evaluation. Similar to starting an evaluation job,
        but waits and returns the results.

        Not evaluation job is persisted.'
      operationId: launch_live_evaluation_job_v1_evaluation_live_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluationJobInput'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveEvaluationOutput'
        '400':
          description: Invalid Request Body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/evaluation/results:
    get:
      tags:
      - Evaluation
      summary: List Evaluation Results
      description: List available evaluation results.
      operationId: list_evaluation_results_v1_evaluation_results_get
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          description: Page number.
          default: 1
          title: Page
        description: Page number.
      - name: page_size
        in: query
        required: false
        schema:
          type: integer
          description: Page size.
          default: 10
          title: Page Size
        description: Page size.
      - name: sort
        in: query
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/GenericSortField'
          description: The field to sort by. To sort in decreasing order, use `-`
            in front of the field name.
          default: created_at
        description: The field to sort by. To sort in decreasing order, use `-` in
          front of the field name.
      - in: query
        name: filter
        style: deepObject
        required: false
        explode: true
        schema:
          $ref: '#/components/schemas/EvaluationResultFilter'
        description: '

          Filter results on various criteria.

          '
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationResultsPage'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
      - Evaluation
      summary: Create Evaluation Result
      description: Create a new evaluation result.
      operationId: create_evaluation_result_v1_evaluation_results_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluationResultInput'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationResult'
        '422':
          description: Validation Error
  /v1/evaluation/results/{result_id}:
    get:
      tags:
      - Evaluation
      summary: Get Evaluation Result
      description: Get evaluation result info.
      operationId: get_evaluation_result_v1_evaluation_results__result_id__get
      parameters:
      - name: result_id
        in: path
        required: true
        schema:
          type: string
          title: Result Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationResult'
        '404':
          description: Evaluation Result does not exist.
        '422':
          description: Validation Error
    patch:
      tags:
      - Evaluation
      summary: Update Evaluation Result
      description: Update the evaluation result.
      operationId: update_evaluation_result_v1_evaluation_results__result_id__patch
      parameters:
      - name: result_id
        in: path
        required: true
        schema:
          type: string
          title: Result Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluationResultUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationResult'
        '404':
          description: Evaluation result does not exist.
        '422':
          description: Validation Error
    delete:
      tags:
      - Evaluation
      summary: Delete Evaluation Result
      operationId: delete_evaluation_result_v1_evaluation_results__result_id__delete
      parameters:
      - name: result_id
        in: path
        required: true
        schema:
          type: string
          title: Result Id
      responses:
        '200':
          description: Successful model deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '404':
          description: Evaluation result does not exist.
        '422':
          description: Unable to delete evaluation result due to validation error
            while processing request.
  /v1/evaluation/targets:
    get:
      tags:
      - Evaluation
      summary: List Evaluation Targets
      description: List available evaluation targets.
      operationId: list_evaluation_targets_v1_evaluation_targets_get
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          description: Page number.
          default: 1
          title: Page
        description: Page number.
      - name: page_size
        in: query
        required: false
        schema:
          type: integer
          description: Page size.
          default: 10
          title: Page Size
        description: Page size.
      - name: sort
        in: query
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/GenericSortField'
          description: The field to sort by. To sort in decreasing order, use `-`
            in front of the field name.
          default: created_at
        description: The field to sort by. To sort in decreasing order, use `-` in
          front of the field name.
      - in: query
        name: filter
        style: deepObject
        required: false
        explode: true
        schema:
          $ref: '#/components/schemas/EvaluationTargetFilter'
        description: '

          Filter targets on various criteria.

          '
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationTargetsPage'
        '400':
          description: Invalid Request Body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
      - Evaluation
      summary: Create Evaluation Target
      description: Create a new evaluation target.
      operationId: create_evaluation_target_v1_evaluation_targets_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluationTargetInput'
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationTargetOutput'
        '422':
          description: Validation Error
  /v1/evaluation/targets/{namespace}/{target_name}:
    get:
      tags:
      - Evaluation
      summary: Get Evaluation Target
      description: Get evaluation target info.
      operationId: get_evaluation_target_v1_evaluation_targets__namespace___target_name__get
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: target_name
        in: path
        required: true
        schema:
          type: string
          title: Target Name
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationTargetOutput'
        '404':
          description: Evaluation Target does not exist.
        '422':
          description: Validation Error
    patch:
      tags:
      - Evaluation
      summary: Update Evaluation Target
      description: Update an evaluation target.
      operationId: update_evaluation_target_v1_evaluation_targets__namespace___target_name__patch
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: target_name
        in: path
        required: true
        schema:
          type: string
          title: Target Name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluationTargetUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationTargetOutput'
        '404':
          description: Evaluation target does not exist.
        '422':
          description: Validation Error
    delete:
      tags:
      - Evaluation
      summary: Delete Evaluation Target
      operationId: delete_evaluation_target_v1_evaluation_targets__namespace___target_name__delete
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: target_name
        in: path
        required: true
        schema:
          type: string
          title: Target Name
      responses:
        '200':
          description: Successful model deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '404':
          description: Evaluation target does not exist.
        '422':
          description: Unable to delete evaluation target due to validation error
            while processing request.
  /v1/guardrail/chat/completions:
    post:
      tags:
      - Guardrails
      summary: Send chat completion requests
      description: Chat completion for the provided conversation.
      operationId: chat_completion_v1_guardrail_chat_completions_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GuardrailChatCompletionRequest'
            examples:
              openai_api_default_config:
                summary: Example using the default guardrail configuration.
                description: ''
                value:
                  model: meta/llama3-70b-instruct
                  messages:
                  - role: user
                    content: what can you do for me?
                  max_tokens: 16
                  stream: false
                  temperature: 1.0
                  top_p: 1.0
                  stop: []
                  frequency_penalty: 0.0
                  presence_penalty: 0.0
              openai_api:
                summary: Example using specific guardrail configuration.
                description: ''
                value:
                  model: meta/llama3-70b-instruct
                  messages:
                  - role: user
                    content: what can you do for me?
                  guardrails:
                    config_id: self-check
                  max_tokens: 16
                  stream: false
                  temperature: 1.0
                  top_p: 1.0
                  stop: []
                  frequency_penalty: 0.0
                  presence_penalty: 0.0
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuardrailChatCompletionResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/GuardrailChatCompletionStreamResponse'
        '400':
          description: Invalid Request Body
        '422':
          description: Validation Error
        '500':
          description: Internal Server Error
  /v1/guardrail/checks:
    post:
      tags:
      - Guardrails
      summary: Guardrail check request
      description: Chat completion for the provided conversation.
      operationId: check_v1_guardrail_checks_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GuardrailCheckRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuardrailCheckResponse'
        '400':
          description: Invalid Request Body
        '422':
          description: Validation Error
        '500':
          description: Internal Server Error
  /v1/guardrail/completions:
    post:
      tags:
      - Guardrails
      summary: Send completion requests
      description: Chat completion for the provided conversation.
      operationId: create_completion_v1_guardrail_completions_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GuardrailCompletionRequest'
            examples:
              example_with_default_config:
                summary: Example using the default guardrail configuration.
                description: ''
                value:
                  model: meta/llama3-70b-instruct
                  prompt: what can you do for me?
                  max_tokens: 16
                  stream: false
                  temperature: 1.0
                  top_p: 1.0
                  stop: []
                  frequency_penalty: 0.0
                  presence_penalty: 0.0
              example_with_specific_config:
                summary: Example using specific guardrail configuration.
                description: ''
                value:
                  model: meta/llama3-70b-instruct
                  prompt: what can you do for me?
                  guardrails:
                    config_id: hello_world
                  max_tokens: 16
                  n: 1
                  stream: false
                  temperature: 1.0
                  top_p: 1.0
                  stop: []
                  frequency_penalty: 0.0
                  presence_penalty: 0.0
                  seed: 0
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuardrailCompletionResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/GuardrailCompletionStreamResponse'
        '400':
          description: Invalid Request Body
        '422':
          description: Validation Error
        '500':
          description: Internal Server Error
  /v1/guardrail/configs:
    get:
      tags:
      - Guardrails
      summary: List Guardrail Configs
      description: List available guardrail configs.
      operationId: list_guardrail_configs_v1_guardrail_configs_get
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          description: Page number.
          default: 1
          title: Page
        description: Page number.
      - name: page_size
        in: query
        required: false
        schema:
          type: integer
          description: Page size.
          default: 10
          title: Page Size
        description: Page size.
      - name: sort
        in: query
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/GenericSortField'
          description: The field to sort by. To sort in decreasing order, use `-`
            in front of the field name.
          default: created_at
        description: The field to sort by. To sort in decreasing order, use `-` in
          front of the field name.
      - in: query
        name: filter
        style: deepObject
        required: false
        explode: true
        schema:
          $ref: '#/components/schemas/GuardrailConfigFilter'
        description: '

          Filter configs on various criteria.

          '
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuardrailConfigsPage'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
      - Guardrails
      summary: Create Config
      description: Create a new guardrail config.
      operationId: create_config_v1_guardrail_configs_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GuardrailConfigInputGU'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuardrailConfig'
        '422':
          description: Validation Error
        '409':
          description: Config already exists.
  /v1/guardrail/configs/{namespace}/{config_name}:
    get:
      tags:
      - Guardrails
      summary: Get Guardrail Config
      description: Get info about a guardrail configuration.
      operationId: get_guardrail_config_v1_guardrail_configs__namespace___config_name__get
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: config_name
        in: path
        required: true
        schema:
          type: string
          title: Config Name
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuardrailConfig'
        '404':
          description: Config does not exist.
        '422':
          description: Validation Error
    patch:
      tags:
      - Guardrails
      summary: Update Config
      description: 'Update model metadata. If the request body has an empty field,

        keep the old value.'
      operationId: update_config_v1_guardrail_configs__namespace___config_name__patch
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: config_name
        in: path
        required: true
        schema:
          type: string
          title: Config Name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GuardrailConfigUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuardrailConfig'
        '404':
          description: Config does not exist.
        '422':
          description: Validation Error
    delete:
      tags:
      - Guardrails
      summary: Delete Config
      operationId: delete_config_v1_guardrail_configs__namespace___config_name__delete
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: config_name
        in: path
        required: true
        schema:
          type: string
          title: Config Name
      responses:
        '200':
          description: Successful model deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '404':
          description: Config does not exist.
        '422':
          description: Unable to delete config due to validation error while processing
            request.
  /v1/guardrail/models:
    get:
      tags:
      - Guardrails
      summary: Get list of registered Application LLMs.
      description: "Return list of models registered in the Global Config Registry\
        \ in OpenAI format as below\n{\n    \"object\": \"list\",\n    \"data\": [\n\
        \        {\n            \"id\": \"gpt-4o-audio-preview-2024-12-17\",\n   \
        \         \"object\": \"model\",\n            \"created\": 1734034239,\n \
        \           \"owned_by\": \"system\"\n        },\n...\n    ]\n}"
      operationId: get_application_models_v1_guardrail_models_get
      parameters:
      - name: response_model
        in: query
        required: false
        schema:
          title: Response Model
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelsResponse'
        '400':
          description: Invalid Request Body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/deployment/configs:
    get:
      tags:
      - Deployment
      summary: List Deployment Configs
      description: List available deployment configs.
      operationId: list_deployment_configs_v1_deployment_configs_get
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          description: Page number.
          default: 1
          title: Page
        description: Page number.
      - name: page_size
        in: query
        required: false
        schema:
          type: integer
          description: Page size.
          default: 10
          title: Page Size
        description: Page size.
      - name: sort
        in: query
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/GenericSortField'
          description: The field to sort by. To sort in decreasing order, use `-`
            in front of the field name.
          default: created_at
        description: The field to sort by. To sort in decreasing order, use `-` in
          front of the field name.
      - in: query
        name: filter
        style: deepObject
        required: false
        explode: true
        schema:
          $ref: '#/components/schemas/DeploymentConfigFilter'
        description: '

          Filter configs on various criteria.

          '
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentConfigsPage'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
      - Deployment
      summary: Create Config
      description: Create a new deployment config.
      operationId: create_config_v1_deployment_configs_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentConfigInput'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentConfig'
        '422':
          description: Validation Error
  /v1/deployment/configs/{namespace}/{config_name}:
    get:
      tags:
      - Deployment
      summary: Get Deployment Config
      description: Get info about a deployment configuration.
      operationId: get_deployment_config_v1_deployment_configs__namespace___config_name__get
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: config_name
        in: path
        required: true
        schema:
          type: string
          title: Config Name
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentConfig'
        '404':
          description: Config does not exist.
        '422':
          description: Validation Error
    patch:
      tags:
      - Deployment
      summary: Update Config
      description: 'Update model metadata. If the request body has an empty field,

        keep the old value.'
      operationId: update_config_v1_deployment_configs__namespace___config_name__patch
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: config_name
        in: path
        required: true
        schema:
          type: string
          title: Config Name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentConfigUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentConfig'
        '404':
          description: Config does not exist.
        '422':
          description: Validation Error
    delete:
      tags:
      - Deployment
      summary: Delete Config
      operationId: delete_config_v1_deployment_configs__namespace___config_name__delete
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: config_name
        in: path
        required: true
        schema:
          type: string
          title: Config Name
      responses:
        '200':
          description: Successful model deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '404':
          description: Config does not exist.
        '422':
          description: Unable to delete config due to validation error while processing
            request.
  /v1/deployment/model-deployments:
    get:
      tags:
      - Deployment
      summary: List Model Deployments
      description: List available deployment model_deployments.
      operationId: list_model_deployments_v1_deployment_model_deployments_get
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          description: Page number.
          default: 1
          title: Page
        description: Page number.
      - name: page_size
        in: query
        required: false
        schema:
          type: integer
          description: Page size.
          default: 10
          title: Page Size
        description: Page size.
      - name: sort
        in: query
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/GenericSortField'
          description: The field to sort by. To sort in decreasing order, use `-`
            in front of the field name.
          default: created_at
        description: The field to sort by. To sort in decreasing order, use `-` in
          front of the field name.
      - in: query
        name: filter
        style: deepObject
        required: false
        explode: true
        schema:
          $ref: '#/components/schemas/ModelDeploymentFilter'
        description: '

          Filter model_deployments on various criteria.

          '
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelDeploymentsPage'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
      - Deployment
      summary: Create Model Deployment
      description: Create a new deployment model_deployment.
      operationId: create_model_deployment_v1_deployment_model_deployments_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelDeploymentInput'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelDeployment'
        '422':
          description: Validation Error
  /v1/deployment/model-deployments/{namespace}/{deployment_name}:
    get:
      tags:
      - Deployment
      summary: Get Model Deployment
      description: Get info about a model deployment.
      operationId: get_model_deployment_v1_deployment_model_deployments__namespace___deployment_name__get
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: deployment_name
        in: path
        required: true
        schema:
          type: string
          title: Deployment Name
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelDeployment'
        '404':
          description: Config does not exist.
        '422':
          description: Validation Error
    patch:
      tags:
      - Deployment
      summary: Update Model Deployment
      description: Update model deployment
      operationId: update_model_deployment_v1_deployment_model_deployments__namespace___deployment_name__patch
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: deployment_name
        in: path
        required: true
        schema:
          type: string
          title: Deployment Name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelDeploymentUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelDeployment'
        '404':
          description: Config does not exist.
        '422':
          description: Validation Error
    delete:
      tags:
      - Deployment
      summary: Delete Model Deployment
      operationId: delete_model_deployment_v1_deployment_model_deployments__namespace___deployment_name__delete
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: deployment_name
        in: path
        required: true
        schema:
          type: string
          title: Deployment Name
      responses:
        '200':
          description: Successful model deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '404':
          description: Config does not exist.
        '422':
          description: Unable to delete model_deployment due to validation error while
            processing request.
  /v1/namespaces:
    get:
      tags:
      - Namespaces
      summary: List Namespaces
      description: Return the list of namespaces.
      operationId: list_namespaces_v1_namespaces_get
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          description: Page number.
          default: 1
          title: Page
        description: Page number.
      - name: page_size
        in: query
        required: false
        schema:
          type: integer
          description: Page size.
          default: 10
          title: Page Size
        description: Page size.
      - name: sort
        in: query
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/GenericSortField'
          description: The field to sort by. To sort in decreasing order, use `-`
            in front of the field name.
          default: created_at
        description: The field to sort by. To sort in decreasing order, use `-` in
          front of the field name.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NamespacesPage'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
      - Namespaces
      summary: Create Namespace
      description: 'Create a new namespace.


        Namespaces are generic containers for grouping related resources

        (e.g., models, datasets, customizations, evaluations).'
      operationId: create_namespace_v1_namespaces_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NamespaceInput'
            examples:
              post__v1_namespaces_create_xlam_tutorial_namespace_request:
                summary: Create xLAM Tutorial Namespace
                description: Request to create a new namespace with ID 'xlam-tutorial-ns'
                  for organizing xLAM resources
                value:
                  id: xlam-tutorial-ns
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespace'
              examples:
                post__v1_namespaces_namespace_creation_success_response:
                  summary: Namespace Creation Success
                  description: Confirmation of successful namespace creation with
                    status code 200
                  value:
                    status: 200
        '409':
          description: Namespace already exists
        '422':
          description: Validation Error
  /v1/namespaces/{namespace_id}:
    get:
      tags:
      - Namespaces
      summary: Get Namespace
      description: Retrieve a namespace.
      operationId: get_namespace_v1_namespaces__namespace_id__get
      parameters:
      - name: namespace_id
        in: path
        required: true
        schema:
          type: string
          title: Namespace Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespace'
        '404':
          description: Namespace does not exist.
        '422':
          description: Validation Error
    patch:
      tags:
      - Namespaces
      summary: Update Namespace
      description: Update a namespace.
      operationId: update_namespace_v1_namespaces__namespace_id__patch
      parameters:
      - name: namespace_id
        in: path
        required: true
        schema:
          type: string
          title: Namespace Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NamespaceUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespace'
        '404':
          description: Namespace does not exist.
        '422':
          description: Validation Error
    delete:
      tags:
      - Namespaces
      summary: Delete Namespace
      operationId: delete_namespace_v1_namespaces__namespace_id__delete
      parameters:
      - name: namespace_id
        in: path
        required: true
        schema:
          type: string
          title: Namespace Id
      responses:
        '200':
          description: Successful model deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '404':
          description: Model does not exist.
        '422':
          description: Unable to delete model due to validation error while processing
            request.
  /v1/models:
    get:
      tags:
      - Models
      summary: List Models
      description: Return the list of available models.
      operationId: list_models_v1_models_get
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          description: Page number.
          default: 1
          title: Page
        description: Page number.
      - name: page_size
        in: query
        required: false
        schema:
          type: integer
          description: Page size.
          default: 1000
          title: Page Size
        description: Page size.
      - name: sort
        in: query
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/ModelSortField'
          description: The field to sort by. To sort in decreasing order, use `-`
            in front of the field name.
          default: created_at
        description: The field to sort by. To sort in decreasing order, use `-` in
          front of the field name.
      - in: query
        name: filter
        style: deepObject
        required: false
        explode: true
        schema:
          $ref: '#/components/schemas/ModelFilter'
        description: '

          Filter models on various criteria.


          Where it makes sense, you can also filter on the existence of a property.

          For example:

          - `?filter[peft]=true`: would filter all models with `peft` attribute set.

          '
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelsPage'
              examples:
                get__v1_models_xlam_tutorial_models_list_response:
                  summary: xLAM Tutorial Models List
                  description: Paginated list of available models in the xLAM tutorial
                    namespace with detailed specifications
                  value:
                    object: list
                    data:
                    - created_at: '2025-04-04T15:24:29.243502'
                      updated_at: '2025-04-04T15:24:29.243504'
                      name: llama-3.2-1b-xlam-run3@cust-AW21JJAyGZjs24Ksq4QFNU
                      namespace: xlam-tutorial-ns
                      description: None
                      spec:
                        num_parameters: 1000000000
                        context_size: 4096
                        num_virtual_tokens: 0
                        is_chat: true
                      artifact:
                        gpu_arch: Ampere
                        precision: bf16-mixed
                        tensor_parallelism: 1
                        backend_engine: nemo
                        status: upload_completed
                        files_url: hf://xlam-tutorial-ns/llama-3.2-1b-xlam-run3@cust-AW21JJAyGZjs24Ksq4QFNU
                      base_model: meta/llama-3.2-1b-instruct
                      peft:
                        finetuning_type: lora
                      schema_version: '1.0'
                      custom_fields: {}
                    pagination:
                      page: 1
                      page_size: 1000
                      current_page_size: 1
                      total_pages: 1
                      total_results: 1
                    sort: -created_at
                    filter:
                      namespace: xlam-tutorial-ns
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
      - Models
      summary: Create Model
      description: Create a new model.
      operationId: create_model_v1_models_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelInput'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelOutput'
        '409':
          description: Model already exists.
        '422':
          description: Validation Error
  /v1/models/{namespace}/{model_name}:
    get:
      tags:
      - Models
      summary: Get Model
      description: Get model info.
      operationId: get_model_v1_models__namespace___model_name__get
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: model_name
        in: path
        required: true
        schema:
          type: string
          title: Model Name
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelOutput'
              examples:
                get__v1_models_{namespace}_{model_name}_get_model_response:
                  summary: Get Model
                  description: Retrieve model information
                  value:
                    created_at: '2025-04-08T11:18:19.632312'
                    updated_at: '2025-04-08T11:18:19.632316'
                    name: test-example-model@v3
                    namespace: default
                    description: None
                    spec:
                      num_parameters: 1000000000
                      context_size: 4096
                      num_virtual_tokens: 0
                      is_chat: false
                    artifact:
                      gpu_arch: Ampere
                      precision: bf16-mixed
                      tensor_parallelism: 1
                      backend_engine: nemo
                      status: upload_completed
                      files_url: hf://default/test-example-model@v3
                    base_model: meta/llama-3.2-1b-instruct
                    peft:
                      finetuning_type: lora
                    schema_version: '1.0'
                    project: test-project
                    custom_fields: {}
        '404':
          description: Model does not exist.
        '422':
          description: Validation Error
    patch:
      tags:
      - Models
      summary: Update Model
      description: 'Update model metadata. If the request body has an empty field,

        keep the old value.'
      operationId: update_model_v1_models__namespace___model_name__patch
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: model_name
        in: path
        required: true
        schema:
          type: string
          title: Model Name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelOutput'
        '404':
          description: Model does not exist.
        '422':
          description: Validation Error
    delete:
      tags:
      - Models
      summary: Delete Model
      operationId: delete_model_v1_models__namespace___model_name__delete
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: model_name
        in: path
        required: true
        schema:
          type: string
          title: Model Name
      responses:
        '200':
          description: Successful model deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '404':
          description: Model does not exist.
        '422':
          description: Unable to delete model due to validation error while processing
            request.
  /v1/datasets:
    get:
      tags:
      - Datasets
      summary: List Datasets
      description: List all datasets.
      operationId: list_datasets_v1_datasets_get
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          description: Page number.
          default: 1
          title: Page
        description: Page number.
      - name: page_size
        in: query
        required: false
        schema:
          type: integer
          description: Page size.
          default: 10
          title: Page Size
        description: Page size.
      - name: sort
        in: query
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/DatasetSortField'
          description: The field to sort by. To sort in decreasing order, use `-`
            in front of the field name.
          default: created_at
        description: The field to sort by. To sort in decreasing order, use `-` in
          front of the field name.
      - in: query
        name: filter
        style: deepObject
        required: false
        explode: true
        schema:
          $ref: '#/components/schemas/DatasetFilter'
        description: '

          Filter configs on various criteria.

          '
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetsPage'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
      - Datasets
      summary: Create Dataset
      description: Create a new dataset.
      operationId: create_dataset_v1_datasets_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetInput'
            examples:
              post__v1_datasets_create_dataset_request:
                summary: Create Dataset
                description: Request to create a new dataset in the default namespace
                value:
                  name: sample-squad-test
                  namespace: default
                  description: This is a example of a dataset
                  files_url: hf://datasets/default/sample-squad-test
                  project: sample_project
              post__v1_datasets_create_xlam_fine-tuning_dataset_request:
                summary: Create xLAM Fine-tuning Dataset
                description: Request to register a new dataset for xLAM fine-tuning
                  in OpenAI ChatCompletions format
                value:
                  name: xlam-ft-dataset
                  namespace: xlam-tutorial-ns
                  description: Tool calling xLAM dataset in OpenAI ChatCompletions
                    format
                  files_url: hf://datasets/xlam-tutorial-ns/xlam-ft-dataset
                  project: tool_calling
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
              examples:
                post__v1_datasets_dataset_created_response:
                  summary: Dataset Created
                  description: Confirmation of successful dataset creation
                  value:
                    created_at: '2025-04-08T10:05:41.061684'
                    updated_at: '2025-04-08T10:05:41.061687'
                    name: sample-squad-test
                    namespace: default
                    description: This is a example of a dataset
                    files_url: hf://datasets/default/sample-squad-test
                    id: dataset-C556W4y5KB644RiSeErX8x
                    project: sample_project
                    custom_fields: {}
                post__v1_datasets_xlam_fine-tuning_dataset_registration_response:
                  summary: xLAM Fine-tuning Dataset Registration
                  description: Complete dataset registration details including ID,
                    timestamps, and project information
                  value:
                    created_at: '2025-04-04T08:17:58.537559'
                    updated_at: '2025-04-04T08:17:58.537562'
                    name: xlam-ft-dataset
                    namespace: xlam-tutorial-ns
                    description: Tool calling xLAM dataset in OpenAI ChatCompletions
                      format
                    files_url: hf://datasets/xlam-tutorial-ns/xlam-ft-dataset
                    id: dataset-QjSWviY8bhv2aVpUfSpBBD
                    project: tool_calling
                    custom_fields: {}
        '409':
          description: Model already exists.
        '422':
          description: Validation Error
  /v1/datasets/{namespace}/{dataset_name}:
    get:
      tags:
      - Datasets
      summary: Get Dataset
      operationId: get_dataset_v1_datasets__namespace___dataset_name__get
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: dataset_name
        in: path
        required: true
        schema:
          type: string
          title: Dataset Name
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
              examples:
                get__v1_datasets_{namespace}_{dataset_name}_get_dataset_response:
                  summary: Get Dataset
                  description: Retrieve dataset information
                  value:
                    created_at: '2025-04-08T10:05:41.061684'
                    updated_at: '2025-04-08T10:05:41.061687'
                    name: sample-squad-test
                    namespace: default
                    description: This is a example of a dataset
                    files_url: hf://datasets/default/sample-squad-test
                    id: dataset-C556W4y5KB644RiSeErX8x
                    project: sample_project
                    custom_fields: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      tags:
      - Datasets
      summary: Update Dataset
      description: 'Update dataset metadata. If the request body has an empty field,

        keep the old value.'
      operationId: update_dataset_v1_datasets__namespace___dataset_name__patch
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: dataset_name
        in: path
        required: true
        schema:
          type: string
          title: Dataset Name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
        '404':
          description: Model does not exist.
        '422':
          description: Validation Error
    delete:
      tags:
      - Datasets
      summary: Delete Dataset
      operationId: delete_dataset_v1_datasets__namespace___dataset_name__delete
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: dataset_name
        in: path
        required: true
        schema:
          type: string
          title: Dataset Name
      responses:
        '200':
          description: Successful dataset deletion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '404':
          description: Dataset does not exist
        '422':
          description: Unable to delete dataset due to validation error
  /v1/projects:
    get:
      tags:
      - Projects
      summary: List Projects
      description: List all projects.
      operationId: list_projects_v1_projects_get
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          description: Page number.
          default: 1
          title: Page
        description: Page number.
      - name: page_size
        in: query
        required: false
        schema:
          type: integer
          description: Page size.
          default: 10
          title: Page Size
        description: Page size.
      - name: sort
        in: query
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/ProjectSortField'
          description: The field to sort by. To sort in decreasing order, use `-`
            in front of the field name.
          default: created_at
        description: The field to sort by. To sort in decreasing order, use `-` in
          front of the field name.
      - in: query
        name: filter
        style: deepObject
        required: false
        explode: true
        schema:
          $ref: '#/components/schemas/ProjectFilter'
        description: '

          Filter projects on various criteria.

          '
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectsPage'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
      - Projects
      summary: Create Project
      description: Create a new project.
      operationId: create_project_v1_projects_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectInput'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '409':
          description: Model already exists.
        '422':
          description: Validation Error
  /v1/projects/{namespace}/{project_name}:
    get:
      tags:
      - Projects
      summary: Get Project
      operationId: get_project_v1_projects__namespace___project_name__get
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: project_name
        in: path
        required: true
        schema:
          type: string
          title: Project Name
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      tags:
      - Projects
      summary: Update Project
      description: Update project.
      operationId: update_project_v1_projects__namespace___project_name__patch
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: project_name
        in: path
        required: true
        schema:
          type: string
          title: Project Name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '404':
          description: Model does not exist.
        '422':
          description: Validation Error
    delete:
      tags:
      - Projects
      summary: Delete Project
      operationId: delete_project_v1_projects__namespace___project_name__delete
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: project_name
        in: path
        required: true
        schema:
          type: string
          title: Project Name
      responses:
        '200':
          description: Successful project deletion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '404':
          description: Project does not exist
        '422':
          description: Unable to delete project due to validation error
  /v1/customization/configs/{namespace}/{config_name}:
    get:
      tags:
      - Customization Configurations
      summary: Get Customization Config
      operationId: get_customization_config_customization_configs__namespace___config_name__get
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: config_name
        in: path
        required: true
        schema:
          type: string
          title: Config Name
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomizationConfigOutput'
        '404':
          description: Customization Config does not exist.
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      tags:
      - Customization Configurations
      summary: Patch Customization Config
      description: 'Update a customization configuration with partial data.


        This endpoint supports partial updates with the following behavior:


        **Override Behavior (Complete Replacement):**

        - Top-level fields (e.g., description) - values are completely replaced

        - `pod_spec` - each field in the pod_spec is replaced if provided. If a field
        is not provided, it is not removed.

        - `dataset_schemas` - entire dataset schemas are replaced if provided, no
        merging is done


        **Training Options Management:**

        Training options are identified by the combination of `training_type` and
        `finetuning_type`.

        When updating training options:

        1. If `training_options` is provided, matching existing options are updated
        field-by-field

        2. If `add_training_options` is provided, new options are appended to the
        list

        3. If `remove_training_options` is provided, matching options are deleted

        4. All other existing training options remain unchanged'
      operationId: patch_customization_config_customization_configs__namespace___config_name__patch
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: config_name
        in: path
        required: true
        schema:
          type: string
          title: Config Name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomizationConfigUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomizationConfigOutput'
        '404':
          description: Customization Config does not exist.
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
      - Customization Configurations
      summary: Delete Customization Config
      operationId: delete_customization_config_customization_configs__namespace___config_name__delete
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: config_name
        in: path
        required: true
        schema:
          type: string
          title: Config Name
      responses:
        '200':
          description: Deleted Successfully
          content:
            application/json:
              schema: {}
        '404':
          description: Customization Config does not exist.
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1/customization/targets:
    get:
      tags:
      - Customization Targets
      summary: List Customization Target
      description: List available customization targets.
      operationId: list_customization_target_customization_targets_get
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          exclusiveMinimum: 0
          description: Page number.
          default: 1
          title: Page
        description: Page number.
      - name: page_size
        in: query
        required: false
        schema:
          type: integer
          exclusiveMinimum: 0
          description: Page size.
          default: 10
          title: Page Size
        description: Page size.
      - name: sort
        in: query
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/GenericSortField'
          description: The field to sort by. To sort in decreasing order, use `-`
            in front of the field name.
          default: -created_at
        description: The field to sort by. To sort in decreasing order, use `-` in
          front of the field name.
      - in: query
        name: filter
        style: deepObject
        required: false
        explode: true
        schema:
          $ref: '#/components/schemas/CustomizationTargetFilter'
        description: '

          Filter targets on various criteria.

          '
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomizationTargetOutputsPage'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
      - Customization Targets
      summary: Create Customization Target
      description: Create a new customization target.
      operationId: create_customization_target_customization_targets_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomizationTargetInput'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomizationTargetOutput'
        '422':
          description: Validation Error
  /v1/customization/targets/{namespace}/{target_name}:
    get:
      tags:
      - Customization Targets
      summary: Get Customization Target
      description: Get info about a customization target.
      operationId: get_customization_target_customization_targets__namespace___target_name__get
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: target_name
        in: path
        required: true
        schema:
          type: string
          title: Target Name
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomizationTargetOutput'
        '404':
          description: Target not found
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      tags:
      - Customization Targets
      summary: Update Customization Target
      description: Update customization target.
      operationId: update_customization_target_customization_targets__namespace___target_name__patch
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: target_name
        in: path
        required: true
        schema:
          type: string
          title: Target Name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomizationTargetPatchInput'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomizationTargetOutput'
        '404':
          description: Not Found
        '422':
          description: Validation Error
    delete:
      tags:
      - Customization Targets
      summary: Delete Customization Target
      description: 'Delete a customization target and its associated model files.

        First checks if any existing customization job is currently using the target.

        If not, target row is locked, and enabled is set to False, so that it cannot
        be used for creating a new customization job

        Once target is disabled, creates a k8s job to remove files from pvc and awaits
        until the k8s job is completed.'
      operationId: delete_customization_target_customization_targets__namespace___target_name__delete
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: target_name
        in: path
        required: true
        schema:
          type: string
          title: Target Name
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '404':
          description: Target not found
        '500':
          description: Internal Server Error
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1/embeddings:
    post:
      tags:
      - Embeddings
      summary: Send embeddings requests
      description: Embeddings for the provided input.
      operationId: embeddings_v1_embeddings_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbeddingsRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEmbeddingResponse'
        '400':
          description: Invalid Request Body
        '422':
          description: Validation Error
        '500':
          description: Internal Server Error
  /v1beta1/audit/configs:
    get:
      tags:
      - Auditor
      summary: Get Configs
      operationId: get_configs_v1beta1_audit_configs_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AuditConfigOutput'
                type: array
                title: Response Get Configs V1Beta1 Audit Configs Get
    post:
      tags:
      - Auditor
      summary: Post Config
      operationId: post_config_v1beta1_audit_configs_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuditConfigInput'
        required: true
      responses:
        '201':
          description: Resource created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditConfigOutput'
        '409':
          description: Resource already exists.
        '422':
          description: Validation error.
  /v1beta1/audit/configs/{namespace}/{config_name}:
    get:
      tags:
      - Auditor
      summary: Get Config
      operationId: get_config_v1beta1_audit_configs__namespace___config_name__get
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: config_name
        in: path
        required: true
        schema:
          type: string
          title: Config Name
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditConfigOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      tags:
      - Auditor
      summary: Update Config
      operationId: update_config_v1beta1_audit_configs__namespace___config_name__patch
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: config_name
        in: path
        required: true
        schema:
          type: string
          title: Config Name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuditConfigUpdate'
      responses:
        '200':
          description: Successful config update.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditConfigOutput'
        '404':
          description: Config does not exist.
        '422':
          description: Unable to update config due to validation error while processing
            request.
    delete:
      tags:
      - Auditor
      summary: Delete Config
      operationId: delete_config_v1beta1_audit_configs__namespace___config_name__delete
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: config_name
        in: path
        required: true
        schema:
          type: string
          title: Config Name
      responses:
        '200':
          description: Successful config deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '404':
          description: Config does not exist.
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1beta1/audit/get-plugin-info:
    get:
      tags:
      - Auditor
      summary: Get detailed information about a specific Garak plugin. See https://reference.garak.ai/
        for details
      operationId: get_plugin_info_v1beta1_audit_get_plugin_info_get
      parameters:
      - name: plugin_name
        in: query
        required: true
        schema:
          type: string
          description: The name of the plugin to get information for
          title: Plugin Name
        description: The name of the plugin to get information for
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                title: Response Get Plugin Info V1Beta1 Audit Get Plugin Info Get
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1beta1/audit/info:
    get:
      summary: Info
      operationId: info_v1beta1_audit_info_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  /v1beta1/audit/jobs:
    get:
      tags:
      - Auditor
      summary: List jobs
      operationId: get_jobs_v1beta1_audit_jobs_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AuditJobHandle'
                type: array
                title: Response Get Jobs V1Beta1 Audit Jobs Get
    post:
      tags:
      - Auditor
      summary: Submit job
      operationId: post_run_job_v1beta1_audit_jobs_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuditJob'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditJobHandle'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1beta1/audit/jobs/{job_id}/cancel:
    post:
      tags:
      - Auditor
      summary: Cancel running job
      operationId: cancel_job_v1beta1_audit_jobs__job_id__cancel_post
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditJobStatus'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1beta1/audit/jobs/{job_id}/logs:
    get:
      tags:
      - Auditor
      summary: Get job logs
      operationId: get_jobs_logs_v1beta1_audit_jobs__job_id__logs_get
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                title: Response Get Jobs Logs V1Beta1 Audit Jobs  Job Id  Logs Get
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1beta1/audit/jobs/{job_id}/pause:
    post:
      tags:
      - Auditor
      summary: Pause running job
      operationId: post_pause_job_v1beta1_audit_jobs__job_id__pause_post
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditJobStatus'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1beta1/audit/jobs/{job_id}/results:
    get:
      tags:
      - Auditor
      summary: List and download job result artifacts
      operationId: get_jobs_results_v1beta1_audit_jobs__job_id__results_get
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                title: Response Get Jobs Results V1Beta1 Audit Jobs  Job Id  Results
                  Get
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1beta1/audit/jobs/{job_id}/results/{result_id}/download:
    get:
      tags:
      - Auditor
      summary: Download job result file
      operationId: download_result_v1beta1_audit_jobs__job_id__results__result_id__download_get
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      - name: result_id
        in: path
        required: true
        schema:
          type: string
          title: Result Id
      responses:
        '200':
          description: Result file content
          content:
            application/json:
              schema: {}
            text/html:
              example: <html>Report content</html>
            text/plain:
              example: Log content
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1beta1/audit/jobs/{job_id}/resume:
    post:
      tags:
      - Auditor
      summary: Resume paused job
      operationId: post_resume_job_v1beta1_audit_jobs__job_id__resume_post
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditJobStatus'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1beta1/audit/jobs/{job_id}/status:
    get:
      tags:
      - Auditor
      summary: Get job status
      operationId: get_jobs_status_v1beta1_audit_jobs__job_id__status_get
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditJobStatus'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1beta1/audit/list-plugins:
    get:
      tags:
      - Auditor
      summary: Get supported Garak plugins list, filtered by type. See https://reference.garak.ai/
        for details
      operationId: get_plugins_list_v1beta1_audit_list_plugins_get
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          description: Page number.
          default: 1
          title: Page
        description: Page number.
      - name: page_size
        in: query
        required: false
        schema:
          type: integer
          description: Page size.
          default: 100
          title: Page Size
        description: Page size.
      - name: sort
        in: query
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/AuditPluginSortField'
          description: The field to sort by. To sort in descending order, use `-`
            in front of the field name.
          default: type
        description: The field to sort by. To sort in descending order, use `-` in
          front of the field name.
      - in: query
        name: filter
        style: deepObject
        required: false
        explode: true
        schema:
          $ref: '#/components/schemas/AuditPluginFilter'
        description: '

          Filter results on various criteria.

          '
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditPluginsPage'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1beta1/audit/targets:
    get:
      tags:
      - Auditor
      summary: Get Targets
      operationId: get_targets_v1beta1_audit_targets_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AuditTarget'
                type: array
                title: Response Get Targets V1Beta1 Audit Targets Get
    post:
      tags:
      - Auditor
      summary: Post Target
      operationId: post_target_v1beta1_audit_targets_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuditTarget'
        required: true
      responses:
        '201':
          description: Resource created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditTarget'
        '409':
          description: Resource already exists.
        '422':
          description: Validation error.
  /v1beta1/audit/targets/{namespace}/{target_name}:
    get:
      tags:
      - Auditor
      summary: Get Target
      operationId: get_target_v1beta1_audit_targets__namespace___target_name__get
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: target_name
        in: path
        required: true
        schema:
          type: string
          title: Target Name
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditTarget'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      tags:
      - Auditor
      summary: Update Target
      operationId: update_target_v1beta1_audit_targets__namespace___target_name__patch
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: target_name
        in: path
        required: true
        schema:
          type: string
          title: Target Name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuditTargetUpdate'
      responses:
        '200':
          description: Successful target update.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditTarget'
        '404':
          description: Target does not exist.
        '422':
          description: Unable to update target due to validation error while processing
            request.
    delete:
      tags:
      - Auditor
      summary: Delete Target
      operationId: delete_target_v1beta1_audit_targets__namespace___target_name__delete
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
          title: Namespace
      - name: target_name
        in: path
        required: true
        schema:
          type: string
          title: Target Name
      responses:
        '200':
          description: Successful target deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '404':
          description: Target does not exist.
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1beta1/data-designer/jobs:
    get:
      tags:
      - Data Designer
      summary: List Jobs
      operationId: list_jobs_v1beta1_data_designer_jobs_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DataDesignerJob'
                type: array
                title: Response List Jobs V1Beta1 Data Designer Jobs Get
    post:
      tags:
      - Data Designer
      summary: Create Job
      operationId: create_job_v1beta1_data_designer_jobs_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJobRequest'
        required: true
      responses:
        '201':
          description: Resource Created Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataDesignerJob'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1beta1/data-designer/jobs/{job_id}:
    get:
      tags:
      - Data Designer
      summary: Get Job
      operationId: get_job_v1beta1_data_designer_jobs__job_id__get
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataDesignerJob'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1beta1/data-designer/jobs/{job_id}/logs:
    get:
      tags:
      - Data Designer
      summary: Get Job Logs
      operationId: get_job_logs_v1beta1_data_designer_jobs__job_id__logs_get
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      responses:
        '200':
          description: Successful Response
          content:
            application/jsonl:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1beta1/data-designer/jobs/{job_id}/results:
    get:
      tags:
      - Data Designer
      summary: List Job Results
      operationId: list_job_results_v1beta1_data_designer_jobs__job_id__results_get
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataDesignerResult'
                title: Response List Job Results V1Beta1 Data Designer Jobs  Job Id  Results
                  Get
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1beta1/data-designer/jobs/{job_id}/results/{result_id}:
    get:
      tags:
      - Data Designer
      summary: Get Job Result
      operationId: get_job_result_v1beta1_data_designer_jobs__job_id__results__result_id__get
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      - name: result_id
        in: path
        required: true
        schema:
          type: string
          title: Result Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataDesignerResult'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1beta1/data-designer/jobs/{job_id}/results/{result_id}/download:
    get:
      tags:
      - Data Designer
      summary: Download Job Result
      operationId: download_job_result_v1beta1_data_designer_jobs__job_id__results__result_id__download_get
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      - name: result_id
        in: path
        required: true
        schema:
          type: string
          title: Result Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1beta1/data-designer/preview:
    post:
      tags:
      - Data Designer
      summary: Generate preview Data Designer
      operationId: preview_v1beta1_data_designer_preview_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreviewRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/jsonl:
              schema:
                $ref: '#/components/schemas/Message'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1beta1/jobs:
    post:
      tags:
      - Jobs
      summary: Create Job
      operationId: create_job_v1beta1_jobs_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlatformJobRequest'
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformJob'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    get:
      tags:
      - Jobs
      summary: List Jobs
      operationId: list_jobs_v1beta1_jobs_get
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          exclusiveMinimum: 0
          description: Page number.
          default: 1
          title: Page
        description: Page number.
      - name: page_size
        in: query
        required: false
        schema:
          type: integer
          exclusiveMinimum: 0
          description: Page size.
          default: 10
          title: Page Size
        description: Page size.
      - name: sort
        in: query
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/PlatformJobSortField'
          description: The field to sort by. To sort in decreasing order, use `-`
            in front of the field name.
          default: -created_at
        description: The field to sort by. To sort in decreasing order, use `-` in
          front of the field name.
      - in: query
        name: filter
        style: deepObject
        required: false
        explode: true
        schema:
          $ref: '#/components/schemas/PlatformJobsListFilter'
        description: '

          Filter jobs on various criteria.

          '
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformJobsPage'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1beta1/jobs/{job_id}:
    get:
      tags:
      - Jobs
      summary: Get Job
      operationId: get_job_v1beta1_jobs__job_id__get
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformJob'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
      - Jobs
      summary: Delete Job
      operationId: delete_job_v1beta1_jobs__job_id__delete
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      responses:
        '204':
          description: Successful Response
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1beta1/jobs/{job_id}/logs:
    get:
      tags:
      - Jobs
      summary: Page Job Logs
      operationId: page_job_logs_v1beta1_jobs__job_id__logs_get
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          exclusiveMinimum: 0
          description: Maximum number of logs to return
          default: 100
          title: Limit
        description: Maximum number of logs to return
      - name: page_cursor
        in: query
        required: false
        schema:
          type: string
          description: Page cursor
          title: Page Cursor
        description: Page cursor
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformJobLogPage'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1beta1/jobs/{job_id}/results:
    get:
      tags:
      - Jobs
      summary: List Job Results
      operationId: list_job_results_v1beta1_jobs__job_id__results_get
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      - name: page
        in: query
        required: false
        schema:
          type: integer
          exclusiveMinimum: 0
          description: Page number.
          default: 1
          title: Page
        description: Page number.
      - name: page_size
        in: query
        required: false
        schema:
          type: integer
          exclusiveMinimum: 0
          description: Page size.
          default: 10
          title: Page Size
        description: Page size.
      - name: sort
        in: query
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/PlatformJobResultSortField'
          description: The field to sort by. To sort in decreasing order, use `-`
            in front of the field name.
          default: -created_at
        description: The field to sort by. To sort in decreasing order, use `-` in
          front of the field name.
      - in: query
        name: filter
        style: deepObject
        required: false
        explode: true
        schema:
          $ref: '#/components/schemas/PlatformJobResultListFilter'
        description: '

          Filter job results on various criteria.

          '
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformJobResultsPage'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1beta1/jobs/{job_id}/results/{result_id}:
    get:
      tags:
      - Jobs
      summary: Get Job Result
      operationId: get_job_result_v1beta1_jobs__job_id__results__result_id__get
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      - name: result_id
        in: path
        required: true
        schema:
          type: string
          title: Result Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformJobResult'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1beta1/jobs/{job_id}/results/{result_id}/download:
    get:
      tags:
      - Jobs
      summary: Download Job Result
      operationId: download_job_result_v1beta1_jobs__job_id__results__result_id__download_get
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      - name: result_id
        in: path
        required: true
        schema:
          type: string
          title: Result Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1beta1/jobs/{job_id}/status:
    patch:
      tags:
      - Jobs
      summary: Update Job Status
      operationId: update_job_status_v1beta1_jobs__job_id__status_patch
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlatformJobStatusUpdateRequest'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformJob'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /v1beta1/jobs/{job_id}/stream:
    get:
      tags:
      - Jobs
      summary: Stream Job Logs
      operationId: stream_job_logs_v1beta1_jobs__job_id__stream_get
      parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          title: Job Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
components:
  schemas:
    APIEndpointData:
      properties:
        url:
          type: string
          minLength: 1
          format: uri
          title: Url
          description: The API endpoint URL.
        model_id:
          type: string
          title: Model Id
          description: The id of the model. How this is used depends on the API endpoint
            format.
        api_key:
          type: string
          title: API Key
          description: The API key that should be used to access the endpoint.
        format:
          allOf:
          - $ref: '#/components/schemas/APIEndpointFormat'
          description: The format for the API endpoint, e.g., NVIDIA NIM, OpenAI,
            Llama-Stack.
          default: nim
      type: object
      required:
      - url
      - model_id
      title: APIEndpointData
      description: Data about an API endpoint.
    APIEndpointFormat:
      type: string
      enum:
      - nim
      - openai
      - lama_stack
      title: APIEndpointFormat
      description: 'API endpoint format.


        The format dictates the structure of the request and response.


        ## Values

        - `"nim"` - NVIDIA NIM format

        - `"openai"` - OpenAI format

        - `"lama_stack"` - Llama Stack format'
    ActionRails:
      properties:
        instant_actions:
          type: array
          items:
            type: string
          title: Instant Actions
          description: The names of all actions which should finish instantly.
      type: object
      title: ActionRails
      description: 'Configuration of action rails.


        Action rails control various options related to the execution of actions.

        Currently, only


        In the future multiple options will be added, e.g., what input validation
        should be

        performed per action, output validation, throttling, disabling, etc.'
    ActivatedRail:
      properties:
        type:
          type: string
          title: Type
          description: The type of the rail that was activated, e.g., input, output,
            dialog.
        name:
          type: string
          title: Name
          description: The name of the rail, i.e., the name of the flow implementing
            the rail.
        decisions:
          items:
            type: string
          type: array
          title: Decisions
          description: A sequence of decisions made by the rail, e.g., 'bot refuse
            to respond', 'stop', 'continue'.
        executed_actions:
          items:
            $ref: '#/components/schemas/ExecutedAction'
          type: array
          title: Executed Actions
          description: The list of actions executed by the rail.
        stop:
          type: boolean
          title: Stop
          description: Whether the rail decided to stop any further processing.
          default: false
        additional_info:
          type: object
          title: Additional Info
          description: Additional information coming from rail.
        started_at:
          type: number
          title: Started At
          description: Timestamp for when the rail started.
        finished_at:
          type: number
          title: Finished At
          description: Timestamp for when the rail finished.
        duration:
          type: number
          title: Duration
          description: The duration in seconds for applying the rail. Some rails are
            applied instantly, e.g., dialog rails, so they don't have a duration.
      type: object
      required:
      - type
      - name
      title: ActivatedRail
      description: A rail that was activated during the generation.
    ApiEndpoint:
      properties:
        url:
          type: string
          title: URL
        model_id:
          type: string
          title: Model ID
        api_key:
          type: string
          title: API Key
        provider_type:
          type: string
          title: Provider Type
          default: openai
      type: object
      required:
      - url
      - model_id
      title: ApiEndpoint
    ArtifactStatus:
      type: string
      enum:
      - created
      - upload_failed
      - upload_completed
      title: ArtifactStatus
      description: 'Model artifact status.


        ## Values

        - `"created"` - Artifact has been created

        - `"upload_failed"` - Artifact upload has failed

        - `"upload_completed"` - Artifact upload has completed successfully'
    ArtifactStatusDE:
      type: string
      enum:
      - created
      - upload_failed
      - upload_completed
      title: ArtifactStatusDE
      description: The status of the model artifact.
    AuditClassConfig:
      type: object
      title: AuditClassConfig
      examples:
      - InjectAscii85:
          payloads:
          - default
    AuditConfigInput:
      properties:
        schema_version:
          type: string
          title: Schema Version
          description: The version of the schema for the object. Internal use only.
          default: '1.0'
        id:
          type: string
          title: Id
          description: The ID of the entity. With the exception of namespaces, this
            is always a semantically-prefixed base58-encoded uuid4 [<prefix>-base58(uuid4())].
        description:
          type: string
          title: Description
          description: The description of the entity.
        type_prefix:
          type: string
          title: Type Prefix
          description: The type prefix of the entity ID. If not specified, it will
            be inferred from the entity type name, but this will likely result in
            long prefixes.
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: Timestamp for when the entity was created.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: Timestamp for when the entity was last updated.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
        name:
          type: string
          maxLength: 255
          pattern: ^[\w\-\+.@:]*$
          title: Name
          description: The name of the entity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
          default: ''
        system:
          allOf:
          - $ref: '#/components/schemas/AuditSystemData'
          default:
            verbose: 0
            narrow_output: false
            parallel_requests: false
            parallel_attempts: false
            lite: true
            show_z: false
            enable_experimental: false
        run:
          allOf:
          - $ref: '#/components/schemas/AuditRunData'
          default:
            deprefix: true
            eval_threshold: 0.5
            generations: 5
            user_agent: garak/{version} (LLM vulnerability scanner https://garak.ai)
        plugins:
          allOf:
          - $ref: '#/components/schemas/AuditPluginsDataInput'
          default:
            probe_spec: all
            detector_spec: auto
            extended_detectors: false
            buffs_include_original_prompt: false
            detectors: {}
            generators: {}
            buffs: {}
            harnesses: {}
            probes: {}
        reporting:
          allOf:
          - $ref: '#/components/schemas/AuditReportData'
          default:
            report_prefix: run1
            report_dir: garak_runs
            show_100_pass_modules: true
      type: object
      title: AuditConfigInput
      examples:
      - name: minimal
        namespace: default
        plugins:
          buffs: {}
          buffs_include_original_prompt: false
          detector_spec: auto
          detectors: {}
          extended_detectors: false
          generators: {}
          harnesses: {}
          probe_spec: all
          probes:
            encoding:
              payloads:
              - default
        reporting:
          report_dir: garak_runs
          report_prefix: run1
          show_100_pass_modules: true
        run:
          deprefix: true
          eval_threshold: 0.5
          generations: 5
          seed: 42
          user_agent: garak/{version} (LLM vulnerability scanner https://garak.ai)
        system:
          enable_experimental: false
          lite: true
          narrow_output: false
          parallel_attempts: false
          parallel_requests: false
          show_z: false
          verbose: 0
      - name: minimal
        namespace: default
        plugins:
          probe_spec: dan.Dan_11_0
        reporting:
          extended_detectors: false
        run:
          generations: 7
        system:
          lite: true
          parallel_attempts: 20
    AuditConfigOutput:
      properties:
        schema_version:
          type: string
          title: Schema Version
          description: The version of the schema for the object. Internal use only.
          default: '1.0'
        id:
          type: string
          title: Id
          description: The ID of the entity. With the exception of namespaces, this
            is always a semantically-prefixed base58-encoded uuid4 [<prefix>-base58(uuid4())].
        description:
          type: string
          title: Description
          description: The description of the entity.
        type_prefix:
          type: string
          title: Type Prefix
          description: The type prefix of the entity ID. If not specified, it will
            be inferred from the entity type name, but this will likely result in
            long prefixes.
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: Timestamp for when the entity was created.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: Timestamp for when the entity was last updated.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
        name:
          type: string
          maxLength: 255
          pattern: ^[\w\-\+.@:]*$
          title: Name
          description: The name of the entity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
          default: ''
        system:
          allOf:
          - $ref: '#/components/schemas/AuditSystemData'
          default:
            verbose: 0
            narrow_output: false
            parallel_requests: false
            parallel_attempts: false
            lite: true
            show_z: false
            enable_experimental: false
        run:
          allOf:
          - $ref: '#/components/schemas/AuditRunData'
          default:
            deprefix: true
            eval_threshold: 0.5
            generations: 5
            user_agent: garak/{version} (LLM vulnerability scanner https://garak.ai)
        plugins:
          allOf:
          - $ref: '#/components/schemas/AuditPluginsDataOutput'
          default:
            probe_spec: all
            detector_spec: auto
            extended_detectors: false
            buffs_include_original_prompt: false
            detectors: {}
            generators: {}
            buffs: {}
            harnesses: {}
            probes: {}
        reporting:
          allOf:
          - $ref: '#/components/schemas/AuditReportData'
          default:
            report_prefix: run1
            report_dir: garak_runs
            show_100_pass_modules: true
      type: object
      title: AuditConfigOutput
      examples:
      - name: minimal
        namespace: default
        plugins:
          buffs: {}
          buffs_include_original_prompt: false
          detector_spec: auto
          detectors: {}
          extended_detectors: false
          generators: {}
          harnesses: {}
          probe_spec: all
          probes:
            encoding:
              payloads:
              - default
        reporting:
          report_dir: garak_runs
          report_prefix: run1
          show_100_pass_modules: true
        run:
          deprefix: true
          eval_threshold: 0.5
          generations: 5
          seed: 42
          user_agent: garak/{version} (LLM vulnerability scanner https://garak.ai)
        system:
          enable_experimental: false
          lite: true
          narrow_output: false
          parallel_attempts: false
          parallel_requests: false
          show_z: false
          verbose: 0
      - name: minimal
        namespace: default
        plugins:
          probe_spec: dan.Dan_11_0
        reporting:
          extended_detectors: false
        run:
          generations: 7
        system:
          lite: true
          parallel_attempts: 20
    AuditConfigUpdate:
      properties:
        system:
          allOf:
          - $ref: '#/components/schemas/AuditSystemData'
          default:
            verbose: 0
            narrow_output: false
            parallel_requests: false
            parallel_attempts: false
            lite: true
            show_z: false
            enable_experimental: false
        run:
          allOf:
          - $ref: '#/components/schemas/AuditRunData'
          default:
            deprefix: true
            eval_threshold: 0.5
            generations: 5
            user_agent: garak/{version} (LLM vulnerability scanner https://garak.ai)
        plugins:
          allOf:
          - $ref: '#/components/schemas/AuditPluginsDataInput'
          default:
            probe_spec: all
            detector_spec: auto
            extended_detectors: false
            buffs_include_original_prompt: false
            detectors: {}
            generators: {}
            buffs: {}
            harnesses: {}
            probes: {}
        reporting:
          allOf:
          - $ref: '#/components/schemas/AuditReportData'
          default:
            report_prefix: run1
            report_dir: garak_runs
            show_100_pass_modules: true
        schema_version:
          type: string
          title: Schema Version
          description: The version of the schema for the object. Internal use only.
          default: '1.0'
        description:
          type: string
          title: Description
          description: The description of the entity.
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      title: AuditConfigUpdate
    AuditJob:
      properties:
        schema_version:
          type: string
          title: Schema Version
          description: The version of the schema for the object. Internal use only.
          default: '1.0'
        id:
          type: string
          title: Id
          description: The ID of the entity. With the exception of namespaces, this
            is always a semantically-prefixed base58-encoded uuid4 [<prefix>-base58(uuid4())].
        description:
          type: string
          title: Description
          description: The description of the entity.
        type_prefix:
          type: string
          title: Type Prefix
          description: The type prefix of the entity ID. If not specified, it will
            be inferred from the entity type name, but this will likely result in
            long prefixes.
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: Timestamp for when the entity was created.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: Timestamp for when the entity was last updated.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
        config:
          anyOf:
          - type: string
            title: Reference
            description: A reference to AuditConfig.
          - $ref: '#/components/schemas/AuditConfigInput'
          title: Config
        target:
          anyOf:
          - type: string
            title: Reference
            description: A reference to AuditTarget.
          - $ref: '#/components/schemas/AuditTarget'
          title: Target
      type: object
      required:
      - config
      - target
      title: AuditJob
      examples:
      - config_name: minimal
        namespace: default
        target_name: nim-mistral-7b
    AuditJobHandle:
      properties:
        id:
          type: string
          title: Id
      type: object
      required:
      - id
      title: AuditJobHandle
      examples:
      - id: audit-1234567890
    AuditJobStatus:
      properties:
        status:
          type: string
          title: Status
      type: object
      required:
      - status
      title: AuditJobStatus
      examples:
      - status: PENDING
    AuditModuleConfig:
      additionalProperties:
        $ref: '#/components/schemas/AuditClassConfig'
      type: object
      title: AuditModuleConfig
      examples:
      - encoding:
          InjectAscii85:
            payloads:
            - default
    AuditPlugin:
      properties:
        type:
          type: string
          title: Type
        name:
          type: string
          title: Name
      type: object
      required:
      - type
      - name
      title: AuditPlugin
    AuditPluginFilter:
      properties:
        type:
          type: string
          title: Type
      type: object
      title: AuditPluginFilter
    AuditPluginSortField:
      type: string
      enum:
      - type
      - -type
      - name
      - -name
      title: AuditPluginSortField
    AuditPluginsDataInput:
      properties:
        model_type:
          type: string
          title: Model Type
        model_name:
          type: string
          title: Model Name
        probe_spec:
          type: string
          title: Probe Spec
          default: all
        detector_spec:
          type: string
          title: Detector Spec
          default: auto
        extended_detectors:
          type: boolean
          title: Extended Detectors
          default: false
        buff_spec:
          type: string
          title: Buff Spec
        buffs_include_original_prompt:
          type: boolean
          title: Buffs Include Original Prompt
          default: false
        buff_max:
          type: string
          title: Buff Max
        detectors:
          additionalProperties:
            anyOf:
            - $ref: '#/components/schemas/AuditModuleConfig'
            - $ref: '#/components/schemas/AuditClassConfig'
          type: object
          title: Detectors
        generators:
          additionalProperties:
            anyOf:
            - $ref: '#/components/schemas/AuditModuleConfig'
            - $ref: '#/components/schemas/AuditClassConfig'
          type: object
          title: Generators
        buffs:
          additionalProperties:
            anyOf:
            - $ref: '#/components/schemas/AuditModuleConfig'
            - $ref: '#/components/schemas/AuditClassConfig'
          type: object
          title: Buffs
        harnesses:
          additionalProperties:
            anyOf:
            - $ref: '#/components/schemas/AuditModuleConfig'
            - $ref: '#/components/schemas/AuditClassConfig'
          type: object
          title: Harnesses
        probes:
          additionalProperties:
            anyOf:
            - $ref: '#/components/schemas/AuditModuleConfig'
            - $ref: '#/components/schemas/AuditClassConfig'
          type: object
          title: Probes
      type: object
      title: AuditPluginsDataInput
      examples:
      - buffs: {}
        buffs_include_original_prompt: false
        detector_spec: auto
        detectors: {}
        extended_detectors: false
        generators: {}
        harnesses: {}
        probe_spec: all
        probes:
          encoding:
            payloads:
            - default
    AuditPluginsDataOutput:
      properties:
        model_type:
          type: string
          title: Model Type
        model_name:
          type: string
          title: Model Name
        probe_spec:
          type: string
          title: Probe Spec
          default: all
        detector_spec:
          type: string
          title: Detector Spec
          default: auto
        extended_detectors:
          type: boolean
          title: Extended Detectors
          default: false
        buff_spec:
          type: string
          title: Buff Spec
        buffs_include_original_prompt:
          type: boolean
          title: Buffs Include Original Prompt
          default: false
        buff_max:
          type: string
          title: Buff Max
        detectors:
          additionalProperties:
            anyOf:
            - $ref: '#/components/schemas/AuditModuleConfig'
            - $ref: '#/components/schemas/AuditClassConfig'
          type: object
          title: Detectors
        generators:
          additionalProperties:
            anyOf:
            - $ref: '#/components/schemas/AuditModuleConfig'
            - $ref: '#/components/schemas/AuditClassConfig'
          type: object
          title: Generators
        buffs:
          additionalProperties:
            anyOf:
            - $ref: '#/components/schemas/AuditModuleConfig'
            - $ref: '#/components/schemas/AuditClassConfig'
          type: object
          title: Buffs
        harnesses:
          additionalProperties:
            anyOf:
            - $ref: '#/components/schemas/AuditModuleConfig'
            - $ref: '#/components/schemas/AuditClassConfig'
          type: object
          title: Harnesses
        probes:
          additionalProperties:
            anyOf:
            - $ref: '#/components/schemas/AuditModuleConfig'
            - $ref: '#/components/schemas/AuditClassConfig'
          type: object
          title: Probes
      type: object
      title: AuditPluginsDataOutput
      examples:
      - buffs: {}
        buffs_include_original_prompt: false
        detector_spec: auto
        detectors: {}
        extended_detectors: false
        generators: {}
        harnesses: {}
        probe_spec: all
        probes:
          encoding:
            payloads:
            - default
    AuditPluginsPage:
      properties:
        object:
          type: string
          title: Object
          description: The type of object being returned.
          default: list
        data:
          items:
            $ref: '#/components/schemas/AuditPlugin'
          type: array
          title: Data
        pagination:
          allOf:
          - $ref: '#/components/schemas/PaginationData'
          description: Pagination information.
        sort:
          type: string
          title: Sort
          description: The field on which the results are sorted.
        filter:
          allOf:
          - $ref: '#/components/schemas/AuditPluginFilter'
          description: Filtering information.
      type: object
      required:
      - data
      title: AuditPluginsPage
    AuditReportData:
      properties:
        report_prefix:
          type: string
          title: Report Prefix
          default: run1
        taxonomy:
          type: string
          title: Taxonomy
        report_dir:
          type: string
          title: Report Dir
          default: garak_runs
        show_100_pass_modules:
          type: boolean
          title: Show 100 Pass Modules
          default: true
      type: object
      title: AuditReportData
      examples:
      - report_dir: garak_runs
        report_prefix: run1
        show_100_pass_modules: true
    AuditRunData:
      properties:
        seed:
          type: integer
          title: Seed
        deprefix:
          type: boolean
          title: Deprefix
          description: Remove the prompt from the start of the output (some models
            return the prompt as part of their output)
          default: true
        eval_threshold:
          type: number
          maximum: 1.0
          minimum: 0.0
          title: Eval Threshold
          description: Threshold for categorizing a detector output as a successful
            attack/hit
          default: 0.5
        generations:
          type: integer
          minimum: 1.0
          title: Generations
          description: How many times to send each prompt for inference
          default: 5
        probe_tags:
          type: string
          title: Probe Tags
        user_agent:
          type: string
          title: User Agent
          default: garak/{version} (LLM vulnerability scanner https://garak.ai)
      type: object
      title: AuditRunData
      examples:
      - deprefix: true
        eval_threshold: 0.5
        generations: 5
        seed: 42
        user_agent: garak/{version} (LLM vulnerability scanner https://garak.ai)
    AuditSystemData:
      properties:
        verbose:
          type: integer
          maximum: 1.0
          minimum: 0.0
          title: Verbose
          description: Degree of verbosity (values above 0 are experimental, the report
            & log are authoritative)
          default: 0
        narrow_output:
          type: boolean
          title: Narrow Output
          default: false
        parallel_requests:
          type: boolean
          title: Parallel Requests
          default: false
        parallel_attempts:
          anyOf:
          - type: boolean
          - type: integer
          title: Parallel Attempts
          default: false
        lite:
          type: boolean
          title: Lite
          default: true
        show_z:
          type: boolean
          title: Show Z
          default: false
        enable_experimental:
          type: boolean
          title: Enable Experimental
          default: false
      type: object
      title: AuditSystemData
      examples:
      - enable_experimental: false
        lite: true
        narrow_output: false
        parallel_attempts: false
        parallel_requests: false
        show_z: false
        verbose: 0
    AuditTarget:
      properties:
        schema_version:
          type: string
          title: Schema Version
          description: The version of the schema for the object. Internal use only.
          default: '1.0'
        id:
          type: string
          title: Id
          description: The ID of the entity. With the exception of namespaces, this
            is always a semantically-prefixed base58-encoded uuid4 [<prefix>-base58(uuid4())].
        description:
          type: string
          title: Description
          description: The description of the entity.
        type_prefix:
          type: string
          title: Type Prefix
          description: The type prefix of the entity ID. If not specified, it will
            be inferred from the entity type name, but this will likely result in
            long prefixes.
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: Timestamp for when the entity was created.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: Timestamp for when the entity was last updated.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
        name:
          type: string
          maxLength: 255
          pattern: ^[\w\-\+.@:]*$
          title: Name
          description: The name of the entity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
          default: ''
        type:
          type: string
          title: Type
        model:
          type: string
          title: Model
        options:
          type: object
          title: Options
      type: object
      required:
      - type
      - model
      title: AuditTarget
      examples:
      - model: nvdev/mistralai/mistral-7b-instruct-v0.3
        name: nim-mistral-7b
        namespace: default
        options: {}
        type: nim
    AuditTargetUpdate:
      properties:
        type:
          type: string
          title: Type
        model:
          type: string
          title: Model
        options:
          type: object
          title: Options
        schema_version:
          type: string
          title: Schema Version
          description: The version of the schema for the object. Internal use only.
          default: '1.0'
        description:
          type: string
          title: Description
          description: The description of the entity.
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      title: AuditTargetUpdate
    AutoAlignOptions:
      properties:
        guardrails_config:
          type: object
          title: Guardrails Config
          description: The guardrails configuration that is passed to the AutoAlign
            endpoint
      type: object
      title: AutoAlignOptions
      description: List of guardrails that are activated
    AutoAlignRailConfig:
      properties:
        parameters:
          type: object
          title: Parameters
        input:
          allOf:
          - $ref: '#/components/schemas/AutoAlignOptions'
          description: Input configuration for AutoAlign guardrails
        output:
          allOf:
          - $ref: '#/components/schemas/AutoAlignOptions'
          description: Output configuration for AutoAlign guardrails
      type: object
      title: AutoAlignRailConfig
      description: Configuration data for the AutoAlign API
    BackendEngineType:
      type: string
      enum:
      - nemo
      - trt_llm
      - vllm
      - faster_transformer
      - hugging_face
      title: BackendEngineType
      description: 'Type of backend engine.


        ## Values

        - `"nemo"` - NeMo framework engine

        - `"trt_llm"` - TensorRT-LLM engine

        - `"vllm"` - vLLM engine

        - `"faster_transformer"` - Faster Transformer engine

        - `"hugging_face"` - Hugging Face engine'
    BackendEngineTypeDE:
      type: string
      enum:
      - nemo
      - trt_llm
      - vllm
      - faster_transformer
      - hugging_face
      title: BackendEngineTypeDE
      description: Types of backend engine.
    BaseModelFilter:
      properties:
        name:
          type: string
          title: Name
          description: Filter by name of the base model.
      type: object
      title: BaseModelFilter
    BernoulliMixtureSamplerParams:
      properties:
        p:
          type: number
          maximum: 1.0
          minimum: 0.0
          title: P
          description: Bernoulli distribution probability of success.
        dist_name:
          type: string
          title: Dist Name
          description: Mixture distribution name. Samples will be equal to the distribution
            sample with probability `p`, otherwise equal to 0. Must be a valid scipy.stats
            distribution name.
        dist_params:
          type: object
          title: Dist Params
          description: Parameters of the scipy.stats distribution given in `dist_name`.
      type: object
      required:
      - p
      - dist_name
      - dist_params
      title: BernoulliMixtureSamplerParams
    BernoulliSamplerParams:
      properties:
        p:
          type: number
          maximum: 1.0
          minimum: 0.0
          title: P
          description: Probability of success.
      type: object
      required:
      - p
      title: BernoulliSamplerParams
    BinomialSamplerParams:
      properties:
        n:
          type: integer
          title: N
          description: Number of trials.
        p:
          type: number
          maximum: 1.0
          minimum: 0.0
          title: P
          description: Probability of success on each trial.
      type: object
      required:
      - n
      - p
      title: BinomialSamplerParams
    CPUExecutionProvider:
      properties:
        provider:
          type: string
          const: cpu
          title: Provider
          default: cpu
        profile:
          type: string
          title: Profile
          default: default
        container:
          $ref: '#/components/schemas/ContainerSpec'
        vcpu_count:
          type: integer
          title: Vcpu Count
        memory_gb:
          type: integer
          title: Memory Gb
      type: object
      required:
      - container
      title: CPUExecutionProvider
      description: 'CPU-based execution provider.


        Provides configuration for running jobs on CPU resources with optional

        resource limits for virtual CPU count and memory allocation.'
    CachedOutputsData:
      properties:
        files_url:
          type: string
          minLength: 1
          format: uri
          title: Files Url
          description: The files URL of the cached outputs.
      type: object
      required:
      - files_url
      title: CachedOutputsData
      description: An evaluation target which contains cached outputs.
    CategorySamplerParams:
      properties:
        values:
          items:
            anyOf:
            - type: string
            - type: integer
            - type: number
          type: array
          minItems: 1
          title: Values
          description: List of possible categorical values that can be sampled from.
        weights:
          type: array
          items:
            type: number
          title: Weights
          description: List of unnormalized probability weights to assigned to each
            value, in order. Larger values will be sampled with higher probability.
      type: object
      required:
      - values
      title: CategorySamplerParams
    ChatCompletionAssistantMessageParam:
      properties:
        role:
          type: string
          const: assistant
          title: Role
          description: The role of the messages author, in this case `assistant`.
        content:
          type: string
          title: Content
          description: The contents of the assistant message.
        function_call:
          allOf:
          - $ref: '#/components/schemas/FunctionCall'
          description: Deprecated and replaced by `tool_calls`.
        name:
          type: string
          title: Name
          description: An optional name for the participant.
        tool_calls:
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionMessageToolCallParam'
          title: Tool Calls
          description: The tool calls generated by the model, such as function calls.
      additionalProperties: false
      type: object
      required:
      - role
      title: ChatCompletionAssistantMessageParam
    ChatCompletionContentPartImageParam:
      properties:
        image_url:
          allOf:
          - $ref: '#/components/schemas/ImageURL'
          description: The image URL information.
        type:
          type: string
          const: image_url
          title: Type
          description: The type of the content part.
      additionalProperties: false
      type: object
      required:
      - image_url
      - type
      title: ChatCompletionContentPartImageParam
    ChatCompletionContentPartTextParam:
      properties:
        text:
          type: string
          title: Text
          description: The text content.
        type:
          type: string
          const: text
          title: Type
          description: The type of the content part.
      additionalProperties: false
      type: object
      required:
      - text
      - type
      title: ChatCompletionContentPartTextParam
    ChatCompletionFunctionMessageParam:
      properties:
        content:
          type: string
          title: Content
          description: The contents of the function message.
        name:
          type: string
          title: Name
          description: The name of the function to call.
        role:
          type: string
          const: function
          title: Role
          description: The role of the messages author, in this case `function`.
      additionalProperties: false
      type: object
      required:
      - content
      - name
      - role
      title: ChatCompletionFunctionMessageParam
    ChatCompletionMessage:
      properties:
        content:
          type: string
          title: Content
          description: The contents of the message.
        role:
          type: string
          title: Role
          description: The role of the author of this message.
          default: assistant
        function_call:
          allOf:
          - $ref: '#/components/schemas/FunctionCall'
          description: Deprecated and replaced by `tool_calls`. The name and arguments
            of a function that should be called, as generated by the model.
        tool_calls:
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionMessageToolCall'
          title: Tool Calls
          description: The tool calls generated by the model, such as function calls.
      type: object
      title: ChatCompletionMessage
    ChatCompletionMessageToolCall:
      properties:
        id:
          type: string
          title: Id
          description: The ID of the tool call.
        function:
          allOf:
          - $ref: '#/components/schemas/Function'
          description: The function that the model called.
        type:
          type: string
          const: function
          title: Type
          description: The type of the tool. Currently, only `function` is supported.
      type: object
      required:
      - id
      - function
      - type
      title: ChatCompletionMessageToolCall
    ChatCompletionMessageToolCallParam:
      properties:
        id:
          type: string
          title: Id
          description: The ID of the tool call.
        function:
          allOf:
          - $ref: '#/components/schemas/Function'
          description: The function that the model called.
        type:
          type: string
          const: function
          title: Type
          description: The type of the tool. Currently, only `function` is supported.
      additionalProperties: false
      type: object
      required:
      - id
      - function
      - type
      title: ChatCompletionMessageToolCallParam
    ChatCompletionRequest:
      properties:
        model:
          type: string
          title: Model
          description: The model to use for completion. Must be one of the available
            models.
        response_format:
          type: object
          additionalProperties:
            type: string
          title: Response Format
          description: Format of the response, can be 'json_object' to force the model
            to output valid JSON.
        system_fingerprint:
          type: string
          title: System Fingerprint
          description: Represents the backend configuration that the model runs with.
            Used with seed for determinism.
        max_tokens:
          type: integer
          title: Max Tokens
          description: The maximum number of tokens that can be generated in the chat
            completion.
        n:
          type: integer
          title: N
          description: How many chat completion choices to generate for each input
            message.
        stream:
          type: boolean
          title: Stream
          description: If set, partial message deltas will be sent, like in ChatGPT.
          default: false
        temperature:
          type: number
          title: Temperature
          description: What sampling temperature to use, between 0 and 2.
        top_p:
          type: number
          title: Top P
          description: An alternative to sampling with temperature, called nucleus
            sampling.
        stop:
          anyOf:
          - type: string
          - items:
              type: string
            type: array
          title: Stop
          description: Up to 4 sequences where the API will stop generating further
            tokens.
        frequency_penalty:
          type: number
          title: Frequency Penalty
          description: Positive values penalize new tokens based on their existing
            frequency in the text.
        presence_penalty:
          type: number
          title: Presence Penalty
          description: Positive values penalize new tokens based on whether they appear
            in the text so far.
        function_call:
          anyOf:
          - type: string
          - type: object
          title: Function Call
          description: 'Not Supported. Deprecated in favor of tool_choice. ''none''
            means the model will not call a function and instead generates a message.
            ''auto'' means the model can pick between generating a message or calling
            a function. Specifying a particular function via {''name'': ''my_function''}
            forces the model to call that function.'
        best_of:
          type: integer
          title: Best Of
          description: Not supported. Generates best_of completions server-side and
            returns the "best" (the one with the highest log probability per token).
            Results cannot be streamed. When used with n, best_of controls the number
            of candidate completions and n specifies how many to return - best_of
            must be greater than n.
        echo:
          type: boolean
          title: Echo
          description: Not supported. If `echo` is true, the response will include
            the prompt and optionally its tokens ids and logprobs.
        suffix:
          type: string
          title: Suffix
          description: Not supported. If echo is set, the prompt is returned with
            the completion.
        seed:
          type: integer
          title: Seed
          description: If specified, attempts to sample deterministically.
        logit_bias:
          type: object
          additionalProperties:
            type: number
          title: Logit Bias
          description: Not Supported. Modify the likelihood of specified tokens appearing
            in the completion.
        top_logprobs:
          type: integer
          title: Top Logprobs
          description: The number of most likely tokens to return at each token position.
        logprobs:
          type: boolean
          title: Logprobs
          description: Whether to return log probabilities of the output tokens or
            not. If true, returns the log probabilities of each output token returned
            in the content of message
        tool_choice:
          anyOf:
          - type: string
          - type: object
          title: Tool Choice
          description: Not Supported. Favored over function_call. Controls which (if
            any) function is called by the model.
        user:
          type: string
          title: User
          description: Not Supported. A unique identifier representing your end-user.
        tools:
          type: array
          items:
            type: string
          title: Tools
          description: A list of tools the model may call.
        ignore_eos:
          type: boolean
          title: Ignore Eos
          description: Ignore the eos when running
        messages:
          items:
            anyOf:
            - $ref: '#/components/schemas/ChatCompletionSystemMessageParam'
            - $ref: '#/components/schemas/ChatCompletionUserMessageParam'
            - $ref: '#/components/schemas/ChatCompletionAssistantMessageParam'
            - $ref: '#/components/schemas/ChatCompletionToolMessageParam'
            - $ref: '#/components/schemas/ChatCompletionFunctionMessageParam'
          type: array
          title: Messages
          description: A list of messages comprising the conversation so far
        vision:
          type: boolean
          title: Vision
          description: Whether this is a vision-capable request with image inputs.
      type: object
      required:
      - model
      - messages
      title: ChatCompletionRequest
    ChatCompletionResponse:
      properties:
        id:
          type: string
          title: Id
        object:
          type: string
          title: Object
          default: chat.completion
        created:
          type: integer
          title: Created
        model:
          type: string
          title: Model
        choices:
          items:
            $ref: '#/components/schemas/ChatCompletionResponseChoice'
          type: array
          title: Choices
        usage:
          $ref: '#/components/schemas/UsageInfo'
        system_fingerprint:
          type: string
          title: System Fingerprint
          description: Represents the backend configuration that the model runs with.
            Used with seed for determinism.
      type: object
      required:
      - model
      - choices
      - usage
      title: ChatCompletionResponse
    ChatCompletionResponseChoice:
      properties:
        index:
          type: integer
          title: Index
          description: The index of the choice in the list of choices.
        finish_reason:
          type: string
          title: Finish Reason
          description: The reasons why the conversation ended.
        logprobs:
          allOf:
          - $ref: '#/components/schemas/ChoiceLogprobs'
          description: The log probabilities of the output tokens. Only returned when
            logprobs=true is provided to the request.
        message:
          allOf:
          - $ref: '#/components/schemas/ChatCompletionMessage'
          description: A chat completion message generated by the model.
      type: object
      required:
      - index
      - message
      title: ChatCompletionResponseChoice
    ChatCompletionResponseStreamChoice:
      properties:
        index:
          type: integer
          title: Index
        delta:
          $ref: '#/components/schemas/DeltaMessage'
        finish_reason:
          type: string
          title: Finish Reason
        logprobs:
          allOf:
          - $ref: '#/components/schemas/ChoiceLogprobs'
          description: Log probability information for the choice. Only returned when
            logprobs=true is provided to the request.
      type: object
      required:
      - index
      - delta
      title: ChatCompletionResponseStreamChoice
    ChatCompletionStreamResponse:
      properties:
        id:
          type: string
          title: Id
        object:
          type: string
          title: Object
          default: chat.completion.chunk
        created:
          type: integer
          title: Created
        model:
          type: string
          title: Model
        choices:
          items:
            $ref: '#/components/schemas/ChatCompletionResponseStreamChoice'
          type: array
          title: Choices
        system_fingerprint:
          type: string
          title: System Fingerprint
          description: Represents the backend configuration that the model runs with.
            Used with seed for determinism.
      type: object
      required:
      - model
      - choices
      title: ChatCompletionStreamResponse
    ChatCompletionSystemMessageParam:
      properties:
        content:
          type: string
          title: Content
          description: The contents of the system message.
        role:
          type: string
          const: system
          title: Role
          description: The role of the messages author, in this case `system`.
        name:
          type: string
          title: Name
          description: An optional name for the participant.
      additionalProperties: false
      type: object
      required:
      - content
      - role
      title: ChatCompletionSystemMessageParam
    ChatCompletionTokenLogprob:
      properties:
        token:
          type: string
          title: Token
          description: The token.
        bytes:
          type: array
          items:
            type: integer
          title: Bytes
          description: UTF-8 bytes representation of the token.
        logprob:
          type: number
          title: Logprob
          description: The log probability of this token.
        top_logprobs:
          items:
            $ref: '#/components/schemas/TopLogprob'
          type: array
          title: Top Logprobs
          description: List of the most likely tokens and their log probability at
            this position.
      type: object
      required:
      - token
      - logprob
      title: ChatCompletionTokenLogprob
      description: Log probability information for a single token in chat completions.
    ChatCompletionToolMessageParam:
      properties:
        content:
          type: string
          title: Content
          description: The contents of the tool message.
        role:
          type: string
          const: tool
          title: Role
          description: The role of the messages author, in this case `tool`.
        tool_call_id:
          type: string
          title: Tool Call Id
          description: Tool call that this message is responding to.
      additionalProperties: false
      type: object
      required:
      - content
      - role
      - tool_call_id
      title: ChatCompletionToolMessageParam
    ChatCompletionUserMessageParam:
      properties:
        content:
          anyOf:
          - type: string
          - items:
              anyOf:
              - $ref: '#/components/schemas/ChatCompletionContentPartTextParam'
              - $ref: '#/components/schemas/ChatCompletionContentPartImageParam'
            type: array
          title: Content
          description: The contents of the user message.
        role:
          type: string
          const: user
          title: Role
          description: The role of the messages author, in this case `user`.
        name:
          type: string
          title: Name
          description: An optional name for the participant.
      additionalProperties: false
      type: object
      required:
      - content
      - role
      title: ChatCompletionUserMessageParam
    ChoiceDeltaFunctionCall:
      properties:
        name:
          type: string
          title: Name
        arguments:
          type: string
          title: Arguments
      type: object
      title: ChoiceDeltaFunctionCall
    ChoiceDeltaToolCall:
      properties:
        index:
          type: integer
          title: Index
        id:
          type: string
          title: Id
        type:
          type: string
          title: Type
        function:
          $ref: '#/components/schemas/ChoiceDeltaToolCallFunction'
      type: object
      required:
      - index
      title: ChoiceDeltaToolCall
    ChoiceDeltaToolCallFunction:
      properties:
        name:
          type: string
          title: Name
        arguments:
          type: string
          title: Arguments
      type: object
      title: ChoiceDeltaToolCallFunction
    ChoiceLogprobs:
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionTokenLogprob'
          title: Content
          description: A list of message content tokens with log probability information.
      type: object
      title: ChoiceLogprobs
      description: 'Log probability information for a chat completion choice.


        This is used in both regular and streaming chat completions when

        logprobs=true is provided in the request.'
    ClavataRailConfig:
      properties:
        server_endpoint:
          type: string
          title: Server Endpoint
          description: The endpoint for the Clavata API
          default: https://gateway.app.clavata.ai:8443
        policies:
          additionalProperties:
            type: string
          type: object
          title: Policies
          description: A dictionary of policy aliases and their corresponding IDs.
        label_match_logic:
          type: string
          enum:
          - ANY
          - ALL
          title: Label Match Logic
          description: "The logic to use when deciding whether the evaluation matched.\n\
            \        If ANY, only one of the configured labels needs to be found in\
            \ the input or output.\n        If ALL, all configured labels must be\
            \ found in the input or output."
          default: ANY
        input:
          allOf:
          - $ref: '#/components/schemas/ClavataRailOptions'
          description: Clavata configuration for an Input Guardrail
        output:
          allOf:
          - $ref: '#/components/schemas/ClavataRailOptions'
          description: Clavata configuration for an Output Guardrail
      type: object
      title: ClavataRailConfig
      description: Configuration data for the Clavata API
    ClavataRailOptions:
      properties:
        policy:
          type: string
          title: Policy
          description: The policy alias to use when evaluating inputs or outputs.
        labels:
          items:
            type: string
          type: array
          title: Labels
          description: "A list of labels to match against the policy.\n        If\
            \ no labels are provided, the overall policy result will be returned.\n\
            \        If labels are provided, only hits on the provided labels will\
            \ be considered a hit."
      type: object
      required:
      - policy
      title: ClavataRailOptions
      description: Configuration data for the Clavata API
    CodeLang:
      type: string
      enum:
      - go
      - javascript
      - java
      - kotlin
      - python
      - ruby
      - rust
      - scala
      - swift
      - typescript
      - sql:sqlite
      - sql:tsql
      - sql:bigquery
      - sql:mysql
      - sql:postgres
      - sql:ansi
      title: CodeLang
    CodeValidationColumn:
      properties:
        drop:
          type: boolean
          title: Drop
          description: If true, remove this column from the final dataset before evaluation.
          default: false
        name:
          type: string
          title: Name
        code_lang:
          $ref: '#/components/schemas/CodeLang'
        target_column:
          type: string
          title: Target Column
      type: object
      required:
      - name
      - code_lang
      - target_column
      title: CodeValidationColumn
      description: "Data Designer column for validating code in another column.\n\n\
        Code validation is currently supported for Python and SQL.\n\nArgs:\n    name:\
        \ Name of the column.\n    code_lang: Language of the code to validate.\n\
        \    target_column: Column with code to validate."
    ColumnConstraint:
      properties:
        target_column:
          type: string
          title: Target Column
        type:
          $ref: '#/components/schemas/ConstraintType'
        params:
          $ref: '#/components/schemas/ColumnConstraintParams'
      type: object
      required:
      - target_column
      - type
      - params
      title: ColumnConstraint
    ColumnConstraintParams:
      properties:
        operator:
          $ref: '#/components/schemas/InequalityOperator'
        rhs:
          anyOf:
          - type: number
          - type: string
          title: Rhs
      type: object
      required:
      - operator
      - rhs
      title: ColumnConstraintParams
    CompletionRequest:
      properties:
        model:
          type: string
          title: Model
          description: The model to use for completion. Must be one of the available
            models.
        response_format:
          type: object
          additionalProperties:
            type: string
          title: Response Format
          description: Format of the response, can be 'json_object' to force the model
            to output valid JSON.
        system_fingerprint:
          type: string
          title: System Fingerprint
          description: Represents the backend configuration that the model runs with.
            Used with seed for determinism.
        max_tokens:
          type: integer
          title: Max Tokens
          description: The maximum number of tokens that can be generated in the chat
            completion.
        n:
          type: integer
          title: N
          description: How many chat completion choices to generate for each input
            message.
        stream:
          type: boolean
          title: Stream
          description: If set, partial message deltas will be sent, like in ChatGPT.
          default: false
        temperature:
          type: number
          title: Temperature
          description: What sampling temperature to use, between 0 and 2.
        top_p:
          type: number
          title: Top P
          description: An alternative to sampling with temperature, called nucleus
            sampling.
        stop:
          anyOf:
          - type: string
          - items:
              type: string
            type: array
          title: Stop
          description: Up to 4 sequences where the API will stop generating further
            tokens.
        frequency_penalty:
          type: number
          title: Frequency Penalty
          description: Positive values penalize new tokens based on their existing
            frequency in the text.
        presence_penalty:
          type: number
          title: Presence Penalty
          description: Positive values penalize new tokens based on whether they appear
            in the text so far.
        function_call:
          anyOf:
          - type: string
          - type: object
          title: Function Call
          description: 'Not Supported. Deprecated in favor of tool_choice. ''none''
            means the model will not call a function and instead generates a message.
            ''auto'' means the model can pick between generating a message or calling
            a function. Specifying a particular function via {''name'': ''my_function''}
            forces the model to call that function.'
        best_of:
          type: integer
          title: Best Of
          description: Not supported. Generates best_of completions server-side and
            returns the "best" (the one with the highest log probability per token).
            Results cannot be streamed. When used with n, best_of controls the number
            of candidate completions and n specifies how many to return - best_of
            must be greater than n.
        echo:
          type: boolean
          title: Echo
          description: Not supported. If `echo` is true, the response will include
            the prompt and optionally its tokens ids and logprobs.
        suffix:
          type: string
          title: Suffix
          description: Not supported. If echo is set, the prompt is returned with
            the completion.
        seed:
          type: integer
          title: Seed
          description: If specified, attempts to sample deterministically.
        logit_bias:
          type: object
          additionalProperties:
            type: number
          title: Logit Bias
          description: Not Supported. Modify the likelihood of specified tokens appearing
            in the completion.
        top_logprobs:
          type: integer
          title: Top Logprobs
          description: The number of most likely tokens to return at each token position.
        logprobs:
          type: boolean
          title: Logprobs
          description: Whether to return log probabilities of the output tokens or
            not. If true, returns the log probabilities of each output token returned
            in the content of message
        tool_choice:
          anyOf:
          - type: string
          - type: object
          title: Tool Choice
          description: Not Supported. Favored over function_call. Controls which (if
            any) function is called by the model.
        user:
          type: string
          title: User
          description: Not Supported. A unique identifier representing your end-user.
        tools:
          type: array
          items:
            type: string
          title: Tools
          description: A list of tools the model may call.
        ignore_eos:
          type: boolean
          title: Ignore Eos
          description: Ignore the eos when running
        prompt:
          anyOf:
          - items:
              type: integer
            type: array
          - items:
              items:
                type: integer
              type: array
            type: array
          - type: string
          - items:
              type: string
            type: array
          minLength: 1
          title: Prompt
          description: User prompt or list of token ids.
          default: Once upon a time
      type: object
      required:
      - model
      title: CompletionRequest
      description: Common options for OpenAI requests
    CompletionResponse:
      properties:
        id:
          type: string
          title: Id
        object:
          type: string
          title: Object
          default: text_completion
        created:
          type: integer
          title: Created
        model:
          type: string
          title: Model
        choices:
          items:
            $ref: '#/components/schemas/CompletionResponseChoice'
          type: array
          title: Choices
        usage:
          $ref: '#/components/schemas/UsageInfo'
      type: object
      required:
      - model
      - choices
      - usage
      title: CompletionResponse
    CompletionResponseChoice:
      properties:
        index:
          type: integer
          title: Index
        text:
          type: string
          title: Text
        logprobs:
          $ref: '#/components/schemas/LogProbs'
        finish_reason:
          type: string
          title: Finish Reason
          description: The reasons why the conversation ended.
      type: object
      required:
      - index
      - text
      title: CompletionResponseChoice
    CompletionResponseStreamChoice:
      properties:
        index:
          type: integer
          title: Index
        text:
          type: string
          title: Text
        logprobs:
          $ref: '#/components/schemas/LogProbs'
        finish_reason:
          type: string
          title: Finish Reason
          description: The reasons why the conversation ended.
      type: object
      required:
      - index
      - text
      title: CompletionResponseStreamChoice
    CompletionStreamResponse:
      properties:
        id:
          type: string
          title: Id
        object:
          type: string
          title: Object
          default: text_completion
        created:
          type: integer
          title: Created
        model:
          type: string
          title: Model
        choices:
          items:
            $ref: '#/components/schemas/CompletionResponseStreamChoice'
          type: array
          title: Choices
        usage:
          $ref: '#/components/schemas/UsageInfo'
      type: object
      required:
      - model
      - choices
      title: CompletionStreamResponse
    ConfigDataInput:
      properties:
        models:
          items:
            $ref: '#/components/schemas/Model'
          type: array
          title: Models
          description: The list of models used by the rails configuration.
        instructions:
          type: array
          items:
            $ref: '#/components/schemas/Instruction'
          title: Instructions
          description: List of instructions in natural language that the LLM should
            use.
          default:
          - type: general
            content: Below is a conversation between a helpful AI assistant and a
              user. The bot is designed to generate human-like text based on the input
              that it receives. The bot is talkative and provides lots of specific
              details. If the bot does not know the answer to a question, it truthfully
              says it does not know.
        actions_server_url:
          type: string
          title: Actions Server Url
          description: The URL of the actions server that should be used for the rails.
        sample_conversation:
          type: string
          title: Sample Conversation
          description: The sample conversation that should be used inside the prompts.
          default: "user \"Hello there!\"\n  express greeting\nbot express greeting\n\
            \  \"Hello! How can I assist you today?\"\nuser \"What can you do for\
            \ me?\"\n  ask about capabilities\nbot respond about capabilities\n  \"\
            As an AI assistant, I can help you with a wide range of tasks. This includes\
            \ question answering on various topics, generating text for various purposes\
            \ and providing suggestions based on your preferences.\"\nuser \"Tell\
            \ me a bit about the history of NVIDIA.\"\n  ask general question\nbot\
            \ response for general question\n  \"NVIDIA is a technology company that\
            \ specializes in designing and manufacturing graphics processing units\
            \ (GPUs) and other computer hardware. The company was founded in 1993\
            \ by Jen-Hsun Huang, Chris Malachowsky, and Curtis Priem.\"\nuser \"tell\
            \ me more\"\n  request more information\nbot provide more information\n\
            \  \"Initially, the company focused on developing 3D graphics processing\
            \ technology for the PC gaming market. In 1999, NVIDIA released the GeForce\
            \ 256, the world's first GPU, which was a major breakthrough for the gaming\
            \ industry. The company continued to innovate in the GPU space, releasing\
            \ new products and expanding into other markets such as professional graphics,\
            \ mobile devices, and artificial intelligence.\"\nuser \"thanks\"\n  express\
            \ appreciation\nbot express appreciation and offer additional help\n \
            \ \"You're welcome. If you have any more questions or if there's anything\
            \ else I can help you with, please don't hesitate to ask.\"\n"
        prompts:
          type: array
          items:
            $ref: '#/components/schemas/TaskPrompt'
          title: Prompts
          description: The prompts that should be used for the various LLM tasks.
        prompting_mode:
          type: string
          title: Prompting Mode
          description: Allows choosing between different prompting strategies.
          default: standard
        lowest_temperature:
          type: number
          title: Lowest Temperature
          description: The lowest temperature that should be used for the LLM.
          default: 0.001
        enable_multi_step_generation:
          type: boolean
          title: Enable Multi Step Generation
          description: Whether to enable multi-step generation for the LLM.
          default: false
        colang_version:
          type: string
          title: Colang Version
          description: The Colang version to use.
          default: '1.0'
        custom_data:
          type: object
          title: Custom Data
          description: Any custom configuration data that might be needed.
        rails:
          allOf:
          - $ref: '#/components/schemas/RailsInput'
          description: Configuration for the various rails (input, output, etc.).
        enable_rails_exceptions:
          type: boolean
          title: Enable Rails Exceptions
          description: If set, the pre-defined guardrails raise exceptions instead
            of returning pre-defined messages.
          default: false
        passthrough:
          type: boolean
          title: Passthrough
          description: 'Weather the original prompt should pass through the guardrails
            configuration as is. This means it will not be altered in any way. '
      additionalProperties: false
      type: object
      required:
      - models
      title: ConfigDataInput
      description: Configuration object for the models and the rails.
    ConfigDataOutput:
      properties:
        models:
          items:
            $ref: '#/components/schemas/Model'
          type: array
          title: Models
          description: The list of models used by the rails configuration.
        instructions:
          type: array
          items:
            $ref: '#/components/schemas/Instruction'
          title: Instructions
          description: List of instructions in natural language that the LLM should
            use.
          default:
          - type: general
            content: Below is a conversation between a helpful AI assistant and a
              user. The bot is designed to generate human-like text based on the input
              that it receives. The bot is talkative and provides lots of specific
              details. If the bot does not know the answer to a question, it truthfully
              says it does not know.
        actions_server_url:
          type: string
          title: Actions Server Url
          description: The URL of the actions server that should be used for the rails.
        sample_conversation:
          type: string
          title: Sample Conversation
          description: The sample conversation that should be used inside the prompts.
          default: "user \"Hello there!\"\n  express greeting\nbot express greeting\n\
            \  \"Hello! How can I assist you today?\"\nuser \"What can you do for\
            \ me?\"\n  ask about capabilities\nbot respond about capabilities\n  \"\
            As an AI assistant, I can help you with a wide range of tasks. This includes\
            \ question answering on various topics, generating text for various purposes\
            \ and providing suggestions based on your preferences.\"\nuser \"Tell\
            \ me a bit about the history of NVIDIA.\"\n  ask general question\nbot\
            \ response for general question\n  \"NVIDIA is a technology company that\
            \ specializes in designing and manufacturing graphics processing units\
            \ (GPUs) and other computer hardware. The company was founded in 1993\
            \ by Jen-Hsun Huang, Chris Malachowsky, and Curtis Priem.\"\nuser \"tell\
            \ me more\"\n  request more information\nbot provide more information\n\
            \  \"Initially, the company focused on developing 3D graphics processing\
            \ technology for the PC gaming market. In 1999, NVIDIA released the GeForce\
            \ 256, the world's first GPU, which was a major breakthrough for the gaming\
            \ industry. The company continued to innovate in the GPU space, releasing\
            \ new products and expanding into other markets such as professional graphics,\
            \ mobile devices, and artificial intelligence.\"\nuser \"thanks\"\n  express\
            \ appreciation\nbot express appreciation and offer additional help\n \
            \ \"You're welcome. If you have any more questions or if there's anything\
            \ else I can help you with, please don't hesitate to ask.\"\n"
        prompts:
          type: array
          items:
            $ref: '#/components/schemas/TaskPrompt'
          title: Prompts
          description: The prompts that should be used for the various LLM tasks.
        prompting_mode:
          type: string
          title: Prompting Mode
          description: Allows choosing between different prompting strategies.
          default: standard
        lowest_temperature:
          type: number
          title: Lowest Temperature
          description: The lowest temperature that should be used for the LLM.
          default: 0.001
        enable_multi_step_generation:
          type: boolean
          title: Enable Multi Step Generation
          description: Whether to enable multi-step generation for the LLM.
          default: false
        colang_version:
          type: string
          title: Colang Version
          description: The Colang version to use.
          default: '1.0'
        custom_data:
          type: object
          title: Custom Data
          description: Any custom configuration data that might be needed.
        rails:
          allOf:
          - $ref: '#/components/schemas/RailsOutput'
          description: Configuration for the various rails (input, output, etc.).
        enable_rails_exceptions:
          type: boolean
          title: Enable Rails Exceptions
          description: If set, the pre-defined guardrails raise exceptions instead
            of returning pre-defined messages.
          default: false
        passthrough:
          type: boolean
          title: Passthrough
          description: 'Weather the original prompt should pass through the guardrails
            configuration as is. This means it will not be altered in any way. '
      additionalProperties: false
      type: object
      required:
      - models
      title: ConfigDataOutput
      description: Configuration object for the models and the rails.
    ConstraintType:
      type: string
      enum:
      - scalar_inequality
      - column_inequality
      title: ConstraintType
    ContainerSpec:
      properties:
        image:
          type: string
          title: Image
      type: object
      required:
      - image
      title: ContainerSpec
      description: 'Specification for a container configuration.


        Defines the container image and related configuration for job execution.'
    CreateEmbeddingResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Embedding'
          type: array
          title: Data
          description: The list of embeddings generated by the model.
        model:
          type: string
          title: Model
          description: The name of the model used to generate the embedding.
        object:
          type: string
          const: list
          title: Object
          default: list
        usage:
          allOf:
          - $ref: '#/components/schemas/UsageInfo'
          description: The usage information for the request.
      type: object
      required:
      - data
      - model
      - usage
      title: CreateEmbeddingResponse
    CreateJobRequest:
      properties:
        num_records:
          type: integer
          title: Num Records
        config:
          $ref: '#/components/schemas/DataDesignerConfig'
      type: object
      required:
      - num_records
      - config
      title: CreateJobRequest
    CreatedAtFilter:
      properties:
        gte:
          type: string
          title: Gte
          description: Filter entities created after a given date.
        lte:
          type: string
          title: Lte
          description: Filter entities created before a given date.
      type: object
      title: CreatedAtFilter
    CustomizationConfigFilter:
      properties:
        name:
          type: string
          title: Name
          description: Filter by the name of the customization config
        enabled:
          type: boolean
          title: Enabled
          description: Filter by whether the target is enabled or not for customization
        target_base_model:
          type: string
          title: Target Base Model
          description: Filter by name of the target's base model.
        target_name:
          type: string
          title: Target Name
          description: Filter by name of the target.
        training_type:
          type: string
          title: Training Type
          description: Filter by the training type
        finetuning_type:
          type: string
          title: Finetuning Type
          description: Filter by the finetuning type
      type: object
      title: CustomizationConfigFilter
    CustomizationConfigInput:
      properties:
        name:
          type: string
          maxLength: 255
          pattern: ^[\w\-\+.@:]*$
          title: Name
          description: The name of the entity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
          default: ''
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        description:
          type: string
          title: Description
          description: The description of the entity.
        target:
          anyOf:
          - type: string
            title: Reference
            description: A reference to CustomizationTarget.
          - $ref: '#/components/schemas/CustomizationTargetInput'
          title: Target
          description: The target to perform the customization on
        training_options:
          items:
            $ref: '#/components/schemas/CustomizationTrainingOption'
          type: array
          title: Training Options
          description: Resource configuration for each training option for the model.
        training_precision:
          allOf:
          - $ref: '#/components/schemas/ModelPrecision'
          description: The precision to train the model with, defaults to the target's
            precision
        max_seq_length:
          type: integer
          title: Max Seq Length
          description: The largest context used for training. Datasets are truncated
            based on the maximum sequence length.
        pod_spec:
          allOf:
          - $ref: '#/components/schemas/TrainingPodSpecInput'
          description: Additional parameters to ensure these training jobs get run
            on the appropriate hardware.
          examples:
          - annotations:
              nmp/job-type: customization
            node_affinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - preference:
                  matchExpressions:
                  - key: nvidia.com/gpu.count
                    operator: Gt
                    values:
                    - '4'
                weight: 100
              - preference:
                  matchExpressions:
                  - key: topology.kubernetes.io/zone
                    operator: In
                    values:
                    - us-west-2a
                    - us-west-2b
                weight: 50
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: nvidia.com/gpu.product
                    operator: In
                    values:
                    - NVIDIA-A100-SXM4-80GB
                    - NVIDIA-H100-80GB-HBM3
                  - key: node.kubernetes.io/instance-type
                    operator: In
                    values:
                    - p4d.24xlarge
                    - p5.48xlarge
            node_selectors:
              kubernetes.io/hostname: minikube
            tolerations:
            - effect: NoSchedule
              key: app
              operator: Equal
              value: customizer
        prompt_template:
          type: string
          title: Prompt Template
          description: 'Prompt template used to extract keys from the dataset. E.g.
            prompt_template=''{input} {output}'', and sample looks like ''{\"input\":
            \"Q: 2x2 A:\", \"output\": \"4\"}'' then the model sees ''Q: 2x2 A: 4'''
          default: '{prompt} {completion}'
        chat_prompt_template:
          type: string
          title: Chat Prompt Template
          description: Chat Prompt Template to apply to the model to make it compatible
            with chat datasets
        dataset_schemas:
          type: array
          items:
            type: object
          title: Dataset Schemas
          description: Descriptions of the expected formats of the datasets uploaded.
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      required:
      - training_options
      - max_seq_length
      title: CustomizationConfigInput
      description: A customization configuration template supported by the Customizer.
    CustomizationConfigJobOutputValue:
      properties:
        base_model:
          type: string
          title: Base Model
          description: The base model that will be customized.
        precision:
          allOf:
          - $ref: '#/components/schemas/ModelPrecision'
          description: Model precision
        training_option:
          allOf:
          - $ref: '#/components/schemas/CustomizationTrainingOption'
          description: The selected training option for the job run.
        max_seq_length:
          type: integer
          title: Max Seq Length
        dataset_schema:
          type: object
          title: Dataset Schema
          description: Description of the expected format of the dataset
        prompt_template:
          type: string
          title: Prompt Template
          description: 'Prompt template used to extract keys from the dataset. E.g.
            prompt_template=''{input} {output}'', and sample looks like ''{\"input\":
            \"Q: 2x2 A:\", \"output\": \"4\"}'' then the model sees ''Q: 2x2 A: 4'''
      type: object
      required:
      - base_model
      - precision
      - training_option
      - max_seq_length
      title: CustomizationConfigJobOutputValue
      description: Config object as a value for CustomizationJob.config in /v1/customization/jobs
    CustomizationConfigOutput:
      properties:
        created_at:
          type: string
          format: date-time
          title: Created At
          description: Timestamp for when the entity was created.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: Timestamp for when the entity was last updated.
        name:
          type: string
          maxLength: 255
          pattern: ^[\w\-\+.@:]*$
          title: Name
          description: The name of the entity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
          default: ''
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        description:
          type: string
          title: Description
          description: The description of the entity.
        target:
          anyOf:
          - type: string
            title: Reference
            description: A reference to CustomizationTargetOutput.
          - $ref: '#/components/schemas/CustomizationTargetOutput'
          title: Target
          description: The target to perform the customization on
        training_options:
          items:
            $ref: '#/components/schemas/CustomizationTrainingOption'
          type: array
          title: Training Options
          description: Resource configuration for each training option for the model.
        training_precision:
          allOf:
          - $ref: '#/components/schemas/ModelPrecision'
          description: The precision to train the model with, defaults to the target's
            precision
        max_seq_length:
          type: integer
          title: Max Seq Length
          description: The largest context used for training. Datasets are truncated
            based on the maximum sequence length.
        pod_spec:
          allOf:
          - $ref: '#/components/schemas/TrainingPodSpecOutput'
          description: Additional parameters to ensure these training jobs get run
            on the appropriate hardware.
          examples:
          - annotations:
              nmp/job-type: customization
            node_affinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - preference:
                  matchExpressions:
                  - key: nvidia.com/gpu.count
                    operator: Gt
                    values:
                    - '4'
                weight: 100
              - preference:
                  matchExpressions:
                  - key: topology.kubernetes.io/zone
                    operator: In
                    values:
                    - us-west-2a
                    - us-west-2b
                weight: 50
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: nvidia.com/gpu.product
                    operator: In
                    values:
                    - NVIDIA-A100-SXM4-80GB
                    - NVIDIA-H100-80GB-HBM3
                  - key: node.kubernetes.io/instance-type
                    operator: In
                    values:
                    - p4d.24xlarge
                    - p5.48xlarge
            node_selectors:
              kubernetes.io/hostname: minikube
            tolerations:
            - effect: NoSchedule
              key: app
              operator: Equal
              value: customizer
        prompt_template:
          type: string
          title: Prompt Template
          description: 'Prompt template used to extract keys from the dataset. E.g.
            prompt_template=''{input} {output}'', and sample looks like ''{\"input\":
            \"Q: 2x2 A:\", \"output\": \"4\"}'' then the model sees ''Q: 2x2 A: 4'''
          default: '{prompt} {completion}'
        chat_prompt_template:
          type: string
          title: Chat Prompt Template
          description: Chat Prompt Template to apply to the model to make it compatible
            with chat datasets
        dataset_schemas:
          type: array
          items:
            type: object
          title: Dataset Schemas
          description: Descriptions of the expected formats of the datasets uploaded.
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      required:
      - training_options
      - max_seq_length
      title: CustomizationConfigOutput
      description: A customization configuration template supported by the Customizer.
    CustomizationConfigOutputsPage:
      properties:
        object:
          type: string
          title: Object
          description: The type of object being returned.
          default: list
        data:
          items:
            $ref: '#/components/schemas/CustomizationConfigOutput'
          type: array
          title: Data
        pagination:
          allOf:
          - $ref: '#/components/schemas/PaginationData'
          description: Pagination information.
        sort:
          type: string
          title: Sort
          description: The field on which the results are sorted.
        filter:
          allOf:
          - $ref: '#/components/schemas/CustomizationConfigFilter'
          description: Filtering information.
      type: object
      required:
      - data
      title: CustomizationConfigOutputsPage
    CustomizationConfigSortField:
      type: string
      enum:
      - created_at
      - -created_at
      - updated_at
      - -updated_at
      - name
      - -name
      - enabled
      - -enabled
      - num_parameters
      - -num_parameters
      title: CustomizationConfigSortField
    CustomizationConfigUpdate:
      properties:
        description:
          type: string
          title: Description
          description: The description of the entity.
        training_options:
          type: array
          items:
            $ref: '#/components/schemas/CustomizationTrainingOption'
          title: Training Options
          description: Resource configuration for each training option for the model.
        add_training_options:
          type: array
          items:
            $ref: '#/components/schemas/CustomizationTrainingOption'
          title: Add Training Options
          description: List of training options to add in the existing training options
            for the config.
        remove_training_options:
          type: array
          items:
            $ref: '#/components/schemas/CustomizationTrainingOptionRemoval'
          title: Remove Training Options
          description: List of training options to remove from the existing training
            options for the config.
        training_precision:
          allOf:
          - $ref: '#/components/schemas/ModelPrecision'
          description: The precision to train the model with, defaults to the target's
            precision
        max_seq_length:
          type: integer
          title: Max Seq Length
          description: The largest context used for training. Datasets are truncated
            based on the maximum sequence length.
        pod_spec:
          allOf:
          - $ref: '#/components/schemas/TrainingPodSpecInput'
          description: Additional parameters to ensure these training jobs get run
            on the appropriate hardware.
          examples:
          - annotations:
              nmp/job-type: customization
            node_affinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - preference:
                  matchExpressions:
                  - key: nvidia.com/gpu.count
                    operator: Gt
                    values:
                    - '4'
                weight: 100
              - preference:
                  matchExpressions:
                  - key: topology.kubernetes.io/zone
                    operator: In
                    values:
                    - us-west-2a
                    - us-west-2b
                weight: 50
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: nvidia.com/gpu.product
                    operator: In
                    values:
                    - NVIDIA-A100-SXM4-80GB
                    - NVIDIA-H100-80GB-HBM3
                  - key: node.kubernetes.io/instance-type
                    operator: In
                    values:
                    - p4d.24xlarge
                    - p5.48xlarge
            node_selectors:
              kubernetes.io/hostname: minikube
            tolerations:
            - effect: NoSchedule
              key: app
              operator: Equal
              value: customizer
        prompt_template:
          type: string
          title: Prompt Template
          description: 'Prompt template used to extract keys from the dataset. E.g.
            prompt_template=''{input} {output}'', and sample looks like ''{\"input\":
            \"Q: 2x2 A:\", \"output\": \"4\"}'' then the model sees ''Q: 2x2 A: 4'''
          default: '{prompt} {completion}'
        chat_prompt_template:
          type: string
          title: Chat Prompt Template
          description: Chat Prompt Template to apply to the model to make it compatible
            with chat datasets
        dataset_schemas:
          type: array
          items:
            type: object
          title: Dataset Schemas
          description: Descriptions of the expected formats of the datasets uploaded.
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      title: CustomizationConfigUpdate
    CustomizationJobInput:
      properties:
        name:
          type: string
          title: Name
          description: The name of the entity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
        description:
          type: string
          title: Description
          description: The description of the entity.
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        config:
          anyOf:
          - type: string
            title: Reference
            description: A reference to CustomizationConfig.
          - $ref: '#/components/schemas/CustomizationConfigInput'
          title: Config
          description: The customization configuration to be used.
        hyperparameters:
          allOf:
          - $ref: '#/components/schemas/Hyperparameters'
          description: The hyperparameters to be used for customization.
        output_model:
          type: string
          title: Output Model
          description: The output model. If not specified, no output model is created,
            only the artifact files written.
        dataset:
          anyOf:
          - type: string
            title: Reference
            description: A reference to DatasetInputCU.
          - $ref: '#/components/schemas/DatasetInputCU'
          title: Dataset
          description: The dataset to be used for customization.
        dataset_parameters:
          allOf:
          - $ref: '#/components/schemas/DatasetParametersInput'
          description: Additional parameters to configure a dataset
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
        integrations:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/WandBIntegration'
            discriminator:
              propertyName: type
              mapping:
                wandb: '#/components/schemas/WandBIntegration'
          title: Integrations
          description: 'A list of third party integrations for a job. Example: Weights
            & Biases integration.'
          examples:
          - - type: wandb
              wandb:
                entity: my-entity
                notes: experiment with long context
                project: my-project
                tags:
                - long-context
                - reasoning
      type: object
      required:
      - config
      - hyperparameters
      - dataset
      title: CustomizationJobInput
      description: The customization job creation Input supported by the Customizer.
    CustomizationJobListFilter:
      properties:
        base_model:
          type: string
          title: Base Model
          description: Filter by name of the base model.
        finetuning_type:
          allOf:
          - $ref: '#/components/schemas/FinetuningType'
          description: Filter by available finetuning types.
        training_type:
          allOf:
          - $ref: '#/components/schemas/TrainingType'
          description: Filter by training objective type.
        batch_size:
          type: integer
          title: Batch Size
          description: Batch size is the number of training samples used to train
            a single forwardand backward pass.
        epochs:
          type: integer
          title: Epochs
          description: Epochs is the number of complete passes through the training
            dataset.
        log_every_n_steps:
          type: integer
          title: Log Every N Steps
          description: Control logging frequency for metrics tracking. It may slow
            down training to log on every single batch. By default, logs every 10
            training steps.
        dataset:
          type: string
          title: Dataset
          description: Filter by dataset files_url.
        status:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          description: The current status. Reflects the latest value in status_logs
        project:
          type: string
          title: Project
          description: Filter by project.
      additionalProperties: false
      type: object
      title: CustomizationJobListFilter
    CustomizationJobOutput:
      properties:
        id:
          type: string
          title: Id
          description: The ID of the entity. With the exception of namespaces, this
            is always a semantically-prefixed base58-encoded uuid4 [<prefix>-base58(uuid4())].
        created_at:
          type: string
          format: date-time
          title: Created At
          description: Timestamp for when the entity was created.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: Timestamp for when the entity was last updated.
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
        description:
          type: string
          title: Description
          description: The description of the entity.
        dataset:
          anyOf:
          - type: string
          - $ref: '#/components/schemas/DatasetCU'
          - $ref: '#/components/schemas/DatasetInputCU'
          title: Dataset
          description: The dataset to be used for customization.
        dataset_parameters:
          allOf:
          - $ref: '#/components/schemas/DatasetParametersOutput'
          description: Additional parameters to configure a dataset.
        output_model:
          type: string
          title: Output Model
          description: The output model. If not specified, no output model is created,
            only the artifact files written.
        config:
          anyOf:
          - type: string
            title: Reference
            description: A reference to CustomizationConfigOutput.
          - $ref: '#/components/schemas/CustomizationConfigOutput'
          title: Config
          description: The customization configuration template used.
        hyperparameters:
          allOf:
          - $ref: '#/components/schemas/Hyperparameters'
          description: The hyperparameters to be used for customization.
        status:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          description: The status for the job.
          default: created
        warnings:
          type: array
          items:
            $ref: '#/components/schemas/JobWarning'
          title: Warnings
          description: Warnings when creating a job.
        status_details:
          $ref: '#/components/schemas/CustomizationStatusDetails'
        config_snapshot:
          $ref: '#/components/schemas/CustomizationConfigJobOutputValue'
        integrations:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/WandBIntegration'
            discriminator:
              propertyName: type
              mapping:
                wandb: '#/components/schemas/WandBIntegration'
          title: Integrations
          description: 'A list of third party integrations for a job. Example: Weights
            & Biases integration.'
      type: object
      required:
      - dataset
      - config
      - hyperparameters
      title: CustomizationJobOutput
      description: Base model for CustomizationJob API endpopint /v1/customization/jobs
    CustomizationJobOutputsPage:
      properties:
        object:
          type: string
          title: Object
          description: The type of object being returned.
          default: list
        data:
          items:
            $ref: '#/components/schemas/CustomizationJobOutput'
          type: array
          title: Data
        pagination:
          allOf:
          - $ref: '#/components/schemas/PaginationData'
          description: Pagination information.
        sort:
          type: string
          title: Sort
          description: The field on which the results are sorted.
        filter:
          allOf:
          - $ref: '#/components/schemas/CustomizationJobListFilter'
          description: Filtering information.
      type: object
      required:
      - data
      title: CustomizationJobOutputsPage
    CustomizationMetricValue:
      properties:
        value:
          type: number
          title: Value
          description: The metric value (e.g., 0.325).
        step:
          type: integer
          title: Step
          description: The step the metric was reported (e.g., 23).
        timestamp:
          type: string
          title: Timestamp
          description: Timestamp when the metric was reported
      type: object
      title: CustomizationMetricValue
    CustomizationMetrics:
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/MetricKeys'
          title: Keys
          description: Metric keys
          default: []
        metrics:
          $ref: '#/components/schemas/MetricValues'
      type: object
      title: CustomizationMetrics
    CustomizationStatusDetails:
      properties:
        created_at:
          type: string
          format: date-time
          title: Created At
          description: The time when training started.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: The last time the status was updated.
        elapsed_time:
          type: number
          title: Elapsed Time
          description: Time in seconds that the job has been running/took to run.
          default: 0
        status:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          description: The current status of the Customization Job.
        steps_per_epoch:
          type: integer
          title: Steps Per Epoch
          description: 'The number of steps per epoch. Calculated as follows: `steps_per_epoch
            = ceil(training_samples / batch_size) / epochs`. If `null`, then Customizer
            simply doesn''t know the value.'
        steps_completed:
          type: integer
          title: Steps Completed
          description: The number of steps completed during training. The total number
            of steps is determined by hyperparameters, number of epochs and the batch
            size, and the number of samples in the training dataset. `total_steps
            = epochs * ceil(training_samples / batch_size)` when both training and
            validation datasets are used, or `total_steps = epochs * ceil(ceil(training_samples
            * 0.9) / batch_size)` when only training dataset is used.
          default: 0
        epochs_completed:
          type: integer
          title: Epochs Completed
          description: The total number of epochs completed during training
          default: 0
        percentage_done:
          type: number
          title: Percentage Done
          description: Percentage tracking the training progress of the customization.
            The progress is calculated as the percentage of completed epochs divided
            by the total number of epochs multiplied by 100. The training progress
            may not be 100 after training completes due to early stopping (validation
            loss did not improve significantly over time) or job time limit was reached.
          default: 0
        best_epoch:
          type: integer
          title: Best Epoch
          description: The epoch completed of the best checkpoint for the customized
            model
        train_loss:
          type: number
          title: Train Loss
          description: The training loss of the best checkpoint for the customized
            model
        val_loss:
          type: number
          title: Val Loss
          description: The validation loss of the best checkpoint for the customized
            model
        metrics:
          $ref: '#/components/schemas/CustomizationMetrics'
        status_logs:
          type: array
          items:
            $ref: '#/components/schemas/StatusLog'
          title: Status Logs
          description: Detailed log for changes to the status of the customization
            job.
      type: object
      required:
      - created_at
      - updated_at
      - status
      title: CustomizationStatusDetails
      description: Detailed information about the customization
    CustomizationTargetFilter:
      properties:
        base_model:
          type: string
          title: Base Model
          description: Filter by name of the base model.
        enabled:
          type: boolean
          title: Enabled
          description: Filter by enabled state of models
          default: true
        status:
          allOf:
          - $ref: '#/components/schemas/TargetStatus'
          description: Filter by the status of targets
      type: object
      title: CustomizationTargetFilter
    CustomizationTargetInput:
      properties:
        name:
          type: string
          title: Name
          description: The name of the entity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. You can omit this field for namespace
            entities or in deployments that don't use namespaces.
          default: default
        description:
          type: string
          title: Description
          description: The description of the entity.
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        enabled:
          type: boolean
          title: Enabled
          description: Enable the model for training jobs
        base_model:
          type: string
          title: Base Model
          description: Default to being the same as the the configuration entry name,
            maps to the name in NIM
        model_path:
          type: string
          title: Model Path
          description: Path to the model checkpoints to use for training. Absolute
            path or local path from the models cache
        model_uri:
          type: string
          title: Model Uri
          description: The URI of the model to download to the model cache at the
            model_path directory. To download from NGC, specify ngc://org/optional-team/model-name:version.
            To download from Nemo Data Store, specify hf://namespace/model-name@checkpoint-name
        hf_endpoint:
          type: string
          title: Hf Endpoint
          description: Configure the Hub base URL. Defaults to NeMo Data Store. Set
            value as "https://huggingface.co" to download model_uri from HuggingFace.
        tokenizer:
          type: object
          title: Tokenizer
          description: Overrides for the model tokenizer
        num_parameters:
          type: integer
          title: Num Parameters
          description: Number of parameters used for training the model
        precision:
          allOf:
          - $ref: '#/components/schemas/ModelPrecision'
          description: Training precision
      type: object
      required:
      - num_parameters
      - precision
      title: CustomizationTargetInput
      description: Optional model_path
    CustomizationTargetOutput:
      properties:
        id:
          type: string
          title: Id
          description: The ID of the entity. With the exception of namespaces, this
            is always a semantically-prefixed base58-encoded uuid4 [<prefix>-base58(uuid4())].
        created_at:
          type: string
          format: date-time
          title: Created At
          description: Timestamp for when the entity was created.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: Timestamp for when the entity was last updated.
        name:
          type: string
          maxLength: 255
          pattern: ^[\w\-\+.@:]*$
          title: Name
          description: The name of the entity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
          default: ''
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
        description:
          type: string
          title: Description
          description: The description of the entity.
        enabled:
          type: boolean
          title: Enabled
          description: Enable the model for training jobs
          default: false
        base_model:
          type: string
          title: Base Model
          description: Default to being the same as the the configuration entry name,
            maps to the name in NIM
        status:
          allOf:
          - $ref: '#/components/schemas/TargetStatus'
          description: The status of this target
          default: unknown
        model_path:
          type: string
          title: Model Path
          description: Path to the model checkpoints to use for training. Absolute
            path or local path from the models cache
        model_uri:
          type: string
          title: Model Uri
          description: The URI of the model to download to the model cache at the
            model_path directory. To download from NGC, specify ngc://org/optional-team/model-name:version.
            To download from Nemo Data Store, specify hf://namespace/model-name@checkpoint-name
        hf_endpoint:
          type: string
          title: Hf Endpoint
          description: Configure HuggingFace Hub base URL. Defaults to NeMo Data Store.
            Set value as "https://huggingface.co" to download model_uri from HuggingFace.
        tokenizer:
          type: object
          title: Tokenizer
          description: Overrides for the model tokenizer
        num_parameters:
          type: integer
          title: Num Parameters
          description: Number of parameters used for training the model
        precision:
          allOf:
          - $ref: '#/components/schemas/ModelPrecision'
          description: The precision that the model is stored in.
      type: object
      required:
      - model_path
      - num_parameters
      - precision
      title: CustomizationTargetOutput
      description: Configuration for a model supported by the Customizer.
    CustomizationTargetOutputsPage:
      properties:
        object:
          type: string
          title: Object
          description: The type of object being returned.
          default: list
        data:
          items:
            $ref: '#/components/schemas/CustomizationTargetOutput'
          type: array
          title: Data
        pagination:
          allOf:
          - $ref: '#/components/schemas/PaginationData'
          description: Pagination information.
        sort:
          type: string
          title: Sort
          description: The field on which the results are sorted.
        filter:
          allOf:
          - $ref: '#/components/schemas/CustomizationTargetFilter'
          description: Filtering information.
      type: object
      required:
      - data
      title: CustomizationTargetOutputsPage
    CustomizationTargetPatchInput:
      properties:
        num_parameters:
          type: integer
          title: Num Parameters
          description: Number of parameters used for training the model
        precision:
          allOf:
          - $ref: '#/components/schemas/ModelPrecision'
          description: Training precision
        description:
          type: string
          title: Description
          description: The description of the entity.
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        enabled:
          type: boolean
          title: Enabled
          description: Enable the model for training jobs
        base_model:
          type: string
          title: Base Model
          description: Default to being the same as the the configuration entry name,
            maps to the name in NIM
        model_path:
          type: string
          title: Model Path
          description: Path to the model checkpoints to use for training. Absolute
            path or local path from the models cache
        model_uri:
          type: string
          title: Model Uri
          description: The URI of the model to download to the model cache at the
            model_path directory. To download from NGC, specify ngc://org/optional-team/model-name:version.
            To download from Nemo Data Store, specify hf://namespace/model-name@checkpoint-name
        hf_endpoint:
          type: string
          title: Hf Endpoint
          description: Configure the Hub base URL. Defaults to NeMo Data Store. Set
            value as "https://huggingface.co" to download model_uri from HuggingFace.
        tokenizer:
          type: object
          title: Tokenizer
          description: Overrides for the model tokenizer
      type: object
      title: CustomizationTargetPatchInput
      description: Optional num_parameters, precision
    CustomizationTrainingOption:
      properties:
        training_type:
          $ref: '#/components/schemas/TrainingType'
        finetuning_type:
          $ref: '#/components/schemas/FinetuningType'
        num_gpus:
          type: integer
          title: Num Gpus
          description: The number of GPUs per node to use for the specified training
        num_nodes:
          type: integer
          title: Num Nodes
          description: The number of nodes to use for the specified training
          default: 1
        tensor_parallel_size:
          type: integer
          title: Tensor Parallel Size
          description: Number of GPUs used to split individual layers for tensor model
            parallelism (intra-layer).
          default: 1
        data_parallel_size:
          type: integer
          title: Data Parallel Size
          description: Number of model replicas that process different data batches
            in parallel, with gradient synchronization across GPUs. Only available
            on HF checkpoint models. data_parallel_size must be equal num_gpus * num_nodes
            and is set to this value automatically if not provided.
        pipeline_parallel_size:
          type: integer
          title: Pipeline Parallel Size
          description: Number of GPUs used to split the model across layers for pipeline
            model parallelism (inter-layer). Only available on NeMo 2 checkpoint models.
            pipeline_parallel_size * tensor_parallel_size must equal num_gpus * num_nodes
          default: 1
        use_sequence_parallel:
          type: boolean
          title: Use Sequence Parallel
          description: If set, sequences are distributed over multiple GPUs
          default: false
        micro_batch_size:
          type: integer
          title: Micro Batch Size
          description: 'The number of examples per data-parallel rank. More details
            at: https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/nlp/nemo_megatron/batching.html'
      type: object
      required:
      - training_type
      - finetuning_type
      - num_gpus
      - micro_batch_size
      title: CustomizationTrainingOption
      description: 'Resource configuration for model training.


        Specifies the hardware and parallelization settings for training.'
    CustomizationTrainingOptionRemoval:
      properties:
        training_type:
          $ref: '#/components/schemas/TrainingType'
        finetuning_type:
          $ref: '#/components/schemas/FinetuningType'
      type: object
      required:
      - training_type
      - finetuning_type
      title: CustomizationTrainingOptionRemoval
      description: 'Resource configuration for model training.


        Specifies the hardware and parallelization settings for training.'
    DPOParameters:
      properties:
        ref_policy_kl_penalty:
          type: number
          title: Ref Policy Kl Penalty
          description: Controls how strongly the trained policy is penalized for deviating
            from the reference policy. Increasing this value encourages the policy
            to stay closer to the reference (more conservative learning), while decreasing
            it allows more freedom to explore user-preferred behavior. Parameter is
            called `beta` in the original paper
          default: 0.05
        preference_loss_weight:
          type: number
          title: Preference Loss Weight
          description: Scales the contribution of the preference loss to the overall
            training objective. Increasing this value emphasizes learning from preference
            comparisons more strongly.
          default: 1
        preference_average_log_probs:
          type: boolean
          title: Preference Average Log Probs
          description: If set to true, the preference loss uses average log-probabilities,
            making the loss less sensitive to sequence length. Setting it to false
            (default) uses total log-probabilities, giving more influence to longer
            sequences.
          default: false
        sft_loss_weight:
          type: number
          title: Sft Loss Weight
          description: Scales the contribution of the supervised fine-tuning loss.
            Setting this to 0 disables SFT entirely, allowing training to focus exclusively
            on preference-based optimization.
          default: 0
        sft_average_log_probs:
          type: boolean
          title: Sft Average Log Probs
          description: If set to true, the supervised fine-tuning (SFT) loss normalizes
            by sequence length, treating all examples equally regardless of length.
            If false (default), longer examples contribute more to the loss.
          default: false
      type: object
      title: DPOParameters
      description: Specific parameters for DPO.
    DataDesignerConfig:
      properties:
        model_configs:
          items:
            $ref: '#/components/schemas/ModelConfig'
          type: array
          title: Model Configs
        seed:
          $ref: '#/components/schemas/Seed'
        person_samplers:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/PersonSamplerParams'
          title: Person Samplers
        columns:
          items:
            anyOf:
            - $ref: '#/components/schemas/SamplerColumn'
            - $ref: '#/components/schemas/LLMGenColumn'
            - $ref: '#/components/schemas/LLMTextColumn'
            - $ref: '#/components/schemas/LLMCodeColumn'
            - $ref: '#/components/schemas/LLMStructuredColumn'
            - $ref: '#/components/schemas/LLMJudgeColumn'
            - $ref: '#/components/schemas/CodeValidationColumn'
            - $ref: '#/components/schemas/ExpressionColumn'
          type: array
          minItems: 1
          title: Columns
        constraints:
          type: array
          items:
            $ref: '#/components/schemas/ColumnConstraint'
          title: Constraints
        evaluation:
          $ref: '#/components/schemas/EvaluateDataDesignerDatasetSettings'
      type: object
      required:
      - model_configs
      - columns
      title: DataDesignerConfig
      description: Configuration for NeMo Data Designer.
    DataDesignerJob:
      properties:
        schema_version:
          type: string
          title: Schema Version
          description: The version of the schema for the object. Internal use only.
          default: '1.0'
        id:
          type: string
          title: Id
          description: The ID of the entity. With the exception of namespaces, this
            is always a semantically-prefixed base58-encoded uuid4 [<prefix>-base58(uuid4())].
        description:
          type: string
          title: Description
          description: The description of the entity.
        type_prefix:
          type: string
          title: Type Prefix
          description: The type prefix of the entity ID. If not specified, it will
            be inferred from the entity type name, but this will likely result in
            long prefixes.
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: Timestamp for when the entity was created.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: Timestamp for when the entity was last updated.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
        status:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          description: The status for the job.
          default: created
        status_details:
          title: Status Details
      type: object
      required:
      - status_details
      title: DataDesignerJob
    DataDesignerResult:
      properties:
        id:
          type: string
          title: Id
        step_name:
          type: string
          title: Step Name
        format:
          type: string
          title: Format
        canonical:
          type: boolean
          title: Canonical
      type: object
      required:
      - id
      - step_name
      - format
      - canonical
      title: DataDesignerResult
    Dataset:
      properties:
        created_at:
          type: string
          format: date-time
          title: Created At
          description: Timestamp for when the entity was created.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: Timestamp for when the entity was last updated.
        name:
          type: string
          maxLength: 255
          pattern: ^[\w\-\+.@:]*$
          title: Name
          description: The name of the entity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
          default: ''
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        description:
          type: string
          title: Description
          description: The description of the entity.
        format:
          type: string
          title: Format
          description: Specifies the dataset format, referring to the schema of the
            dataset rather than the file format. Examples include SQuAD, BEIR, etc.
        files_url:
          type: string
          minLength: 1
          format: uri
          title: Files Url
          description: The location where the artifact files are stored. This can
            be a URL pointing to NDS, Hugging Face, S3, or any other accessible resource
            location.
        hf_endpoint:
          type: string
          title: Hf Endpoint
          description: For HuggingFace URLs, the endpoint that should be used. By
            default, this is set to the Data Store URL. For HuggingFace Hub, this
            should be set to "https://huggingface.co".
        split:
          type: string
          title: Split
          description: The split of the dataset. Examples include train, validation,
            test, etc.
        limit:
          type: integer
          title: Limit
          description: The maximum number of items to be used from the dataset.
        id:
          type: string
          title: Id
          description: The ID of the entity. With the exception of namespaces, this
            is always a semantically-prefixed base58-encoded uuid4 [<prefix>-base58(uuid4())].
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
      type: object
      required:
      - files_url
      title: Dataset
      description: A dataset that can be used for fine-tuning or evaluation.
    DatasetCU:
      properties:
        schema_version:
          type: string
          title: Schema Version
          description: The version of the schema for the object. Internal use only.
          default: '1.0'
        id:
          type: string
          title: Id
          description: The ID of the entity. With the exception of namespaces, this
            is always a semantically-prefixed base58-encoded uuid4 [<prefix>-base58(uuid4())].
        description:
          type: string
          title: Description
          description: The description of the entity.
        type_prefix:
          type: string
          title: Type Prefix
          description: The type prefix of the entity ID. If not specified, it will
            be inferred from the entity type name, but this will likely result in
            long prefixes.
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: Timestamp for when the entity was created.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: Timestamp for when the entity was last updated.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
        name:
          type: string
          maxLength: 255
          pattern: ^[\w\-\+.@:]*$
          title: Name
          description: The name of the entity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
          default: ''
        version_id:
          type: string
          title: Version Id
          description: A unique, immutable id for the version. This is similar to
            the commit hash.
          default: main
        version_tags:
          items:
            $ref: '#/components/schemas/VersionTag'
          type: array
          title: Version Tags
          description: The list of version tags associated with this entity.
        format:
          type: string
          title: Format
          description: Specifies the dataset format, referring to the schema of the
            dataset rather than the file format. Examples include SQuAD, BEIR, etc.
        files_url:
          type: string
          title: Files Url
          description: The location where the artifact files are stored. This can
            be a URL pointing to NDS, Hugging Face, S3, or any other accessible resource
            location.
        hf_endpoint:
          type: string
          title: Hf Endpoint
          description: For HuggingFace URLs, the endpoint that should be used. By
            default, this is set to the Data Store URL. For HuggingFace Hub, this
            should be set to "https://huggingface.co".
        split:
          type: string
          title: Split
          description: The split of the dataset. Examples include train, validation,
            test, etc.
        limit:
          type: integer
          title: Limit
          description: The maximum number of items to be used from the dataset.
      type: object
      title: DatasetCU
    DatasetEV:
      properties:
        schema_version:
          type: string
          title: Schema Version
          description: The version of the schema for the object. Internal use only.
          default: '1.0'
        id:
          type: string
          title: Id
          description: The ID of the entity. With the exception of namespaces, this
            is always a semantically-prefixed base58-encoded uuid4 [<prefix>-base58(uuid4())].
        description:
          type: string
          title: Description
          description: The description of the entity.
        type_prefix:
          type: string
          title: Type Prefix
          description: The type prefix of the entity ID. If not specified, it will
            be inferred from the entity type name, but this will likely result in
            long prefixes.
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: Timestamp for when the entity was created.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: Timestamp for when the entity was last updated.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
        name:
          type: string
          maxLength: 255
          pattern: ^[\w\-\+.@:]*$
          title: Name
          description: The name of the entity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
          default: ''
        version_id:
          type: string
          title: Version Id
          description: A unique, immutable id for the version. This is similar to
            the commit hash.
          default: main
        version_tags:
          items:
            $ref: '#/components/schemas/VersionTag'
          type: array
          title: Version Tags
          description: The list of version tags associated with this entity.
        format:
          type: string
          title: Format
          description: Specifies the dataset format, referring to the schema of the
            dataset rather than the file format. Examples include SQuAD, BEIR, etc.
        files_url:
          type: string
          minLength: 1
          format: uri
          title: Files Url
          description: The location where the artifact files are stored. This can
            be a URL pointing to NDS, Hugging Face, S3, or any other accessible resource
            location.
        hf_endpoint:
          type: string
          title: Hf Endpoint
          description: For HuggingFace URLs, the endpoint that should be used. By
            default, this is set to the Data Store URL. For HuggingFace Hub, this
            should be set to "https://huggingface.co".
        split:
          type: string
          title: Split
          description: The split of the dataset. Examples include train, validation,
            test, etc.
        limit:
          type: integer
          title: Limit
          description: The maximum number of items to be used from the dataset.
      type: object
      required:
      - files_url
      title: DatasetEV
      description: A dataset that can be used for fine-tuning or evaluation.
    DatasetFilter:
      properties:
        project:
          type: string
          title: Project
          description: Filter by project name.
        namespace:
          type: string
          title: Namespace
          description: Filter by namespace id.
      type: object
      title: DatasetFilter
    DatasetInput:
      properties:
        name:
          type: string
          maxLength: 255
          pattern: ^[\w\-\+.@:]*$
          title: Name
          description: The name of the entity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
          default: ''
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        description:
          type: string
          title: Description
          description: The description of the entity.
        format:
          type: string
          title: Format
          description: Specifies the dataset format, referring to the schema of the
            dataset rather than the file format. Examples include SQuAD, BEIR, etc.
        files_url:
          type: string
          minLength: 1
          format: uri
          title: Files Url
          description: The location where the artifact files are stored. This can
            be a URL pointing to NDS, Hugging Face, S3, or any other accessible resource
            location.
        hf_endpoint:
          type: string
          title: Hf Endpoint
          description: For HuggingFace URLs, the endpoint that should be used. By
            default, this is set to the Data Store URL. For HuggingFace Hub, this
            should be set to "https://huggingface.co".
        split:
          type: string
          title: Split
          description: The split of the dataset. Examples include train, validation,
            test, etc.
        limit:
          type: integer
          title: Limit
          description: The maximum number of items to be used from the dataset.
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      required:
      - files_url
      title: DatasetInput
      description: A dataset that can be used for fine-tuning or evaluation.
    DatasetInputCU:
      properties:
        namespace:
          type: string
          title: Namespace
          description: The ID of the namespace of the entity. This can be missing
            for namespace entities or in deployments that don't use namespaces.
        name:
          type: string
          title: Name
          description: The name of the entity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
        files_url:
          type: string
          title: Files Url
          description: The location where the artifact files are stored. This can
            be a URL pointing to NDS, Hugging Face, S3, or any other accessible resource
            location.
      additionalProperties: false
      type: object
      title: DatasetInputCU
    DatasetInputEV:
      properties:
        schema_version:
          type: string
          title: Schema Version
          description: The version of the schema for the object. Internal use only.
          default: '1.0'
        id:
          type: string
          title: Id
          description: The ID of the entity. With the exception of namespaces, this
            is always a semantically-prefixed base58-encoded uuid4 [<prefix>-base58(uuid4())].
        description:
          type: string
          title: Description
          description: The description of the entity.
        type_prefix:
          type: string
          title: Type Prefix
          description: The type prefix of the entity ID. If not specified, it will
            be inferred from the entity type name, but this will likely result in
            long prefixes.
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: Timestamp for when the entity was created.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: Timestamp for when the entity was last updated.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
        name:
          type: string
          maxLength: 255
          pattern: ^[\w\-\+.@:]*$
          title: Name
          description: The name of the entity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
          default: ''
        version_id:
          type: string
          title: Version Id
          description: A unique, immutable id for the version. This is similar to
            the commit hash.
          default: main
        version_tags:
          items:
            $ref: '#/components/schemas/VersionTag'
          type: array
          title: Version Tags
          description: The list of version tags associated with this entity.
        format:
          type: string
          title: Format
          description: Specifies the dataset format, referring to the schema of the
            dataset rather than the file format. Examples include SQuAD, BEIR, etc.
        files_url:
          type: string
          minLength: 1
          format: uri
          title: Files Url
          description: The location where the artifact files are stored. This can
            be a URL pointing to NDS, Hugging Face, S3, or any other accessible resource
            location.
        hf_endpoint:
          type: string
          title: Hf Endpoint
          description: For HuggingFace URLs, the endpoint that should be used. By
            default, this is set to the Data Store URL. For HuggingFace Hub, this
            should be set to "https://huggingface.co".
        split:
          type: string
          title: Split
          description: The split of the dataset. Examples include train, validation,
            test, etc.
        limit:
          type: integer
          title: Limit
          description: The maximum number of items to be used from the dataset.
      type: object
      required:
      - files_url
      title: DatasetInputEV
      description: A dataset that can be used for fine-tuning or evaluation.
    DatasetParametersInput:
      properties:
        tools:
          type: array
          items:
            $ref: '#/components/schemas/ToolSchemaInput'
          title: Tools
          description: A list of tools that are available for training with tool calling
        num_hard_negatives:
          type: integer
          title: Num Hard Negatives
          description: Number of negative documents to include per query for contrastive
            training. - Embedding Only
        negative_sample_strategy:
          type: string
          title: Negative Sample Strategy
          description: How to select negatives when more are available than needed
            - Embedding Only. 'first' picks the first N; 'random' samples N negatives
            randomly.
      additionalProperties: false
      type: object
      title: DatasetParametersInput
    DatasetParametersOutput:
      properties:
        tools:
          type: array
          items:
            $ref: '#/components/schemas/ToolSchemaOutput'
          title: Tools
          description: A list of tools that are available for training with tool calling
        num_hard_negatives:
          type: integer
          title: Num Hard Negatives
          description: Number of negative documents to include per query for contrastive
            training. - Embedding Only
        negative_sample_strategy:
          type: string
          title: Negative Sample Strategy
          description: How to select negatives when more are available than needed
            - Embedding Only. 'first' picks the first N; 'random' samples N negatives
            randomly.
      additionalProperties: false
      type: object
      title: DatasetParametersOutput
    DatasetSortField:
      type: string
      enum:
      - created_at
      - -created_at
      - name
      - -name
      title: DatasetSortField
    DatasetUpdate:
      properties:
        description:
          type: string
          title: Description
          description: The description of the entity.
        format:
          type: string
          title: Format
          description: Specifies the dataset format, referring to the schema of the
            dataset rather than the file format. Examples include SQuAD, BEIR, etc.
        files_url:
          type: string
          title: Files Url
          description: The location where the artifact files are stored. This can
            be a URL pointing to NDS, Hugging Face, S3, or any other accessible resource
            location.
        hf_endpoint:
          type: string
          title: Hf Endpoint
          description: For HuggingFace URLs, the endpoint that should be used. By
            default, this is set to the Data Store URL. For HuggingFace Hub, this
            should be set to "https://huggingface.co".
        split:
          type: string
          title: Split
          description: The split of the dataset. Examples include train, validation,
            test, etc.
        limit:
          type: integer
          title: Limit
          description: The maximum number of items to be used from the dataset.
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      title: DatasetUpdate
      description: A dataset that can be used for fine-tuning or evaluation.
    DatasetsPage:
      properties:
        object:
          type: string
          title: Object
          default: list
        data:
          items:
            $ref: '#/components/schemas/Dataset'
          type: array
          title: Data
        pagination:
          allOf:
          - $ref: '#/components/schemas/PaginationData'
          description: Pagination information.
        sort:
          type: string
          title: Sort
          description: The field on which the results are sorted.
        filter:
          allOf:
          - $ref: '#/components/schemas/DatasetFilter'
          description: Filtering information.
      type: object
      required:
      - data
      title: DatasetsPage
    DateTimeFilter:
      properties:
        gt:
          type: string
          title: Gt
          description: Filter for dates greater than this value.
        gte:
          type: string
          title: Gte
          description: Filter for dates greater than or equal to this value.
        lt:
          type: string
          title: Lt
          description: Filter for dates less than this value.
        lte:
          type: string
          title: Lte
          description: Filter for dates less than or equal to this value.
        eq:
          type: string
          title: Eq
          description: Filter for dates equal to this value.
        neq:
          type: string
          title: Neq
          description: Filter for dates not equal to this value.
      type: object
      title: DateTimeFilter
    DatetimeSamplerParams:
      properties:
        start:
          type: string
          title: Start
          description: Earliest possible datetime for sampling range, inclusive.
        end:
          type: string
          title: End
          description: Latest possible datetime for sampling range, inclusive.
        unit:
          allOf:
          - $ref: '#/components/schemas/Unit'
          title: Unit
          description: Sampling units, e.g. the smallest possible time interval between
            samples.
          default: D
      type: object
      required:
      - start
      - end
      title: DatetimeSamplerParams
    DeleteResponse:
      properties:
        message:
          type: string
          title: Message
          default: Resource deleted successfully.
        id:
          type: string
          title: Id
          description: The ID of the deleted resource.
        deleted_at:
          type: string
          title: Deleted At
          description: The timestamp when the resource was deleted.
      type: object
      title: DeleteResponse
    DeltaMessage:
      properties:
        role:
          type: string
          title: Role
        content:
          anyOf:
          - type: string
          - items:
              anyOf:
              - $ref: '#/components/schemas/ChatCompletionContentPartTextParam'
              - $ref: '#/components/schemas/ChatCompletionContentPartImageParam'
            type: array
          title: Content
        function_call:
          $ref: '#/components/schemas/ChoiceDeltaFunctionCall'
        tool_calls:
          type: array
          items:
            $ref: '#/components/schemas/ChoiceDeltaToolCall'
          title: Tool Calls
      type: object
      title: DeltaMessage
    DeploymentConfig:
      properties:
        created_at:
          type: string
          format: date-time
          title: Created At
          description: Timestamp for when the entity was created.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: Timestamp for when the entity was last updated.
        name:
          type: string
          title: Name
          description: The name of the identity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
        namespace:
          type: string
          title: Namespace
          description: The if of the namespace of the entity. This can be missing
            for namespace entities or in deployments that don't use namespaces.
        description:
          type: string
          title: Description
          description: The description of the entity.
        model:
          anyOf:
          - type: string
            title: Reference
            description: A reference to ModelOutputDE.
          - $ref: '#/components/schemas/ModelOutputDE'
          title: Model
          description: The model to be deployed.
        nim_deployment:
          allOf:
          - $ref: '#/components/schemas/NIMDeploymentConfig'
          description: Information about a NIM deployment.
        external_endpoint:
          allOf:
          - $ref: '#/components/schemas/ExternalEndpointConfig'
          description: Information about an external endpoint.
        schema_version:
          type: string
          title: Schema Version
          description: The version of the schema for the object. Internal use only.
          default: '1.0'
        project:
          type: string
          title: Project
          description: The id of project associated with this entity.
        custom_fields:
          type: object
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      title: DeploymentConfig
      description: A deployment configuration.
    DeploymentConfigFilter:
      properties: {}
      type: object
      title: DeploymentConfigFilter
    DeploymentConfigInput:
      properties:
        name:
          type: string
          title: Name
          description: The name of the identity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
        namespace:
          type: string
          title: Namespace
          description: The if of the namespace of the entity. This can be missing
            for namespace entities or in deployments that don't use namespaces.
        description:
          type: string
          title: Description
          description: The description of the entity.
        model:
          anyOf:
          - type: string
            title: Reference
            description: A reference to ModelInputDE.
          - $ref: '#/components/schemas/ModelInputDE'
          title: Model
          description: The model to be deployed.
        nim_deployment:
          allOf:
          - $ref: '#/components/schemas/NIMDeploymentConfig'
          description: Information about a NIM deployment.
        external_endpoint:
          allOf:
          - $ref: '#/components/schemas/ExternalEndpointConfig'
          description: Information about an external endpoint.
        project:
          type: string
          title: Project
          description: The id of project associated with this entity.
        custom_fields:
          type: object
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      title: DeploymentConfigInput
      description: A deployment configuration.
    DeploymentConfigUpdate:
      properties:
        description:
          type: string
          title: Description
          description: The description of the entity.
        model:
          anyOf:
          - type: string
            title: Reference
            description: A reference to ModelInputDE.
          - $ref: '#/components/schemas/ModelInputDE'
          title: Model
          description: The model to be deployed.
        nim_deployment:
          allOf:
          - $ref: '#/components/schemas/NIMDeploymentConfig'
          description: Information about a NIM deployment.
        external_endpoint:
          allOf:
          - $ref: '#/components/schemas/ExternalEndpointConfig'
          description: Information about an external endpoint.
        schema_version:
          type: string
          title: Schema Version
          description: The version of the schema for the object. Internal use only.
          default: '1.0'
        project:
          type: string
          title: Project
          description: The id of project associated with this entity.
        custom_fields:
          type: object
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      title: DeploymentConfigUpdate
      description: A deployment configuration.
    DeploymentConfigsPage:
      properties:
        object:
          type: string
          title: Object
          default: list
        data:
          items:
            $ref: '#/components/schemas/DeploymentConfig'
          type: array
          title: Data
        pagination:
          allOf:
          - $ref: '#/components/schemas/PaginationData'
          description: Pagination information.
        sort:
          type: string
          title: Sort
          description: The field on which the results are sorted.
        filter:
          allOf:
          - $ref: '#/components/schemas/DeploymentConfigFilter'
          description: Filtering information.
      type: object
      required:
      - data
      title: DeploymentConfigsPage
    DialogRails:
      properties:
        single_call:
          allOf:
          - $ref: '#/components/schemas/SingleCallConfig'
          description: Configuration for the single LLM call option.
        user_messages:
          $ref: '#/components/schemas/UserMessagesConfig'
      type: object
      title: DialogRails
      description: Configuration of topical rails.
    DistillationParameters:
      properties:
        teacher:
          type: string
          title: Teacher
          description: Target to be used as teacher for distillation.
      type: object
      required:
      - teacher
      title: DistillationParameters
      description: Specific parameters for knowledge distillation
    DistributionType:
      type: string
      enum:
      - uniform
      - manual
      title: DistributionType
    Dtype:
      type: string
      enum:
      - int
      - float
      - str
      - bool
      title: Dtype
    Embedding:
      properties:
        embedding:
          items:
            type: number
          type: array
          title: Embedding
          description: The embedding vector.
        index:
          type: integer
          title: Index
          description: The index of the embedding.
        object:
          type: string
          const: embedding
          title: Object
          default: embedding
      type: object
      required:
      - embedding
      - index
      title: Embedding
      description: An embedding vector.
    EmbeddingsRequest:
      properties:
        model:
          type: string
          title: Model
          description: The model to use. Must be one of the available models.
        input:
          anyOf:
          - type: string
          - items:
              type: string
            type: array
          title: Input
          description: Input text to embed, encoded as a string or array of tokens.
        input_type:
          type: string
          title: Input Type
          description: The type of the input.
        dimensions:
          type: integer
          title: Dimensions
          description: The dimensionality of the embedding vector.
        encoding_format:
          type: string
          title: Encoding Format
          description: The encoding format of the input.
        user:
          type: string
          title: User
          description: Not Supported. A unique identifier representing your end-user.
        truncate:
          type: string
          title: Truncate
          description: Truncate the input text.
      type: object
      required:
      - model
      - input
      title: EmbeddingsRequest
      description: Request body for the embeddings API.
    ErrorResponse:
      properties:
        detail:
          type: string
          title: Detail
          example: Error message
      type: object
      required:
      - detail
      title: ErrorResponse
    EvaluateDataDesignerDatasetSettings:
      properties:
        llm_judge_columns:
          items:
            type: string
          type: array
          title: Llm Judge Columns
        columns_to_ignore:
          items:
            type: string
          type: array
          title: Columns To Ignore
        validation_columns:
          items:
            type: string
          type: array
          title: Validation Columns
        defined_categorical_columns:
          items:
            type: string
          type: array
          title: Defined Categorical Columns
        model_alias:
          type: string
          title: Model Alias
      type: object
      title: EvaluateDataDesignerDatasetSettings
    EvaluationConfigFilter:
      properties:
        namespace:
          type: string
          title: Namespace
          description: Filter by namespace.
        project:
          type: string
          title: Project
          description: Filter by project.
        created_at:
          allOf:
          - $ref: '#/components/schemas/DateTimeFilter'
          description: Filter by created_at date in ISO format.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        type:
          type: string
          title: Type
          description: Filter by type of evaluation.
        name:
          type: string
          title: Name
          description: Filter by name of the config.
      additionalProperties: false
      type: object
      title: EvaluationConfigFilter
    EvaluationConfigInput:
      properties:
        name:
          type: string
          maxLength: 255
          pattern: ^[\w\-\+.@:]*$
          title: Name
          description: The name of the entity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
          default: ''
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        description:
          type: string
          title: Description
          description: The description of the entity.
        type:
          type: string
          minLength: 1
          title: Type
          description: The type of the evaluation, e.g., 'mmlu', 'big_code'.For custom
            evaluations, this is set to `custom`.
        params:
          allOf:
          - $ref: '#/components/schemas/EvaluationParams'
          description: Additional parameters that need to be set at evaluation level.
        tasks:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/TaskConfigInput'
          title: Tasks
          description: Evaluation tasks belonging to the evaluation.
        groups:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/GroupConfigInput'
          title: Groups
          description: Evaluation tasks belonging to the evaluation.
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      required:
      - type
      title: EvaluationConfigInput
      description: An evaluation configuration.
    EvaluationConfigOutput:
      properties:
        schema_version:
          type: string
          title: Schema Version
          description: The version of the schema for the object. Internal use only.
          default: '1.0'
        id:
          type: string
          title: Id
          description: The ID of the entity. With the exception of namespaces, this
            is always a semantically-prefixed base58-encoded uuid4 [<prefix>-base58(uuid4())].
        description:
          type: string
          title: Description
          description: The description of the entity.
        type_prefix:
          type: string
          title: Type Prefix
          default: eval-config
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: Timestamp for when the entity was created.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: Timestamp for when the entity was last updated.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
        name:
          type: string
          maxLength: 255
          pattern: ^[\w\-\+.@:]*$
          title: Name
          description: The name of the entity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
          default: ''
        type:
          type: string
          minLength: 1
          title: Type
          description: The type of the evaluation, e.g., 'mmlu', 'big_code'.For custom
            evaluations, this is set to `custom`.
        params:
          allOf:
          - $ref: '#/components/schemas/EvaluationParams'
          description: Additional parameters that need to be set at evaluation level.
        tasks:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/TaskConfigOutput'
          title: Tasks
          description: Evaluation tasks belonging to the evaluation.
        groups:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/GroupConfigOutput'
          title: Groups
          description: Evaluation tasks belonging to the evaluation.
      type: object
      required:
      - type
      title: EvaluationConfigOutput
      description: An evaluation configuration.
    EvaluationConfigUpdate:
      properties:
        name:
          type: string
          title: Name
          description: The name of the entity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
          default: ''
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        description:
          type: string
          title: Description
          description: The description of the entity.
        type:
          type: string
          title: Type
          description: The type of the evaluation, e.g., 'mmlu', 'big_code'.For custom
            evaluations, this is set to `custom`.
        params:
          allOf:
          - $ref: '#/components/schemas/EvaluationParams'
          description: Additional parameters that need to be set at evaluation level.
        tasks:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/TaskConfigInput'
          title: Tasks
          description: Evaluation tasks belonging to the evaluation.
        groups:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/GroupConfigInput'
          title: Groups
          description: Evaluation tasks belonging to the evaluation.
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      title: EvaluationConfigUpdate
      description: An evaluation configuration.
    EvaluationConfigsPage:
      properties:
        object:
          type: string
          title: Object
          default: list
        data:
          items:
            $ref: '#/components/schemas/EvaluationConfigOutput'
          type: array
          title: Data
        pagination:
          allOf:
          - $ref: '#/components/schemas/PaginationData'
          description: Pagination information.
        sort:
          type: string
          title: Sort
          description: The field on which the results are sorted.
        filter:
          allOf:
          - $ref: '#/components/schemas/EvaluationConfigFilter'
          description: Filtering information.
      type: object
      required:
      - data
      title: EvaluationConfigsPage
    EvaluationJob:
      properties:
        created_at:
          type: string
          format: date-time
          title: Created At
          description: Timestamp for when the entity was created.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: Timestamp for when the entity was last updated.
        id:
          type: string
          title: Id
          description: The ID of the entity. With the exception of namespaces, this
            is always a semantically-prefixed base58-encoded uuid4 [<prefix>-base58(uuid4())].
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        description:
          type: string
          title: Description
          description: The description of the entity.
        target:
          allOf:
          - $ref: '#/components/schemas/EvaluationTargetOutput'
          description: The evaluation target.
        config:
          allOf:
          - $ref: '#/components/schemas/EvaluationConfigOutput'
          description: The evaluation configuration.
        result:
          type: string
          title: Result
          description: The evaluation result URN.
        output_files_url:
          type: string
          title: Output Files Url
          description: The place where the output files, if any, should be written.
        status_details:
          allOf:
          - $ref: '#/components/schemas/EvaluationStatusDetails'
          description: Details about the status of the evaluation.
        status:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          description: The status for the job.
          default: created
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      required:
      - target
      - config
      title: EvaluationJob
      description: An entity representing an evaluation job.
    EvaluationJobFilter:
      properties:
        namespace:
          type: string
          title: Namespace
          description: Filter by namespace.
        project:
          type: string
          title: Project
          description: Filter by project.
        created_at:
          allOf:
          - $ref: '#/components/schemas/DateTimeFilter'
          description: Filter by created_at date in ISO format.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        config:
          anyOf:
          - type: string
            title: Reference
            description: A reference to EvaluationConfigFilter.
          - $ref: '#/components/schemas/EvaluationConfigFilter'
          title: Config
          description: Filter by config. It can be string of format {namespace}/{name}
            or entity of type EvaluationConfigFilter.
        target:
          anyOf:
          - type: string
            title: Reference
            description: A reference to EvaluationTargetFilter.
          - $ref: '#/components/schemas/EvaluationTargetFilter'
          title: Target
          description: Filter by target. It can be string of format {namespace}/{name}
            or entity of type EvaluationTargetFilter.
        status:
          type: string
          title: Status
          description: Filter by status of job.
      additionalProperties: false
      type: object
      title: EvaluationJobFilter
    EvaluationJobInput:
      properties:
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        description:
          type: string
          title: Description
          description: The description of the entity.
        config:
          anyOf:
          - type: string
            title: Reference
            description: A reference to EvaluationConfig.
          - $ref: '#/components/schemas/EvaluationConfigInput'
          title: Config
          description: The evaluation configuration.
        target:
          anyOf:
          - type: string
            title: Reference
            description: A reference to EvaluationTarget.
          - $ref: '#/components/schemas/EvaluationTargetInput'
          title: Target
          description: The evaluation target.
        result:
          type: string
          title: Result
          description: The evaluation result URN.
        output_files_url:
          type: string
          title: Output Files Url
          description: The place where the output files, if any, should be written.
        status_details:
          allOf:
          - $ref: '#/components/schemas/EvaluationStatusDetails'
          description: Details about the status of the evaluation.
        status:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          description: The status for the job.
          default: created
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      required:
      - config
      - target
      title: EvaluationJobInput
      description: An entity representing an evaluation job.
    EvaluationJobsPage:
      properties:
        object:
          type: string
          title: Object
          default: list
        data:
          items:
            $ref: '#/components/schemas/EvaluationJob'
          type: array
          title: Data
        pagination:
          allOf:
          - $ref: '#/components/schemas/PaginationData'
          description: Pagination information.
        sort:
          type: string
          title: Sort
          description: The field on which the results are sorted.
        filter:
          allOf:
          - $ref: '#/components/schemas/EvaluationJobFilter'
          description: Filtering information.
      type: object
      required:
      - data
      title: EvaluationJobsPage
    EvaluationParams:
      properties:
        parallelism:
          type: integer
          title: Parallelism
          description: Parallelism to be used for the evaluation job. Typically, this
            represents the maximum number of concurrent requests made to the model.
        request_timeout:
          type: integer
          title: Request Timeout
          description: The timeout to be used for requests made to the model.
        max_retries:
          type: integer
          title: Max Retries
          description: Maximum number of retries for failed requests.
        limit_samples:
          type: integer
          title: Limit Samples
          description: Limit number of evaluation samples
        max_tokens:
          type: integer
          title: Max Tokens
          description: The maximum number of tokens to generate.
        temperature:
          type: number
          title: Temperature
          description: Float value between 0 and 1. temp of 0 indicates greedy decoding,
            where the token with highest prob is chosen. Temperature can't be set
            to 0.0 currently.
        top_p:
          type: number
          title: Top P
          description: Float value between 0 and 1; limits to the top tokens within
            a certain probability. top_p=0 means the model will only consider the
            single most likely token for the next prediction.
        stop:
          anyOf:
          - type: string
          - items:
              type: string
            type: array
          title: Stop
          description: Up to 4 sequences where the API will stop generating further
            tokens.
        extra:
          type: object
          title: Extra
          description: Any other custom parameters.
      type: object
      title: EvaluationParams
      description: Global parameters for an evaluation.
    EvaluationResult:
      properties:
        created_at:
          type: string
          format: date-time
          title: Created At
          description: Timestamp for when the entity was created.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: Timestamp for when the entity was last updated.
        id:
          type: string
          title: Id
          description: The ID of the entity. With the exception of namespaces, this
            is always a semantically-prefixed base58-encoded uuid4 [<prefix>-base58(uuid4())].
        job:
          type: string
          title: Job
          description: The evaluation job associated with this results instance.
        description:
          type: string
          title: Description
          description: The description of the entity.
        files_url:
          type: string
          title: Files Url
          description: The place for the output files, if any.
        tasks:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/TaskResultOutput'
          title: Tasks
          description: The results at the task-level.
        groups:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/GroupResultOutput'
          title: Groups
          description: The results at the group-level.
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      required:
      - job
      title: EvaluationResult
      description: The result of an evaluation job.
    EvaluationResultFilter:
      properties:
        job_id:
          type: string
          title: Job Id
          description: Filter by job id.
      type: object
      title: EvaluationResultFilter
    EvaluationResultInput:
      properties:
        job:
          type: string
          title: Job
          description: The evaluation job associated with this results instance.
        description:
          type: string
          title: Description
          description: The description of the entity.
        files_url:
          type: string
          title: Files Url
          description: The place for the output files, if any.
        tasks:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/TaskResultInput'
          title: Tasks
          description: The results at the task-level.
        groups:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/GroupResultInput'
          title: Groups
          description: The results at the group-level.
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      required:
      - job
      title: EvaluationResultInput
      description: The result of an evaluation job.
    EvaluationResultUpdate:
      properties:
        job:
          type: string
          title: Job
          description: The evaluation job associated with this results instance.
        description:
          type: string
          title: Description
          description: The description of the entity.
        files_url:
          type: string
          title: Files Url
          description: The place for the output files, if any.
        tasks:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/TaskResultInput'
          title: Tasks
          description: The results at the task-level.
        groups:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/GroupResultInput'
          title: Groups
          description: The results at the group-level.
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      title: EvaluationResultUpdate
      description: The result of an evaluation job.
    EvaluationResultsPage:
      properties:
        object:
          type: string
          title: Object
          default: list
        data:
          items:
            $ref: '#/components/schemas/EvaluationResult'
          type: array
          title: Data
        pagination:
          allOf:
          - $ref: '#/components/schemas/PaginationData'
          description: Pagination information.
        sort:
          type: string
          title: Sort
          description: The field on which the results are sorted.
        filter:
          allOf:
          - $ref: '#/components/schemas/EvaluationResultFilter'
          description: Filtering information.
      type: object
      required:
      - data
      title: EvaluationResultsPage
    EvaluationStatusDetails:
      properties:
        message:
          type: string
          title: Message
          description: A message about the status of the evaluation.
        task_status:
          additionalProperties:
            $ref: '#/components/schemas/TaskStatus'
          type: object
          title: Task Status
          description: Information about the status of every task.
        progress:
          type: number
          title: Progress
          description: The progress of the evaluation, between 0.0 and 100.0.
        samples_processed:
          type: integer
          title: Samples Processed
          description: The number of samples from the dataset that have been processed
            for evaluation.
      type: object
      title: EvaluationStatusDetails
      description: Details about the status of the evaluation.
    EvaluationTargetFilter:
      properties:
        namespace:
          type: string
          title: Namespace
          description: Filter by namespace.
        project:
          type: string
          title: Project
          description: Filter by project.
        created_at:
          allOf:
          - $ref: '#/components/schemas/DateTimeFilter'
          description: Filter by created_at date in ISO format.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        type:
          type: string
          title: Type
          description: Filter by type of target.
        model:
          type: string
          title: Model
          description: Filter by target model.
        name:
          type: string
          title: Name
          description: Filter by name of target.
      additionalProperties: false
      type: object
      title: EvaluationTargetFilter
    EvaluationTargetInput:
      properties:
        name:
          type: string
          maxLength: 255
          pattern: ^[\w\-\+.@:]*$
          title: Name
          description: The name of the entity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
          default: ''
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        description:
          type: string
          title: Description
          description: The description of the entity.
        type:
          allOf:
          - $ref: '#/components/schemas/TargetType'
          description: 'The type of the evaluation target, e.g., ''model'', ''retriever'',
            ''rag''. '
          example: model
        cached_outputs:
          allOf:
          - $ref: '#/components/schemas/CachedOutputsData'
          description: The model to be evaluated.
        model:
          anyOf:
          - type: string
            title: Reference
            description: A reference to ModelInputEV.
          - $ref: '#/components/schemas/ModelInputEV'
          title: Model
          description: The model to be evaluated.
        retriever:
          allOf:
          - $ref: '#/components/schemas/RetrieverTargetInput'
          description: Retriever to be evaluated.
        rag:
          allOf:
          - $ref: '#/components/schemas/RAGTargetInput'
          description: RAG to be evaluated.
        rows:
          type: array
          items:
            type: object
          title: Rows
          description: Rows to be evaluated.
        dataset:
          anyOf:
          - type: string
            title: Reference
            description: A reference to DatasetInputEV.
          - $ref: '#/components/schemas/DatasetInputEV'
          title: Dataset
          description: Dataset to be evaluated.
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      required:
      - type
      title: EvaluationTargetInput
      description: An entity representing the target of the evaluation.
    EvaluationTargetOutput:
      properties:
        schema_version:
          type: string
          title: Schema Version
          description: The version of the schema for the object. Internal use only.
          default: '1.0'
        id:
          type: string
          title: Id
          description: The ID of the entity. With the exception of namespaces, this
            is always a semantically-prefixed base58-encoded uuid4 [<prefix>-base58(uuid4())].
        description:
          type: string
          title: Description
          description: The description of the entity.
        type_prefix:
          type: string
          title: Type Prefix
          default: eval-target
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: Timestamp for when the entity was created.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: Timestamp for when the entity was last updated.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
        name:
          type: string
          maxLength: 255
          pattern: ^[\w\-\+.@:]*$
          title: Name
          description: The name of the entity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
          default: ''
        type:
          allOf:
          - $ref: '#/components/schemas/TargetType'
          description: 'The type of the evaluation target, e.g., ''model'', ''retriever'',
            ''rag''. '
          example: model
        cached_outputs:
          allOf:
          - $ref: '#/components/schemas/CachedOutputsData'
          description: The model to be evaluated.
        model:
          anyOf:
          - type: string
            title: Reference
            description: A reference to ModelOutputEV.
          - $ref: '#/components/schemas/ModelOutputEV'
          title: Model
          description: The model to be evaluated.
        retriever:
          allOf:
          - $ref: '#/components/schemas/RetrieverTargetOutput'
          description: Retriever to be evaluated.
        rag:
          allOf:
          - $ref: '#/components/schemas/RAGTargetOutput'
          description: RAG to be evaluated.
        rows:
          type: array
          items:
            type: object
          title: Rows
          description: Rows to be evaluated.
        dataset:
          anyOf:
          - type: string
            title: Reference
            description: A reference to DatasetEV.
          - $ref: '#/components/schemas/DatasetEV'
          title: Dataset
          description: Dataset to be evaluated.
      type: object
      required:
      - type
      title: EvaluationTargetOutput
      description: An entity representing the target of the evaluation.
    EvaluationTargetUpdate:
      properties:
        description:
          type: string
          title: Description
          description: The description of the entity.
        type:
          allOf:
          - $ref: '#/components/schemas/TargetType'
          description: 'The type of the evaluation target, e.g., ''model'', ''retriever'',
            ''rag''. '
          example: model
        cached_outputs:
          allOf:
          - $ref: '#/components/schemas/CachedOutputsData'
          description: The model to be evaluated.
        model:
          anyOf:
          - type: string
            title: Reference
            description: A reference to ModelInputEV.
          - $ref: '#/components/schemas/ModelInputEV'
          title: Model
          description: The model to be evaluated.
        retriever:
          allOf:
          - $ref: '#/components/schemas/RetrieverTargetInput'
          description: Retriever to be evaluated.
        rag:
          allOf:
          - $ref: '#/components/schemas/RAGTargetInput'
          description: RAG to be evaluated.
        rows:
          type: array
          items:
            type: object
          title: Rows
          description: Rows to be evaluated.
        dataset:
          anyOf:
          - type: string
            title: Reference
            description: A reference to DatasetEV.
          - $ref: '#/components/schemas/DatasetEV'
          title: Dataset
          description: Dataset to be evaluated.
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      title: EvaluationTargetUpdate
      description: An entity representing the target of the evaluation.
    EvaluationTargetsPage:
      properties:
        object:
          type: string
          title: Object
          default: list
        data:
          items:
            $ref: '#/components/schemas/EvaluationTargetOutput'
          type: array
          title: Data
        pagination:
          allOf:
          - $ref: '#/components/schemas/PaginationData'
          description: Pagination information.
        sort:
          type: string
          title: Sort
          description: The field on which the results are sorted.
        filter:
          allOf:
          - $ref: '#/components/schemas/EvaluationTargetFilter'
          description: Filtering information.
      type: object
      required:
      - data
      title: EvaluationTargetsPage
    ExecutedAction:
      properties:
        action_name:
          type: string
          title: Action Name
          description: The name of the action that was executed.
        action_params:
          type: object
          title: Action Params
          description: The parameters for the action.
        return_value:
          title: Return Value
          description: The value returned by the action.
        llm_calls:
          items:
            $ref: '#/components/schemas/LLMCallInfo'
          type: array
          title: Llm Calls
          description: Information about the LLM calls made by the action.
        started_at:
          type: number
          title: Started At
          description: Timestamp for when the action started.
        finished_at:
          type: number
          title: Finished At
          description: Timestamp for when the action finished.
        duration:
          type: number
          title: Duration
          description: How long the action took to execute, in seconds.
      type: object
      required:
      - action_name
      title: ExecutedAction
      description: Information about an action that was executed.
    ExpressionColumn:
      properties:
        name:
          type: string
          title: Name
        expr:
          type: string
          title: Expr
        dtype:
          allOf:
          - $ref: '#/components/schemas/Dtype'
          title: Dtype
          default: str
        drop:
          type: boolean
          title: Drop
          description: If true, remove this column from the final dataset before evaluation.
          default: false
      type: object
      required:
      - name
      - expr
      title: ExpressionColumn
      description: "Data Designer column for generated data based on jinja2 expressions.\n\
        \nArgs:\n    name: Name of the column.\n    expr: Expression to use for generation.\n\
        \    dtype: Data type of the column. Can be \"str\" (default), \"int\",\n\
        \        \"float\", or \"bool\"."
    ExternalEndpointConfig:
      properties:
        host_url:
          type: string
          minLength: 1
          format: uri
          title: Host Url
          description: The external host URL.
        api_key:
          type: string
          title: API Key
          description: The API key that should be used to access the endpoint.
        enabled_models:
          type: array
          items:
            type: string
          title: The list of enabled models for the endpoint.
      type: object
      required:
      - host_url
      title: ExternalEndpointConfig
      description: Configuration for an external endpoint.
    FactCheckingRailConfig:
      properties:
        parameters:
          type: object
          title: Parameters
        fallback_to_self_check:
          type: boolean
          title: Fallback To Self Check
          description: Whether to fall back to self-check if another method fail.
          default: false
      type: object
      title: FactCheckingRailConfig
      description: Configuration data for the fact-checking rail.
    FiddlerGuardrails:
      properties:
        fiddler_endpoint:
          type: string
          title: Fiddler Endpoint
          description: The global endpoint for Fiddler Guardrails requests.
          default: http://localhost:8080/process/text
        safety_threshold:
          type: number
          title: Safety Threshold
          description: Fiddler Guardrails safety detection threshold.
          default: 0.1
        faithfulness_threshold:
          type: number
          title: Faithfulness Threshold
          description: Fiddler Guardrails faithfulness detection threshold.
          default: 0.05
      type: object
      title: FiddlerGuardrails
      description: Configuration for Fiddler Guardrails.
    FinetuningType:
      type: string
      enum:
      - lora
      - all_weights
      title: FinetuningType
    FinetuningTypeDE:
      type: string
      enum:
      - p_tuning
      - lora
      - all_weights
      title: FinetuningTypeDE
    Function:
      properties:
        arguments:
          type: string
          title: Arguments
          description: The arguments to call the function with, as generated by the
            model in JSON format.
        name:
          type: string
          title: Name
          description: The name of the function to call.
      additionalProperties: false
      type: object
      required:
      - arguments
      - name
      title: Function
    FunctionCall:
      properties:
        arguments:
          type: string
          title: Arguments
          description: The arguments to call the function with, as generated by the
            model in JSON format.
        name:
          type: string
          title: Name
          description: The name of the function to call.
      additionalProperties: false
      type: object
      required:
      - arguments
      - name
      title: FunctionCall
    FunctionParameter:
      properties:
        type:
          type: string
          title: Type
          description: The type of the parameter provided.
        description:
          type: string
          title: Description
          description: The description of this parameter.
      additionalProperties: true
      type: object
      required:
      - type
      title: FunctionParameter
    FunctionParameters:
      properties:
        type:
          type: string
          const: object
          title: Type
          description: Type of parameters - currently only 'object' is supported.
          default: object
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FunctionParameter'
          title: Properties
          description: Dictionary of parameter names to their type definitions.
        required:
          items:
            type: string
          type: array
          title: Required
          description: List of required parameter names.
        additionalProperties:
          type: boolean
          title: Additionalproperties
          description: Additional properties are allowed.
          default: true
      additionalProperties: true
      type: object
      title: FunctionParameters
    FunctionSchemaInput:
      properties:
        name:
          type: string
          title: Name
          description: Name of the function.
        description:
          type: string
          title: Description
          description: Description of what the function does.
        parameters:
          allOf:
          - $ref: '#/components/schemas/FunctionParameters'
          description: Parameters schema for the function.
        strict:
          type: boolean
          title: Strict
          description: Whether the verification is in strict mode.
          default: false
      additionalProperties: false
      type: object
      required:
      - name
      - description
      - parameters
      title: FunctionSchemaInput
    FunctionSchemaOutput:
      properties:
        name:
          type: string
          title: Name
          description: Name of the function.
        description:
          type: string
          title: Description
          description: Description of what the function does.
        parameters:
          allOf:
          - $ref: '#/components/schemas/FunctionParameters'
          description: Parameters schema for the function.
        strict:
          type: boolean
          title: Strict
          description: Whether the verification is in strict mode.
          default: false
      additionalProperties: false
      type: object
      required:
      - name
      - description
      - parameters
      title: FunctionSchemaOutput
    GaussianSamplerParams:
      properties:
        mean:
          type: number
          title: Mean
          description: Mean of the Gaussian distribution
        stddev:
          type: number
          title: Stddev
          description: Standard deviation of the Gaussian distribution
      type: object
      required:
      - mean
      - stddev
      title: GaussianSamplerParams
    GenerationLog:
      properties:
        activated_rails:
          items:
            $ref: '#/components/schemas/ActivatedRail'
          type: array
          title: Activated Rails
          description: The list of rails that were activated during generation.
        stats:
          allOf:
          - $ref: '#/components/schemas/GenerationStats'
          description: General stats about the generation process.
        llm_calls:
          type: array
          items:
            $ref: '#/components/schemas/LLMCallInfo'
          title: Llm Calls
          description: 'The list of LLM calls that have been made to fulfill the generation
            request. '
        internal_events:
          type: array
          items:
            type: object
          title: Internal Events
          description: The complete sequence of internal events generated.
        colang_history:
          type: string
          title: Colang History
          description: The Colang history associated with the generation.
      type: object
      title: GenerationLog
      description: Contains additional logging information associated with a generation
        call.
    GenerationLogOptions:
      properties:
        activated_rails:
          type: boolean
          title: Activated Rails
          description: Include detailed information about the rails that were activated
            during generation.
          default: false
        llm_calls:
          type: boolean
          title: Llm Calls
          description: 'Include information about all the LLM calls that were made.
            This includes: prompt, completion, token usage, raw response, etc.'
          default: false
        internal_events:
          type: boolean
          title: Internal Events
          description: Include the array of internal generated events.
          default: false
        colang_history:
          type: boolean
          title: Colang History
          description: Include the history of the conversation in Colang format.
          default: false
      type: object
      title: GenerationLogOptions
      description: Options for what should be included in the generation log.
    GenerationOptions:
      properties:
        rails:
          allOf:
          - $ref: '#/components/schemas/GenerationRailsOptions'
          description: Options for which rails should be applied for the generation.
            By default, all rails are enabled.
        llm_params:
          type: object
          title: Llm Params
          description: Additional parameters that should be used for the LLM call
        llm_output:
          type: boolean
          title: Llm Output
          description: Whether the response should also include any custom LLM output.
          default: false
        output_vars:
          anyOf:
          - type: boolean
          - items:
              type: string
            type: array
          title: Output Vars
          description: Whether additional context information should be returned.
            When True is specified, the whole context is returned. Otherwise, a list
            of key names can be specified.
        log:
          allOf:
          - $ref: '#/components/schemas/GenerationLogOptions'
          description: 'Options about what to include in the log. By default, nothing
            is included. '
      type: object
      title: GenerationOptions
      description: 'A set of options that should be applied during a generation.


        The GenerationOptions control various things such as what rails are enabled,

        additional parameters for the main LLM, whether the rails should be enforced
        or

        ran in parallel, what to be included in the generation log, etc.'
    GenerationRailsOptions:
      properties:
        input:
          anyOf:
          - type: boolean
          - items:
              type: string
            type: array
          title: Input
          description: Whether the input rails are enabled or not. If a list of names
            is specified, then only the specified input rails will be applied.
          default: true
        output:
          anyOf:
          - type: boolean
          - items:
              type: string
            type: array
          title: Output
          description: Whether the output rails are enabled or not. If a list of names
            is specified, then only the specified output rails will be applied.
          default: true
        retrieval:
          anyOf:
          - type: boolean
          - items:
              type: string
            type: array
          title: Retrieval
          description: Whether the retrieval rails are enabled or not. If a list of
            names is specified, then only the specified retrieval rails will be applied.
          default: true
        dialog:
          type: boolean
          title: Dialog
          description: Whether the dialog rails are enabled or not.
          default: true
      type: object
      title: GenerationRailsOptions
      description: Options for what rails should be used during the generation.
    GenerationStats:
      properties:
        input_rails_duration:
          type: number
          title: Input Rails Duration
          description: The time in seconds spent in processing the input rails.
        dialog_rails_duration:
          type: number
          title: Dialog Rails Duration
          description: The time in seconds spent in processing the dialog rails.
        generation_rails_duration:
          type: number
          title: Generation Rails Duration
          description: The time in seconds spent in generation rails.
        output_rails_duration:
          type: number
          title: Output Rails Duration
          description: The time in seconds spent in processing the output rails.
        total_duration:
          type: number
          title: Total Duration
          description: The total time in seconds.
        llm_calls_duration:
          type: number
          title: Llm Calls Duration
          description: The time in seconds spent in LLM calls.
          default: 0
        llm_calls_count:
          type: integer
          title: Llm Calls Count
          description: The number of LLM calls in total.
          default: 0
        llm_calls_total_prompt_tokens:
          type: integer
          title: Llm Calls Total Prompt Tokens
          description: The total number of prompt tokens.
          default: 0
        llm_calls_total_completion_tokens:
          type: integer
          title: Llm Calls Total Completion Tokens
          description: The total number of completion tokens.
          default: 0
        llm_calls_total_tokens:
          type: integer
          title: Llm Calls Total Tokens
          description: The total number of tokens.
          default: 0
      type: object
      title: GenerationStats
      description: General stats about the generation.
    GenericSortField:
      type: string
      enum:
      - created_at
      - -created_at
      title: GenericSortField
    GroupConfigInput:
      properties:
        tasks:
          type: array
          items:
            type: string
          title: Tasks
          description: The names of the tasks that are part of the group.
        groups:
          type: object
          title: Groups
          description: Subgroups for the current group.
        metrics:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MetricConfig'
          title: Metrics
          description: The metrics that should be computed for the group.
      type: object
      title: GroupConfigInput
      description: Configuration object for a group which is part of an evaluation.
    GroupConfigOutput:
      properties:
        tasks:
          type: array
          items:
            type: string
          title: Tasks
          description: The names of the tasks that are part of the group.
        groups:
          type: object
          title: Groups
          description: Subgroups for the current group.
        metrics:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MetricConfig'
          title: Metrics
          description: The metrics that should be computed for the group.
      type: object
      title: GroupConfigOutput
      description: Configuration object for a group which is part of an evaluation.
    GroupResultInput:
      properties:
        groups:
          type: object
          title: Groups
          description: The results for the subgroups.
        metrics:
          additionalProperties:
            $ref: '#/components/schemas/MetricResultInput'
          type: object
          title: Metrics
          description: The value for all the metrics computed for the group.
      type: object
      title: GroupResultInput
      description: The evaluation results for a group.
    GroupResultOutput:
      properties:
        groups:
          type: object
          title: Groups
          description: The results for the subgroups.
        metrics:
          additionalProperties:
            $ref: '#/components/schemas/MetricResultOutput'
          type: object
          title: Metrics
          description: The value for all the metrics computed for the group.
      type: object
      title: GroupResultOutput
      description: The evaluation results for a group.
    GuardrailChatCompletionRequest:
      properties:
        model:
          type: string
          title: Model
          description: The model to use for completion. Must be one of the available
            models.
        response_format:
          type: object
          additionalProperties:
            type: string
          title: Response Format
          description: Format of the response, can be 'json_object' to force the model
            to output valid JSON.
        system_fingerprint:
          type: string
          title: System Fingerprint
          description: Represents the backend configuration that the model runs with.
            Used with seed for determinism.
        max_tokens:
          type: integer
          title: Max Tokens
          description: The maximum number of tokens that can be generated in the chat
            completion.
        n:
          type: integer
          title: N
          description: How many chat completion choices to generate for each input
            message.
        stream:
          type: boolean
          title: Stream
          description: If set, partial message deltas will be sent, like in ChatGPT.
          default: false
        temperature:
          type: number
          title: Temperature
          description: What sampling temperature to use, between 0 and 2.
        top_p:
          type: number
          title: Top P
          description: An alternative to sampling with temperature, called nucleus
            sampling.
        stop:
          anyOf:
          - items:
              type: string
            type: array
          - type: string
          title: Stop
          description: Up to 4 sequences where the API will stop generating further
            tokens.
        frequency_penalty:
          type: number
          title: Frequency Penalty
          description: Positive values penalize new tokens based on their existing
            frequency in the text.
        presence_penalty:
          type: number
          title: Presence Penalty
          description: Positive values penalize new tokens based on whether they appear
            in the text so far.
        function_call:
          anyOf:
          - type: string
          - type: object
          title: Function Call
          description: 'Not Supported. Deprecated in favor of tool_choice. ''none''
            means the model will not call a function and instead generates a message.
            ''auto'' means the model can pick between generating a message or calling
            a function. Specifying a particular function via {''name'': ''my_function''}
            forces the model to call that function.'
        best_of:
          type: integer
          title: Best Of
          description: Not supported. Generates best_of completions server-side and
            returns the "best" (the one with the highest log probability per token).
            Results cannot be streamed. When used with n, best_of controls the number
            of candidate completions and n specifies how many to return - best_of
            must be greater than n.
        echo:
          type: boolean
          title: Echo
          description: Not supported. If `echo` is true, the response will include
            the prompt and optionally its tokens ids and logprobs.
        suffix:
          type: string
          title: Suffix
          description: Not supported. If echo is set, the prompt is returned with
            the completion.
        seed:
          type: integer
          title: Seed
          description: If specified, attempts to sample deterministically.
        logit_bias:
          type: object
          additionalProperties:
            type: number
          title: Logit Bias
          description: Not Supported. Modify the likelihood of specified tokens appearing
            in the completion.
        top_logprobs:
          type: integer
          title: Top Logprobs
          description: The number of most likely tokens to return at each token position.
        logprobs:
          type: boolean
          title: Logprobs
          description: Whether to return log probabilities of the output tokens or
            not. If true, returns the log probabilities of each output token returned
            in the content of message
        tool_choice:
          anyOf:
          - type: string
          - type: object
          title: Tool Choice
          description: Not Supported. Favored over function_call. Controls which (if
            any) function is called by the model.
        user:
          type: string
          title: User
          description: Not Supported. A unique identifier representing your end-user.
        tools:
          type: array
          items:
            type: string
          title: Tools
          description: A list of tools the model may call.
        ignore_eos:
          type: boolean
          title: Ignore Eos
          description: Ignore the eos when running
        messages:
          items:
            anyOf:
            - $ref: '#/components/schemas/ChatCompletionSystemMessageParam'
            - $ref: '#/components/schemas/ChatCompletionUserMessageParam'
            - $ref: '#/components/schemas/ChatCompletionAssistantMessageParam'
            - $ref: '#/components/schemas/ChatCompletionToolMessageParam'
            - $ref: '#/components/schemas/ChatCompletionFunctionMessageParam'
          type: array
          title: Messages
          description: A list of messages comprising the conversation so far
        vision:
          type: boolean
          title: Vision
          description: Whether this is a vision-capable request with image inputs.
        guardrails:
          allOf:
          - $ref: '#/components/schemas/GuardrailsDataInput'
          description: Guardrails specific options for the request.
      additionalProperties: true
      type: object
      required:
      - model
      - messages
      title: GuardrailChatCompletionRequest
      description: Guardrails OpenAI compatible interface
    GuardrailChatCompletionResponse:
      properties:
        id:
          type: string
          title: Id
        object:
          type: string
          title: Object
          default: chat.completion
        created:
          type: integer
          title: Created
        model:
          type: string
          title: Model
        choices:
          items:
            $ref: '#/components/schemas/ChatCompletionResponseChoice'
          type: array
          title: Choices
        usage:
          $ref: '#/components/schemas/UsageInfo'
        system_fingerprint:
          type: string
          title: System Fingerprint
          description: Represents the backend configuration that the model runs with.
            Used with seed for determinism.
        guardrails_data:
          allOf:
          - $ref: '#/components/schemas/GuardrailsDataOutput'
          description: The guardrails specific output data.
      type: object
      required:
      - model
      - choices
      - usage
      title: GuardrailChatCompletionResponse
      description: A class to represent the response from the Guardrails API that
        is compatible with the OpenAI API.
    GuardrailChatCompletionStreamResponse:
      properties:
        id:
          type: string
          title: Id
        object:
          type: string
          title: Object
          default: chat.completion.chunk
        created:
          type: integer
          title: Created
        model:
          type: string
          title: Model
        choices:
          items:
            $ref: '#/components/schemas/ChatCompletionResponseStreamChoice'
          type: array
          title: Choices
        system_fingerprint:
          type: string
          title: System Fingerprint
          description: Represents the backend configuration that the model runs with.
            Used with seed for determinism.
      type: object
      required:
      - model
      - choices
      title: GuardrailChatCompletionStreamResponse
      description: A class to represent the response from the Guardrails API that
        is compatible with the OpenAI API.
    GuardrailCheckRequest:
      properties:
        model:
          type: string
          title: Model
          description: The model to use for completion. Must be one of the available
            models.
        response_format:
          type: object
          additionalProperties:
            type: string
          title: Response Format
          description: Format of the response, can be 'json_object' to force the model
            to output valid JSON.
        system_fingerprint:
          type: string
          title: System Fingerprint
          description: Represents the backend configuration that the model runs with.
            Used with seed for determinism.
        max_tokens:
          type: integer
          title: Max Tokens
          description: The maximum number of tokens that can be generated in the chat
            completion.
        n:
          type: integer
          title: N
          description: How many chat completion choices to generate for each input
            message.
        stream:
          type: boolean
          title: Stream
          description: If set, partial message deltas will be sent, like in ChatGPT.
          default: false
        temperature:
          type: number
          title: Temperature
          description: What sampling temperature to use, between 0 and 2.
        top_p:
          type: number
          title: Top P
          description: An alternative to sampling with temperature, called nucleus
            sampling.
        stop:
          anyOf:
          - items:
              type: string
            type: array
          - type: string
          title: Stop
          description: Up to 4 sequences where the API will stop generating further
            tokens.
        frequency_penalty:
          type: number
          title: Frequency Penalty
          description: Positive values penalize new tokens based on their existing
            frequency in the text.
        presence_penalty:
          type: number
          title: Presence Penalty
          description: Positive values penalize new tokens based on whether they appear
            in the text so far.
        function_call:
          anyOf:
          - type: string
          - type: object
          title: Function Call
          description: 'Not Supported. Deprecated in favor of tool_choice. ''none''
            means the model will not call a function and instead generates a message.
            ''auto'' means the model can pick between generating a message or calling
            a function. Specifying a particular function via {''name'': ''my_function''}
            forces the model to call that function.'
        best_of:
          type: integer
          title: Best Of
          description: Not supported. Generates best_of completions server-side and
            returns the "best" (the one with the highest log probability per token).
            Results cannot be streamed. When used with n, best_of controls the number
            of candidate completions and n specifies how many to return - best_of
            must be greater than n.
        echo:
          type: boolean
          title: Echo
          description: Not supported. If `echo` is true, the response will include
            the prompt and optionally its tokens ids and logprobs.
        suffix:
          type: string
          title: Suffix
          description: Not supported. If echo is set, the prompt is returned with
            the completion.
        seed:
          type: integer
          title: Seed
          description: If specified, attempts to sample deterministically.
        logit_bias:
          type: object
          additionalProperties:
            type: number
          title: Logit Bias
          description: Not Supported. Modify the likelihood of specified tokens appearing
            in the completion.
        top_logprobs:
          type: integer
          title: Top Logprobs
          description: The number of most likely tokens to return at each token position.
        logprobs:
          type: boolean
          title: Logprobs
          description: Whether to return log probabilities of the output tokens or
            not. If true, returns the log probabilities of each output token returned
            in the content of message
        tool_choice:
          anyOf:
          - type: string
          - type: object
          title: Tool Choice
          description: Not Supported. Favored over function_call. Controls which (if
            any) function is called by the model.
        user:
          type: string
          title: User
          description: Not Supported. A unique identifier representing your end-user.
        tools:
          type: array
          items:
            type: string
          title: Tools
          description: A list of tools the model may call.
        ignore_eos:
          type: boolean
          title: Ignore Eos
          description: Ignore the eos when running
        messages:
          items:
            anyOf:
            - $ref: '#/components/schemas/ChatCompletionSystemMessageParam'
            - $ref: '#/components/schemas/ChatCompletionUserMessageParam'
            - $ref: '#/components/schemas/ChatCompletionAssistantMessageParam'
            - $ref: '#/components/schemas/ChatCompletionToolMessageParam'
            - $ref: '#/components/schemas/ChatCompletionFunctionMessageParam'
          type: array
          title: Messages
          description: A list of messages comprising the conversation so far
        vision:
          type: boolean
          title: Vision
          description: Whether this is a vision-capable request with image inputs.
        guardrails:
          allOf:
          - $ref: '#/components/schemas/GuardrailsDataInput'
          description: Guardrails specific options for the request.
      additionalProperties: true
      type: object
      required:
      - model
      - messages
      title: GuardrailCheckRequest
      description: Currently only inherits, in the future we might add new fields.
    GuardrailCheckResponse:
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/StatusEnum'
          description: Overall status indicating if all rails passed or if any failed.
        rails_status:
          additionalProperties:
            $ref: '#/components/schemas/RailStatus'
          type: object
          title: Rails Status
          description: Dictionary mapping each rail to its status.
        guardrails_data:
          allOf:
          - $ref: '#/components/schemas/GuardrailsDataOutput'
          description: Additional data related to guardrails.
      type: object
      required:
      - status
      - rails_status
      title: GuardrailCheckResponse
    GuardrailCompletionRequest:
      properties:
        model:
          type: string
          title: Model
          description: The model to use for completion. Must be one of the available
            models.
        response_format:
          type: object
          additionalProperties:
            type: string
          title: Response Format
          description: Format of the response, can be 'json_object' to force the model
            to output valid JSON.
        system_fingerprint:
          type: string
          title: System Fingerprint
          description: Represents the backend configuration that the model runs with.
            Used with seed for determinism.
        max_tokens:
          type: integer
          title: Max Tokens
          description: The maximum number of tokens that can be generated in the chat
            completion.
        n:
          type: integer
          title: N
          description: How many chat completion choices to generate for each input
            message.
        stream:
          type: boolean
          title: Stream
          description: If set, partial message deltas will be sent, like in ChatGPT.
          default: false
        temperature:
          type: number
          title: Temperature
          description: What sampling temperature to use, between 0 and 2.
        top_p:
          type: number
          title: Top P
          description: An alternative to sampling with temperature, called nucleus
            sampling.
        stop:
          anyOf:
          - items:
              type: string
            type: array
          - type: string
          title: Stop
          description: Up to 4 sequences where the API will stop generating further
            tokens.
        frequency_penalty:
          type: number
          title: Frequency Penalty
          description: Positive values penalize new tokens based on their existing
            frequency in the text.
        presence_penalty:
          type: number
          title: Presence Penalty
          description: Positive values penalize new tokens based on whether they appear
            in the text so far.
        function_call:
          anyOf:
          - type: string
          - type: object
          title: Function Call
          description: 'Not Supported. Deprecated in favor of tool_choice. ''none''
            means the model will not call a function and instead generates a message.
            ''auto'' means the model can pick between generating a message or calling
            a function. Specifying a particular function via {''name'': ''my_function''}
            forces the model to call that function.'
        best_of:
          type: integer
          title: Best Of
          description: Not supported. Generates best_of completions server-side and
            returns the "best" (the one with the highest log probability per token).
            Results cannot be streamed. When used with n, best_of controls the number
            of candidate completions and n specifies how many to return - best_of
            must be greater than n.
        echo:
          type: boolean
          title: Echo
          description: Not supported. If `echo` is true, the response will include
            the prompt and optionally its tokens ids and logprobs.
        suffix:
          type: string
          title: Suffix
          description: Not supported. If echo is set, the prompt is returned with
            the completion.
        seed:
          type: integer
          title: Seed
          description: If specified, attempts to sample deterministically.
        logit_bias:
          type: object
          additionalProperties:
            type: number
          title: Logit Bias
          description: Not Supported. Modify the likelihood of specified tokens appearing
            in the completion.
        top_logprobs:
          type: integer
          title: Top Logprobs
          description: The number of most likely tokens to return at each token position.
        logprobs:
          type: boolean
          title: Logprobs
          description: Whether to return log probabilities of the output tokens or
            not. If true, returns the log probabilities of each output token returned
            in the content of message
        tool_choice:
          anyOf:
          - type: string
          - type: object
          title: Tool Choice
          description: Not Supported. Favored over function_call. Controls which (if
            any) function is called by the model.
        user:
          type: string
          title: User
          description: Not Supported. A unique identifier representing your end-user.
        tools:
          type: array
          items:
            type: string
          title: Tools
          description: A list of tools the model may call.
        ignore_eos:
          type: boolean
          title: Ignore Eos
          description: Ignore the eos when running
        prompt:
          anyOf:
          - items:
              type: integer
            type: array
          - items:
              items:
                type: integer
              type: array
            type: array
          - type: string
          - items:
              type: string
            type: array
          minLength: 1
          title: Prompt
          description: User prompt or list of token ids.
          default: Once upon a time
        guardrails:
          allOf:
          - $ref: '#/components/schemas/GuardrailsDataInput'
          description: Guardrails specific options for the request.
      additionalProperties: true
      type: object
      required:
      - model
      title: GuardrailCompletionRequest
      description: Guardrails OpenAI compatible interface
    GuardrailCompletionResponse:
      properties:
        id:
          type: string
          title: Id
        object:
          type: string
          title: Object
          default: text_completion
        created:
          type: integer
          title: Created
        model:
          type: string
          title: Model
        choices:
          items:
            $ref: '#/components/schemas/CompletionResponseChoice'
          type: array
          title: Choices
        usage:
          $ref: '#/components/schemas/UsageInfo'
        guardrails_data:
          allOf:
          - $ref: '#/components/schemas/GuardrailsDataOutput'
          description: The guardrails specific output data.
      type: object
      required:
      - model
      - choices
      - usage
      title: GuardrailCompletionResponse
      description: A class to represent the response from the Guardrails API that
        is compatible with the OpenAI API.
    GuardrailCompletionStreamResponse:
      properties:
        id:
          type: string
          title: Id
        object:
          type: string
          title: Object
          default: text_completion
        created:
          type: integer
          title: Created
        model:
          type: string
          title: Model
        choices:
          items:
            $ref: '#/components/schemas/CompletionResponseStreamChoice'
          type: array
          title: Choices
        usage:
          $ref: '#/components/schemas/UsageInfo'
      type: object
      required:
      - model
      - choices
      title: GuardrailCompletionStreamResponse
      description: A class to represent the response from the Guardrails API that
        is compatible with the OpenAI API.
    GuardrailConfig:
      properties:
        created_at:
          type: string
          format: date-time
          title: Created At
          description: Timestamp for when the entity was created.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: Timestamp for when the entity was last updated.
        name:
          type: string
          maxLength: 255
          pattern: ^[\w\-\+.@:]*$
          title: Name
          description: The name of the entity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
          default: ''
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        description:
          type: string
          title: Description
          description: The description of the entity.
        data:
          allOf:
          - $ref: '#/components/schemas/ConfigDataOutput'
          type: object
          description: Guardrail configuration data
        files_url:
          type: string
          title: Files Url
          description: The location where the artifact files are stored.
        schema_version:
          type: string
          title: Schema Version
          description: The version of the schema for the object. Internal use only.
          default: '1.0'
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      title: GuardrailConfig
      description: A guardrail configuration
    GuardrailConfigDE:
      properties:
        created_at:
          type: string
          format: date-time
          title: Created At
          description: Timestamp for when the entity was created.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: Timestamp for when the entity was last updated.
        name:
          type: string
          title: Name
          description: The name of the identity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
        namespace:
          type: string
          title: Namespace
          description: The if of the namespace of the entity. This can be missing
            for namespace entities or in deployments that don't use namespaces.
        description:
          type: string
          title: Description
          description: The description of the entity.
        files_url:
          type: string
          minLength: 1
          format: uri
          title: Files Url
          description: 'The location where the artifact files are stored. '
        schema_version:
          type: string
          title: Schema Version
          description: The version of the schema for the object. Internal use only.
          default: '1.0'
        project:
          type: string
          title: Project
          description: The id of project associated with this entity.
        custom_fields:
          type: object
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      required:
      - files_url
      title: GuardrailConfigDE
      description: A guardrail configuration
    GuardrailConfigFilter:
      properties: {}
      type: object
      title: GuardrailConfigFilter
    GuardrailConfigInput:
      properties:
        schema_version:
          type: string
          title: Schema Version
          description: The version of the schema for the object. Internal use only.
          default: '1.0'
        id:
          type: string
          title: Id
          description: The ID of the entity. With the exception of namespaces, this
            is always a semantically-prefixed base58-encoded uuid4 [<prefix>-base58(uuid4())].
        description:
          type: string
          title: Description
          description: The description of the entity.
        type_prefix:
          type: string
          title: Type Prefix
          default: guardrail
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: Timestamp for when the entity was created.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: Timestamp for when the entity was last updated.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
        name:
          type: string
          maxLength: 255
          pattern: ^[\w\-\+.@:]*$
          title: Name
          description: The name of the entity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
          default: ''
        version_id:
          type: string
          title: Version Id
          description: A unique, immutable id for the version. This is similar to
            the commit hash.
          default: main
        version_tags:
          items:
            $ref: '#/components/schemas/VersionTag'
          type: array
          title: Version Tags
          description: The list of version tags associated with this entity.
        data:
          allOf:
          - $ref: '#/components/schemas/ConfigDataInput'
          type: object
          description: Guardrail configuration data
        files_url:
          type: string
          title: Files Url
          description: The location where the artifact files are stored.
      type: object
      title: GuardrailConfigInput
      description: A guardrail configuration
    GuardrailConfigInputDE:
      properties:
        name:
          type: string
          title: Name
          description: The name of the identity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
        namespace:
          type: string
          title: Namespace
          description: The if of the namespace of the entity. This can be missing
            for namespace entities or in deployments that don't use namespaces.
        description:
          type: string
          title: Description
          description: The description of the entity.
        files_url:
          type: string
          minLength: 1
          format: uri
          title: Files Url
          description: 'The location where the artifact files are stored. '
        project:
          type: string
          title: Project
          description: The id of project associated with this entity.
        custom_fields:
          type: object
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      required:
      - files_url
      title: GuardrailConfigInputDE
      description: A guardrail configuration
    GuardrailConfigInputGU:
      properties:
        name:
          type: string
          maxLength: 255
          pattern: ^[\w\-\+.@:]*$
          title: Name
          description: The name of the entity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
          default: ''
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        description:
          type: string
          title: Description
          description: The description of the entity.
        data:
          allOf:
          - $ref: '#/components/schemas/ConfigDataInput'
          type: object
          description: Guardrail configuration data
        files_url:
          type: string
          title: Files Url
          description: The location where the artifact files are stored.
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      title: GuardrailConfigInputGU
      description: A guardrail configuration
    GuardrailConfigUpdate:
      properties:
        description:
          type: string
          title: Description
          description: The description of the entity.
        data:
          allOf:
          - $ref: '#/components/schemas/ConfigDataInput'
          type: object
          description: Guardrail configuration data
        files_url:
          type: string
          title: Files Url
          description: The location where the artifact files are stored.
        schema_version:
          type: string
          title: Schema Version
          description: The version of the schema for the object. Internal use only.
          default: '1.0'
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      title: GuardrailConfigUpdate
      description: A guardrail configuration
    GuardrailConfigsPage:
      properties:
        object:
          type: string
          title: Object
          default: list
        data:
          items:
            $ref: '#/components/schemas/GuardrailConfig'
          type: array
          title: Data
        pagination:
          allOf:
          - $ref: '#/components/schemas/PaginationData'
          description: Pagination information.
        sort:
          type: string
          title: Sort
          description: The field on which the results are sorted.
        filter:
          allOf:
          - $ref: '#/components/schemas/GuardrailConfigFilter'
          description: Filtering information.
      type: object
      required:
      - data
      title: GuardrailConfigsPage
    GuardrailsDataInput:
      properties:
        config:
          anyOf:
          - type: string
            title: Reference
            description: A reference to ConfigData.
          - $ref: '#/components/schemas/ConfigDataInput'
          title: Config
          description: The id of the configuration or its dict representation to be
            used.
          default: default
        config_id:
          type: string
          title: Config Id
          description: The id of the configuration to be used.
          default: default
        config_ids:
          type: array
          items:
            type: string
          title: Config Ids
          description: The list of configuration ids to be used. If set, the configurations
            will be combined.
        return_choice:
          type: boolean
          title: Return Choice
          description: If set, guardrails data will be included as a JSON in the choices
            array.
          default: false
        context:
          type: object
          title: Context
          description: Additional context data to be added to the conversation.
        stream:
          type: boolean
          title: Stream
          description: 'If set, partial message deltas will be sent, like in ChatGPT.
            Tokens will be sent as data-only server-sent events as they become available,
            with the stream terminated by a data: [DONE] message.'
          default: false
        options:
          allOf:
          - $ref: '#/components/schemas/GenerationOptions'
          description: Additional options for controlling the generation.
        state:
          type: object
          title: State
          description: A state object that should be used to continue the interaction.
      type: object
      title: GuardrailsDataInput
    GuardrailsDataOutput:
      properties:
        llm_output:
          type: object
          title: Llm Output
          description: Contains any additional output coming from the LLM.
        config_ids:
          type: array
          items:
            type: string
          title: Config Ids
          description: The list of configuration ids that were used.
        output_data:
          type: object
          title: Output Data
          description: The output data, i.e. a dict with the values corresponding
            to the `output_vars`.
        log:
          allOf:
          - $ref: '#/components/schemas/GenerationLog'
          description: Additional logging information.
      type: object
      title: GuardrailsDataOutput
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    Hyperparameters:
      properties:
        finetuning_type:
          allOf:
          - $ref: '#/components/schemas/FinetuningType'
          description: The finetuning type for the customization job.
        training_type:
          allOf:
          - $ref: '#/components/schemas/TrainingType'
          description: The training type for the customization job.
          default: sft
        batch_size:
          type: integer
          title: Batch Size
          description: Batch size is the number of training samples used to train
            a single forward and backward pass.
          default: 8
        epochs:
          type: integer
          title: Epochs
          description: Epochs is the number of complete passes through the training
            dataset.
          default: 50
        learning_rate:
          type: number
          title: Learning Rate
          description: How much to adjust the model parameters in response to the
            loss gradient
          default: 0.0001
        log_every_n_steps:
          type: integer
          title: Log Every N Steps
          description: Control logging frequency for metrics tracking. It may slow
            down training to log on every single batch. By default, logs every 10
            training steps.
        val_check_interval:
          type: number
          title: Val Check Interval
          description: Control how often to check the validation set with after a
            fixed number of training batches or pass a float in the range [0.1, 1.0]
            to check after a fraction of the training epoch. Note that Early Stopping
            monitors the validation loss and stops the training when no improvement
            is observed after 10 epochs with a minimum delta of 0.001. If val_check_interval
            is greater than the number of training batches, validation will run every
            epoch.
        weight_decay:
          type: number
          title: Weight Decay
          description: An additional penalty term added to the gradient descent to
            keep weights low and mitigate overfitting.
        sft:
          allOf:
          - $ref: '#/components/schemas/SFTParameters'
          description: SFT specific parameters
        dpo:
          allOf:
          - $ref: '#/components/schemas/DPOParameters'
          description: DPO specific parameters
        lora:
          allOf:
          - $ref: '#/components/schemas/LoraParameters'
          description: LoRa specific parameters
        distillation:
          allOf:
          - $ref: '#/components/schemas/DistillationParameters'
          description: Knowledge Distillation specific parameters
        sequence_packing_enabled:
          type: boolean
          title: Sequence Packing Enabled
          description: Sequence packing can improve speed of training by letting the
            training work on multiple rows at the same time. Experimental and not
            supported by all models. If a model is not supported, a warning will be
            returned in the response body and training will proceed with sequence
            packing disabled. Not recommended for produciton use. This flag may be
            removed in the future. See https://docs.nvidia.com/nemo-framework/user-guide/latest/sft_peft/packed_sequence.html
            for more details.
          default: false
      type: object
      required:
      - finetuning_type
      title: Hyperparameters
    ImageURL:
      properties:
        url:
          type: string
          title: Url
          description: Either a URL of the image or the base64 encoded image data.
        detail:
          type: string
          title: Detail
          description: Specifies the detail level of the image.
      additionalProperties: false
      type: object
      required:
      - url
      title: ImageURL
    InequalityOperator:
      type: string
      enum:
      - lt
      - le
      - gt
      - ge
      title: InequalityOperator
    InferenceParameters:
      properties:
        temperature:
          anyOf:
          - type: number
          - $ref: '#/components/schemas/UniformDistribution'
          - $ref: '#/components/schemas/ManualDistribution'
          - type: 'null'
          title: Temperature
        top_p:
          anyOf:
          - type: number
          - $ref: '#/components/schemas/UniformDistribution'
          - $ref: '#/components/schemas/ManualDistribution'
          - type: 'null'
          title: Top P
        max_tokens:
          type: integer
          title: Max Tokens
        max_parallel_requests:
          type: integer
          minimum: 1.0
          title: Max Parallel Requests
          default: 4
      type: object
      title: InferenceParameters
    InferenceParams:
      properties:
        top_p:
          type: number
          title: Top P
        top_k:
          type: integer
          title: Top K
        temperature:
          type: number
          title: Temperature
        max_tokens:
          type: integer
          title: Max Tokens
        stop:
          type: array
          items:
            type: string
          title: Stop
      type: object
      title: InferenceParams
      description: Parameters that influence the inference of a model.
    InjectionDetection:
      properties:
        injections:
          items:
            type: string
          type: array
          title: Injections
          description: The list of injection types to detect. Options are 'sqli',
            'template', 'code', 'xss'.Currently, only SQL injection, template injection,
            code injection, and markdown cross-site scripting are supported. Custom
            rules can be added, provided they are in the `yara_path` and have a `.yara`
            file extension.
        action:
          type: string
          pattern: ^(reject|omit)$
          title: Action
          description: Action to take. Options are 'reject' to offer a rejection message,
            'omit' to mask the offending content, and 'sanitize' to pass the content
            as-is in the safest way. These options are listed in descending order
            of relative safety. 'sanitize' is not implemented at this time.
          default: reject
        yara_rules:
          type: object
          additionalProperties:
            type: string
          title: Yara Rules
          description: Dictionary mapping rule names to YARA rule strings. If provided,
            these rules will be used instead of loading rules from yara_path. Each
            rule should be a valid YARA rule string.
      type: object
      title: InjectionDetection
    InputRails:
      properties:
        parallel:
          type: boolean
          title: Parallel
          description: If True, the input rails are executed in parallel.
          default: false
        flows:
          items:
            type: string
          type: array
          title: Flows
          description: The names of all the flows that implement input rails.
      type: object
      title: InputRails
      description: Configuration of input rails.
    Instruction:
      properties:
        type:
          type: string
          title: Type
        content:
          type: string
          title: Content
      type: object
      required:
      - type
      - content
      title: Instruction
      description: Configuration for instructions in natural language that should
        be passed to the LLM.
    JailbreakDetectionConfig:
      properties:
        server_endpoint:
          type: string
          title: Server Endpoint
          description: The endpoint for the jailbreak detection heuristics/model container.
        length_per_perplexity_threshold:
          type: number
          title: Length Per Perplexity Threshold
          description: The length/perplexity threshold.
          default: 89.79
        prefix_suffix_perplexity_threshold:
          type: number
          title: Prefix Suffix Perplexity Threshold
          description: The prefix/suffix perplexity threshold.
          default: 1845.65
        nim_base_url:
          type: string
          title: Nim Base Url
          description: 'Base URL for jailbreak detection model. Example: http://localhost:8000/v1'
        nim_server_endpoint:
          type: string
          title: Nim Server Endpoint
          description: Classification path uri. Defaults to 'classify' for NemoGuard
            JailbreakDetect.
          default: classify
        api_key:
          type: string
          title: Api Key
          description: Secret String with API key for use in Jailbreak requests. Takes
            precedence over api_key_env_var
        api_key_env_var:
          type: string
          title: Api Key Env Var
          description: Environment variable containing API key for jailbreak detection
            model
        nim_url:
          type: string
          title: Nim Url
          description: 'DEPRECATED: Use nim_base_url instead'
          deprecated: true
        nim_port:
          type: integer
          title: Nim Port
          description: 'DEPRECATED: Include port in nim_base_url instead'
          deprecated: true
        embedding:
          type: string
          title: Embedding
          deprecated: true
      type: object
      title: JailbreakDetectionConfig
      description: Configuration data for jailbreak detection.
    JobEntry:
      properties:
        object:
          type: string
          title: Object
          description: The object where the informaiton is being pulled
        events:
          type: array
          items:
            $ref: '#/components/schemas/JobEvent'
          title: Events
          description: The events that occurred
        logs:
          type: object
          title: Logs
          description: The logs from any pods that existed
        status:
          type: object
          title: Status
          description: The status of the pod
      type: object
      title: JobEntry
      description: 'Container for job execution information.


        Groups together events, logs, and status information for a specific

        object (usually a container or pod) in the job.'
    JobEvent:
      properties:
        count:
          type: string
          title: Count
          description: Times this event was seen
        first_seen:
          type: integer
          title: First Seen
          description: First time it was seen, timestamp
        last_seen:
          type: integer
          title: Last Seen
          description: Last time it was seen, timestamp
        message:
          type: string
          title: Message
          description: Event Message
        reason:
          type: string
          title: Reason
          description: Event Reason
        type:
          type: string
          title: Type
          description: Event Type
      type: object
      title: JobEvent
      description: 'Kubernetes event information for job monitoring.


        Represents a Kubernetes event related to job execution, including

        timing information and event details.'
    JobLogError:
      properties:
        explanation:
          type: string
          title: Explanation
          description: Explanation of the error
        timestamp:
          type: string
          title: Timestamp
          description: Timestamp of job error
        exception_type:
          type: string
          title: Exception Type
          description: The exception type for the error
        message:
          type: string
          title: Message
          description: Message from the exception
        file:
          type: string
          title: File
          description: File in which the exception occurred
        line:
          type: integer
          title: Line
          description: Line in which the exception occurred
        stack_trace:
          type: string
          title: Stack Trace
          description: Stack trace from the exception
      type: object
      title: JobLogError
      description: 'Error information from job execution.


        Contains detailed error information including stack traces and context

        for debugging failed jobs.'
    JobLogs:
      properties:
        error:
          allOf:
          - $ref: '#/components/schemas/JobLogError'
          description: Error from the process
        entries:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/JobEntry'
          title: Entries
          description: The output from all of the containers
      type: object
      title: JobLogs
      description: 'Complete log information for a job.


        Contains both error information or container-specific execution details

        for the entire job execution.'
    JobStatus:
      type: string
      enum:
      - created
      - pending
      - running
      - cancelled
      - cancelling
      - failed
      - completed
      - ready
      - unknown
      title: JobStatus
      description: 'Normalized statuses for all jobs.


        - **CREATED**: The job is created, but not yet scheduled.

        - **PENDING**: The job is waiting for resource allocation.

        - **RUNNING**: The job is currently running.

        - **CANCELLING**: The job is being cancelled at the user''s request.

        - **CANCELLED**: The job has been cancelled by the user.

        - **CANCELLING**: The job is being cancelled at the user''s request.

        - **FAILED**: The job failed to execute and terminated.

        - **COMPLETED**: The job has completed successfully.

        - **READY**: The job is ready to be used.

        - **UNKNOWN**: The job status is unknown.'
    JobWarning:
      properties:
        message:
          type: string
          title: Message
          description: Warning message
        explanation:
          type: string
          title: Explanation
          description: Explanation of the warning
      type: object
      title: JobWarning
      description: 'Warning information from API execution.


        Contains detailed warning information.'
    LLMCallInfo:
      properties:
        task:
          type: string
          title: Task
          description: The internal task that made the call.
        duration:
          type: number
          title: Duration
          description: The duration in seconds.
        total_tokens:
          type: integer
          title: Total Tokens
          description: The total number of used tokens.
        prompt_tokens:
          type: integer
          title: Prompt Tokens
          description: The number of input tokens.
        completion_tokens:
          type: integer
          title: Completion Tokens
          description: The number of output tokens.
        started_at:
          type: number
          title: Started At
          description: The timestamp for when the LLM call started.
          default: 0
        finished_at:
          type: number
          title: Finished At
          description: The timestamp for when the LLM call finished.
          default: 0
        id:
          type: string
          title: Id
          description: The unique prompt identifier.
        prompt:
          type: string
          title: Prompt
          description: The prompt that was used for the LLM call.
        completion:
          type: string
          title: Completion
          description: The completion generated by the LLM.
        raw_response:
          type: object
          title: Raw Response
          description: The raw response received from the LLM. May contain additional
            information, e.g. logprobs.
        llm_model_name:
          type: string
          title: Llm Model Name
          description: The name of the model use for the LLM call.
          default: unknown
      type: object
      title: LLMCallInfo
    LLMCodeColumn:
      properties:
        model_alias:
          type: string
          title: Model Alias
        prompt:
          type: string
          title: Prompt
        name:
          type: string
          title: Name
          default: response
        system_prompt:
          type: string
          title: System Prompt
        output_type:
          allOf:
          - $ref: '#/components/schemas/OutputType'
          default: code
        output_format:
          anyOf:
          - type: string
          - type: object
          title: Output Format
        drop:
          type: boolean
          title: Drop
          description: If true, remove this column from the final dataset before evaluation.
          default: false
      type: object
      required:
      - model_alias
      - prompt
      title: LLMCodeColumn
      description: "Data Designer column that uses an LLM to generate code.\n\nArgs:\n\
        \    name: Name of the column.\n    prompt: Prompt template to use for generation.\n\
        \    system_prompt: System prompt for the LLM. Useful for defining the LLM's\
        \ role,\n        tone, and other instructions. However, do not provide any\
        \ instructions\n        related to the output format, as this is handled internally\
        \ by AIDD.\n    model_alias: Model alias to use for the LLM."
    LLMGenColumn:
      properties:
        model_alias:
          type: string
          title: Model Alias
        prompt:
          type: string
          title: Prompt
        name:
          type: string
          title: Name
          default: response
        system_prompt:
          type: string
          title: System Prompt
        output_type:
          allOf:
          - $ref: '#/components/schemas/OutputType'
          default: text
        output_format:
          anyOf:
          - type: string
          - type: object
          title: Output Format
        drop:
          type: boolean
          title: Drop
          description: If true, remove this column from the final dataset before evaluation.
          default: false
      type: object
      required:
      - model_alias
      - prompt
      title: LLMGenColumn
    LLMJudgeColumn:
      properties:
        model_alias:
          type: string
          title: Model Alias
        prompt:
          type: string
          title: Prompt
          description: Template for generating prompts.Use Jinja2 templates to reference
            dataset columns.
        num_samples_to_judge:
          type: integer
          title: Num Samples To Judge
          description: Number of samples to judge.If unset or None, then defaults
            to judging all records. Default is None.
        rubrics:
          items:
            $ref: '#/components/schemas/Rubric'
          type: array
          minItems: 1
          title: Rubrics
          description: List of rubric configurations to use for evaluation.At least
            one must be provided.
        name:
          type: string
          title: Name
        judge_random_seed:
          type: integer
          title: Judge Random Seed
          description: Random seed to use for selecting samples to judge. Same seed
            ensures same samples are selected each time.
          default: 2025
        drop:
          type: boolean
          title: Drop
          description: If true, remove this column from the final dataset before evaluation.
          default: false
      type: object
      required:
      - model_alias
      - prompt
      - rubrics
      - name
      title: LLMJudgeColumn
      description: "Data Designer column for llm-as-a-judge with custom rubrics.\n\
        \nArgs:\n    name: Name of the column.\n    prompt: Prompt template to use\
        \ for llm-as-a-judge.\n    rubrics: List of rubrics to use for evaluation.\n\
        \    num_samples_to_judge: Number of samples to judge. If None, the full dataset\n\
        \        will be judged. If less than the total number of rows in the dataset,\n\
        \        a random sample of the specified size will be judged.\n    model_alias:\
        \ Model alias to use for the LLM."
    LLMStructuredColumn:
      properties:
        model_alias:
          type: string
          title: Model Alias
        prompt:
          type: string
          title: Prompt
        name:
          type: string
          title: Name
          default: response
        system_prompt:
          type: string
          title: System Prompt
        output_type:
          allOf:
          - $ref: '#/components/schemas/OutputType'
          default: structured
        output_format:
          anyOf:
          - type: string
          - type: object
          title: Output Format
        drop:
          type: boolean
          title: Drop
          description: If true, remove this column from the final dataset before evaluation.
          default: false
      type: object
      required:
      - model_alias
      - prompt
      title: LLMStructuredColumn
      description: "Data Designer column that uses an LLM to generate structured data.\n\
        \nArgs:\n    name: Name of the column.\n    prompt: Prompt template to use\
        \ for generation.\n    system_prompt: System prompt for the LLM. Useful for\
        \ defining the LLM's role,\n        tone, and other instructions. However,\
        \ do not provide any instructions\n        related to the output format, as\
        \ this is handled internally by AIDD.\n    model_alias: Model alias to use\
        \ for the LLM."
    LLMTextColumn:
      properties:
        model_alias:
          type: string
          title: Model Alias
        prompt:
          type: string
          title: Prompt
        name:
          type: string
          title: Name
          default: response
        system_prompt:
          type: string
          title: System Prompt
        output_type:
          allOf:
          - $ref: '#/components/schemas/OutputType'
          default: text
        output_format:
          anyOf:
          - type: string
          - type: object
          title: Output Format
        drop:
          type: boolean
          title: Drop
          description: If true, remove this column from the final dataset before evaluation.
          default: false
      type: object
      required:
      - model_alias
      - prompt
      title: LLMTextColumn
      description: "Data Designer column that uses an LLM to generate text.\n\nArgs:\n\
        \    name: Name of the column.\n    prompt: Prompt template to use for generation.\n\
        \    system_prompt: System prompt for the LLM. Useful for defining the LLM's\
        \ role,\n        tone, and other instructions. However, do not provide any\
        \ instructions\n        related to the output format, as this is handled internally\
        \ by AIDD.\n    model_alias: Model alias to use for the LLM."
    LabelSelectorRequirement:
      properties:
        key:
          type: string
          title: Key
        operator:
          type: string
          enum:
          - In
          - NotIn
          - Exists
          - DoesNotExist
          - Gt
          - Lt
          title: Operator
        values:
          type: array
          items:
            type: string
          title: Values
      type: object
      required:
      - key
      - operator
      title: LabelSelectorRequirement
    LabelSelectorTerm:
      properties:
        matchExpressions:
          type: array
          items:
            $ref: '#/components/schemas/LabelSelectorRequirement'
          title: Matchexpressions
      type: object
      title: LabelSelectorTerm
    LiveEvaluationOutput:
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          description: The status for the live evaluation.
          default: created
        status_details:
          allOf:
          - $ref: '#/components/schemas/EvaluationStatusDetails'
          description: The status details for the live evaluation.
          default:
            task_status: {}
        result:
          allOf:
          - $ref: '#/components/schemas/EvaluationResult'
          description: The results for the live evaluation.
        logs:
          type: object
          title: Logs
          description: Logs of task for live evaluation
      type: object
      title: LiveEvaluationOutput
      description: The output of a live evaluation.
    LogProbs:
      properties:
        text_offset:
          items:
            type: integer
          type: array
          title: Text Offset
        token_logprobs:
          items:
            type: number
          type: array
          title: Token Logprobs
        tokens:
          items:
            type: string
          type: array
          title: Tokens
        top_logprobs:
          items:
            type: object
            additionalProperties:
              type: number
          type: array
          title: Top Logprobs
      type: object
      title: LogProbs
      description: Log probability information for regular (non-chat) completions.
    LoraFinetuningData:
      properties:
        alpha:
          type: integer
          title: Alpha
          description: A scaling factor that controls how much influence the LoRA
            adaptations have on the base model's behavior. The alpha parameter should
            typically be set to dim or 0.5 * dim as the actual scaling applied in
            the training loop is alpha / dim.
        apply_lora_to_mlp:
          type: boolean
          title: Apply Lora To Mlp
          description: Controls whether to adapt the model's feed-forward neural network
            layers using LoRA.
        apply_lora_to_output:
          type: boolean
          title: Apply Lora To Output
          description: Controls whether to adapt the model's final output layer using
            LoRA.
      type: object
      required:
      - alpha
      - apply_lora_to_mlp
      - apply_lora_to_output
      title: LoraFinetuningData
      description: Data about a LoRA fine-tuned model.
    LoraParameters:
      properties:
        adapter_dim:
          type: integer
          title: Adapter Dim
          description: Size of adapter layers added throughout the model. This is
            the size of the tunable layers that LoRA adds to various transformer blocks
            in the base model. This parameter is a power of 2.
          default: 8
        alpha:
          type: integer
          title: Alpha
          description: Scaling factor for the LoRA update. Controls the magnitude
            of the low-rank approximation. A higher alpha value increases the impact
            of the LoRA weights, effectively amplifying the changes made to the original
            model. Proper tuning of alpha is essential, as it balances the adaptation's
            impact, ensuring neither underfitting nor overfitting. This is often a
            multiple of Adapter Dimension
          default: 16
        adapter_dropout:
          type: number
          title: Adapter Dropout
          description: Dropout probability in the adapter layer.
        target_modules:
          type: array
          items:
            type: string
          title: Target Modules
          description: 'Target specific layers in the model architecture to apply
            LoRA. We select a subset of the layers by default.

            However, specific layers can also be selected. For example:

            - `linear_qkv`: Apply LoRA to the fused linear layer used for query, key,
            and value projections in self-attention.

            - `linear_proj`: Apply LoRA to the linear layer used for projecting the
            output of self-attention.

            - `linear_fc1`: Apply LoRA to the first fully-connected layer in MLP.

            - `linear_fc2`: Apply LoRA to the second fully-connected layer in MLP.

            - `*_proj`: Apply LoRA to all layers used for projecting the output of
            self-attention.

            Target modules can also contain wildcards. For example, you can specify
            `target_modules=[''*.layers.0.*.linear_qkv'', ''*.layers.1.*.linear_qkv'']`
            to add LoRA to only linear_qkv on the first two layers.'
      type: object
      title: LoraParameters
      description: Specific parameters for LoRA.
    ManualDistribution:
      properties:
        distribution_type:
          allOf:
          - $ref: '#/components/schemas/DistributionType'
          default: manual
        params:
          $ref: '#/components/schemas/ManualDistributionParams'
      type: object
      required:
      - params
      title: ManualDistribution
    ManualDistributionParams:
      properties:
        values:
          items:
            type: number
          type: array
          minItems: 1
          title: Values
        weights:
          type: array
          items:
            type: number
          title: Weights
      type: object
      required:
      - values
      title: ManualDistributionParams
    Message:
      properties:
        step:
          type: string
          title: Step
        stream:
          $ref: '#/components/schemas/OutputStream'
        payload:
          type: object
          title: Payload
        type:
          type: string
          title: Type
        ts:
          type: string
          format: date-time
          title: Ts
      type: object
      required:
      - step
      - stream
      - payload
      - type
      - ts
      title: Message
    MessageTemplate:
      properties:
        type:
          type: string
          title: Type
          description: The type of message, e.g., 'assistant', 'user', 'system'.
        content:
          type: string
          title: Content
          description: The content of the message.
      type: object
      required:
      - type
      - content
      title: MessageTemplate
      description: Template for a message structure.
    MetricConfig:
      properties:
        type:
          type: string
          title: Type
          description: The type of the metric.
        params:
          type: object
          title: Params
          description: Specific parameters for the metric.
      type: object
      required:
      - type
      title: MetricConfig
      description: A metric that is computed as part of the evaluation.
    MetricKeys:
      type: string
      enum:
      - train_loss
      - val_loss
      title: MetricKeys
    MetricResultInput:
      properties:
        scores:
          additionalProperties:
            $ref: '#/components/schemas/Score'
          type: object
          title: Scores
          description: The value for all the scores computed for the metric.
      type: object
      title: MetricResultInput
      description: 'The result coming from a metric, as part of an evaluation.


        It contains a mapping of score names to their value'
    MetricResultOutput:
      properties:
        scores:
          additionalProperties:
            $ref: '#/components/schemas/Score'
          type: object
          title: Scores
          description: The value for all the scores computed for the metric.
      type: object
      title: MetricResultOutput
      description: 'The result coming from a metric, as part of an evaluation.


        It contains a mapping of score names to their value'
    MetricValues:
      properties:
        train_loss:
          type: array
          items:
            $ref: '#/components/schemas/CustomizationMetricValue'
          title: Train Loss
          default: []
        val_loss:
          type: array
          items:
            $ref: '#/components/schemas/CustomizationMetricValue'
          title: Val Loss
          default: []
      type: object
      title: MetricValues
    Model:
      properties:
        type:
          type: string
          title: Type
        engine:
          type: string
          title: Engine
        model:
          type: string
          title: Model
          description: The name of the model. If not specified, it should be specified
            through the parameters attribute.
        api_key_env_var:
          type: string
          title: Api Key Env Var
          description: Optional environment variable with model's API Key. Do not
            include "$".
        reasoning_config:
          allOf:
          - $ref: '#/components/schemas/ReasoningModelConfig'
          description: Configuration parameters for reasoning LLMs.
        parameters:
          type: object
          title: Parameters
        mode:
          type: string
          enum:
          - chat
          - text
          title: Mode
          description: Whether the mode is 'text' completion or 'chat' completion.
            Allowed values are 'chat' or 'text'.
          default: chat
      type: object
      required:
      - type
      - engine
      title: Model
      description: "Configuration of a model used by the rails engine.\nTypically,\
        \ the main model is configured e.g.:\n{\n    \"type\": \"main\",\n    \"engine\"\
        : \"openai\",\n    \"model\": \"gpt-3.5-turbo-instruct\"\n}"
    ModelArtifact:
      properties:
        gpu_arch:
          type: string
          title: Gpu Arch
          description: The GPU architecture the model is optimized for.
        precision:
          allOf:
          - $ref: '#/components/schemas/ModelPrecision'
          title: Precision
          description: The numerical precision format used to store model weights.
        tensor_parallelism:
          type: integer
          title: Tensor Parallelism
          description: The number of GPU devices to split and process the model's
            neural network layers.
        backend_engine:
          allOf:
          - $ref: '#/components/schemas/BackendEngineType'
          title: Backend Engine
          description: The inference engine framework to run the model.
        status:
          allOf:
          - $ref: '#/components/schemas/ArtifactStatus'
          description: The current state of the model artifact in the upload/deployment
            lifecycle.
        files_url:
          type: string
          minLength: 1
          format: uri
          title: Files Url
          description: The location where the artifact files are stored.
      type: object
      required:
      - status
      - files_url
      title: ModelArtifact
      description: 'Data about a model artifact (a set of checkpoint files, configs,
        and other auxiliary info).


        The `files_url` field can point to a DataStore location.


        Example:

        - nds://models/rdinu/my-lora-customization


        The `rdinu/my-lora-customization` part above is the actual repository.


        If a specific revision needs to be referred, the HuggingFace syntax is used.


        - nds://models/rdinu/my-lora-customization@v1

        - nds://models/rdinu/my-lora-customization@8df79a8'
    ModelArtifactDE:
      properties:
        gpu_arch:
          type: string
          title: Gpu Arch
        precision:
          $ref: '#/components/schemas/ModelPrecisionDE'
        tensor_parallelism:
          type: integer
          title: Tensor Parallelism
        backend_engine:
          $ref: '#/components/schemas/BackendEngineTypeDE'
        status:
          allOf:
          - $ref: '#/components/schemas/ArtifactStatusDE'
          description: The status of the model artifact.
        files_url:
          type: string
          minLength: 1
          format: uri
          title: Files Url
          description: 'The location where the artifact files are stored. '
      type: object
      required:
      - status
      - files_url
      title: ModelArtifactDE
      description: 'Data about a model artifact (a set of checkpoint files, configs,
        and other auxiliary info).


        The `files_url` field can point to a DataStore location.


        Example:

        - nds://models/rdinu/my-lora-customization


        The `rdinu/my-lora-customization` part above is the actual repository.


        If a specific revision needs to be referred, the HuggingFace syntax is used.


        - nds://models/rdinu/my-lora-customization@v1

        - nds://models/rdinu/my-lora-customization@8df79a8'
    ModelConfig:
      properties:
        alias:
          type: string
          title: Alias
        model:
          $ref: '#/components/schemas/ModelOP'
        inference_parameters:
          $ref: '#/components/schemas/InferenceParameters'
        is_reasoner:
          type: boolean
          title: Is Reasoner
          default: false
      type: object
      required:
      - alias
      - model
      - inference_parameters
      title: ModelConfig
    ModelDeployment:
      properties:
        created_at:
          type: string
          format: date-time
          title: Created At
          description: Timestamp for when the entity was created.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: Timestamp for when the entity was last updated.
        name:
          type: string
          title: Name
          description: The name of the identity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
        namespace:
          type: string
          title: Namespace
          description: The if of the namespace of the entity. This can be missing
            for namespace entities or in deployments that don't use namespaces.
        description:
          type: string
          title: Description
          description: The description of the entity.
        url:
          type: string
          minLength: 1
          format: uri
          title: Url
          description: The URL of the deployment.
        deployed:
          type: boolean
          title: Deployed
          description: Whether the deployment is done.
          default: false
        status_details:
          allOf:
          - $ref: '#/components/schemas/ModelDeploymentStatusDetails'
          description: The status details of the deployment.
        models:
          items:
            type: string
          type: array
          title: Models
          description: The models served by this deployment.
        async_enabled:
          type: boolean
          title: Async Enabled
          description: Whether the async mode is enabled.
          default: false
        config:
          anyOf:
          - type: string
            title: Reference
            description: A reference to DeploymentConfig.
          - $ref: '#/components/schemas/DeploymentConfig'
          title: Config
          description: The deployment configuration.
        schema_version:
          type: string
          title: Schema Version
          description: The version of the schema for the object. Internal use only.
          default: '1.0'
        project:
          type: string
          title: Project
          description: The id of project associated with this entity.
        custom_fields:
          type: object
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      required:
      - url
      - status_details
      - config
      title: ModelDeployment
      description: A model deployment.
    ModelDeploymentFilter:
      properties: {}
      type: object
      title: ModelDeploymentFilter
    ModelDeploymentInput:
      properties:
        name:
          type: string
          title: Name
          description: The name of the identity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
        namespace:
          type: string
          title: Namespace
          description: The if of the namespace of the entity. This can be missing
            for namespace entities or in deployments that don't use namespaces.
        description:
          type: string
          title: Description
          description: The description of the entity.
        models:
          items:
            type: string
          type: array
          title: Models
          description: The models served by this deployment.
        async_enabled:
          type: boolean
          title: Async Enabled
          description: Whether the async mode is enabled.
          default: false
        config:
          anyOf:
          - type: string
            title: Reference
            description: A reference to DeploymentConfig.
          - $ref: '#/components/schemas/DeploymentConfigInput'
          title: Config
          description: The deployment configuration.
        project:
          type: string
          title: Project
          description: The id of project associated with this entity.
        custom_fields:
          type: object
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      required:
      - config
      title: ModelDeploymentInput
      description: A model deployment.
    ModelDeploymentStatusDetails:
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          description: The status of the deployment.
        description:
          type: string
          title: Description
          description: A description of the status.
      type: object
      required:
      - status
      title: ModelDeploymentStatusDetails
    ModelDeploymentUpdate:
      properties:
        description:
          type: string
          title: Description
          description: The description of the entity.
        models:
          type: array
          items:
            type: string
          title: Models
          description: The models served by this deployment.
        async_enabled:
          type: boolean
          title: Async Enabled
          description: Whether the async mode is enabled.
          default: false
        config:
          anyOf:
          - type: string
            title: Reference
            description: A reference to DeploymentConfig.
          - $ref: '#/components/schemas/DeploymentConfigInput'
          title: Config
          description: The deployment configuration.
        schema_version:
          type: string
          title: Schema Version
          description: The version of the schema for the object. Internal use only.
          default: '1.0'
        project:
          type: string
          title: Project
          description: The id of project associated with this entity.
        custom_fields:
          type: object
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      title: ModelDeploymentUpdate
      description: A model deployment.
    ModelDeploymentsPage:
      properties:
        object:
          type: string
          title: Object
          default: list
        data:
          items:
            $ref: '#/components/schemas/ModelDeployment'
          type: array
          title: Data
        pagination:
          allOf:
          - $ref: '#/components/schemas/PaginationData'
          description: Pagination information.
        sort:
          type: string
          title: Sort
          description: The field on which the results are sorted.
        filter:
          allOf:
          - $ref: '#/components/schemas/ModelDeploymentFilter'
          description: Filtering information.
      type: object
      required:
      - data
      title: ModelDeploymentsPage
    ModelFilter:
      properties:
        project:
          type: string
          title: Project
          description: Filter by project name.
        namespace:
          type: string
          title: Namespace
          description: Filter by namespace id.
        base_model:
          anyOf:
          - $ref: '#/components/schemas/BaseModelFilter'
          - type: string
          title: Base Model
          description: Filter models based on base model properties.
        peft:
          anyOf:
          - $ref: '#/components/schemas/ModelPeftFilter'
          - type: boolean
          title: Peft
          description: Filter models with Parameter Efficient Fine-tuning.
        prompt:
          type: boolean
          title: Prompt
          description: Filter models with prompt engineering data.
        created_at:
          allOf:
          - $ref: '#/components/schemas/CreatedAtFilter'
          description: Filter entities based on creation date.
      type: object
      title: ModelFilter
    ModelInput:
      properties:
        name:
          type: string
          maxLength: 255
          pattern: ^[\w\-\+.@:]*$
          title: Name
          description: The name of the entity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
          default: ''
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        description:
          type: string
          title: Description
          description: The description of the entity.
        spec:
          allOf:
          - $ref: '#/components/schemas/ModelSpec'
          description: Detailed specification for the model.
        artifact:
          allOf:
          - $ref: '#/components/schemas/ModelArtifact'
          description: A set of checkpoint files, configs, and other auxiliary info
            associated with this model.
        base_model:
          anyOf:
          - type: string
            title: Reference
            description: A reference to Model.
          - type: object
            title: ModelInput
            description: Information about a machine learning model, typically an
              LLM.
          title: Base Model
          description: Link to another model which is used as a base for the current
            model.
        api_endpoint:
          allOf:
          - $ref: '#/components/schemas/APIEndpointData'
          description: Data about the inference endpoint for this model.
        peft:
          allOf:
          - $ref: '#/components/schemas/ParameterEfficientFinetuningData'
          description: Configuration parameters for parameter efficient fine-tuning
            (PEFT) built into this model. PEFT methods like LoRA provide efficient
            model customization by training a small number of additional parameters
            while keeping the base model frozen.
        prompt:
          allOf:
          - $ref: '#/components/schemas/PromptData'
          description: Configuration for prompt engineering, which involves crafting
            input text to guide the model's behavior and responses through system
            prompts, few-shot examples, and other techniques.
        guardrails:
          allOf:
          - $ref: '#/components/schemas/GuardrailConfigInput'
          description: Data about the guardrail configuration built into this model.
            Guardrails provide safety and quality controls around model outputs by
            defining rules and filters that validate, modify or block responses based
            on criteria like toxicity, factuality, or custom business logic.
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      title: ModelInput
      description: Information about a machine learning model, typically an LLM.
    ModelInputDE:
      properties:
        name:
          type: string
          title: Name
          description: The name of the identity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
        namespace:
          type: string
          title: Namespace
          description: The if of the namespace of the entity. This can be missing
            for namespace entities or in deployments that don't use namespaces.
        description:
          type: string
          title: Description
          description: The description of the entity.
        spec:
          allOf:
          - $ref: '#/components/schemas/ModelSpecDE'
          description: Detailed sped for the model (e.g., number of parameters, chat
            mode).
        artifact:
          allOf:
          - $ref: '#/components/schemas/ModelArtifactDE'
          description: The artifact associated with this model.
        base_model:
          anyOf:
          - type: string
            title: Reference
            description: A reference to Model.
          - type: object
            title: ModelInput
            description: 'A model can be used by NIM for LLMs to run inference against
              it.

              How exactly the inference will be done, depends on the type of model

              (e.g., a foundation model, a fine-tuned model, a prompt-engineered model)'
          title: Base Model
          description: Link to another model which is used as a base for the current
            model. Used in conjunction with `peft`, `prompt` and `guardrails`.
        api_endpoint:
          allOf:
          - $ref: '#/components/schemas/APIEndpointData'
          description: Data about the inference endpoint for this model.
        peft:
          allOf:
          - $ref: '#/components/schemas/ParameterEfficientFinetuningDataDE'
          description: Data about the parameter efficient fine-tuning for this model.
        prompt:
          allOf:
          - $ref: '#/components/schemas/PromptDataDE'
          description: Data about the prompt engineering for this model.
        guardrails:
          allOf:
          - $ref: '#/components/schemas/GuardrailConfigInputDE'
          description: Data about the guardrail configuration for this model.
        project:
          type: string
          title: Project
          description: The id of project associated with this entity.
        custom_fields:
          type: object
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      title: ModelInputDE
      description: 'A model can be used by NIM for LLMs to run inference against it.

        How exactly the inference will be done, depends on the type of model

        (e.g., a foundation model, a fine-tuned model, a prompt-engineered model)'
    ModelInputEV:
      properties:
        schema_version:
          type: string
          title: Schema Version
          description: The version of the schema for the object. Internal use only.
          default: '1.0'
        id:
          type: string
          title: Id
          description: The ID of the entity. With the exception of namespaces, this
            is always a semantically-prefixed base58-encoded uuid4 [<prefix>-base58(uuid4())].
        description:
          type: string
          title: Description
          description: The description of the entity.
        type_prefix:
          type: string
          title: Type Prefix
          default: model
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: Timestamp for when the entity was created.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: Timestamp for when the entity was last updated.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
        name:
          type: string
          maxLength: 255
          pattern: ^[\w\-\+.@:]*$
          title: Name
          description: The name of the entity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
          default: ''
        version_id:
          type: string
          title: Version Id
          description: A unique, immutable id for the version. This is similar to
            the commit hash.
          default: main
        version_tags:
          items:
            $ref: '#/components/schemas/VersionTag'
          type: array
          title: Version Tags
          description: The list of version tags associated with this entity.
        spec:
          allOf:
          - $ref: '#/components/schemas/ModelSpec'
          description: Detailed specification for the model.
        artifact:
          allOf:
          - $ref: '#/components/schemas/ModelArtifact'
          description: A set of checkpoint files, configs, and other auxiliary info
            associated with this model.
        base_model:
          anyOf:
          - type: string
            title: Reference
            description: A reference to Model.
          - type: object
            title: ModelInput
            description: Information about a machine learning model, typically an
              LLM.
          title: Base Model
          description: Link to another model which is used as a base for the current
            model.
        api_endpoint:
          allOf:
          - $ref: '#/components/schemas/APIEndpointData'
          description: Data about the inference endpoint for this model.
        peft:
          allOf:
          - $ref: '#/components/schemas/ParameterEfficientFinetuningData'
          description: Configuration parameters for parameter efficient fine-tuning
            (PEFT) built into this model. PEFT methods like LoRA provide efficient
            model customization by training a small number of additional parameters
            while keeping the base model frozen.
        prompt:
          allOf:
          - $ref: '#/components/schemas/PromptData'
          description: Configuration for prompt engineering, which involves crafting
            input text to guide the model's behavior and responses through system
            prompts, few-shot examples, and other techniques.
        guardrails:
          allOf:
          - $ref: '#/components/schemas/GuardrailConfigInput'
          description: Data about the guardrail configuration built into this model.
            Guardrails provide safety and quality controls around model outputs by
            defining rules and filters that validate, modify or block responses based
            on criteria like toxicity, factuality, or custom business logic.
      type: object
      title: ModelInputEV
      description: Information about a machine learning model, typically an LLM.
    ModelOP:
      properties:
        api_endpoint:
          allOf:
          - $ref: '#/components/schemas/ApiEndpoint'
          title: API Endpoint
      type: object
      required:
      - api_endpoint
      title: ModelOP
    ModelOutput:
      properties:
        created_at:
          type: string
          format: date-time
          title: Created At
          description: Timestamp for when the entity was created.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: Timestamp for when the entity was last updated.
        name:
          type: string
          maxLength: 255
          pattern: ^[\w\-\+.@:]*$
          title: Name
          description: The name of the entity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
          default: ''
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        description:
          type: string
          title: Description
          description: The description of the entity.
        spec:
          allOf:
          - $ref: '#/components/schemas/ModelSpec'
          description: Detailed specification for the model.
        artifact:
          allOf:
          - $ref: '#/components/schemas/ModelArtifact'
          description: A set of checkpoint files, configs, and other auxiliary info
            associated with this model.
        base_model:
          anyOf:
          - type: string
            title: Reference
            description: A reference to Model-Output.
          - type: object
            title: ModelOutput
            description: Information about a machine learning model, typically an
              LLM.
          title: Base Model
          description: Link to another model which is used as a base for the current
            model.
        api_endpoint:
          allOf:
          - $ref: '#/components/schemas/APIEndpointData'
          description: Data about the inference endpoint for this model.
        peft:
          allOf:
          - $ref: '#/components/schemas/ParameterEfficientFinetuningData'
          description: Configuration parameters for parameter efficient fine-tuning
            (PEFT) built into this model. PEFT methods like LoRA provide efficient
            model customization by training a small number of additional parameters
            while keeping the base model frozen.
        prompt:
          allOf:
          - $ref: '#/components/schemas/PromptData'
          description: Configuration for prompt engineering, which involves crafting
            input text to guide the model's behavior and responses through system
            prompts, few-shot examples, and other techniques.
        guardrails:
          allOf:
          - $ref: '#/components/schemas/GuardrailConfig'
          description: Data about the guardrail configuration built into this model.
            Guardrails provide safety and quality controls around model outputs by
            defining rules and filters that validate, modify or block responses based
            on criteria like toxicity, factuality, or custom business logic.
        schema_version:
          type: string
          title: Schema Version
          description: The version of the schema for the object. Internal use only.
          default: '1.0'
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      title: ModelOutput
      description: Information about a machine learning model, typically an LLM.
    ModelOutputDE:
      properties:
        created_at:
          type: string
          format: date-time
          title: Created At
          description: Timestamp for when the entity was created.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: Timestamp for when the entity was last updated.
        name:
          type: string
          title: Name
          description: The name of the identity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
        namespace:
          type: string
          title: Namespace
          description: The if of the namespace of the entity. This can be missing
            for namespace entities or in deployments that don't use namespaces.
        description:
          type: string
          title: Description
          description: The description of the entity.
        spec:
          allOf:
          - $ref: '#/components/schemas/ModelSpecDE'
          description: Detailed sped for the model (e.g., number of parameters, chat
            mode).
        artifact:
          allOf:
          - $ref: '#/components/schemas/ModelArtifactDE'
          description: The artifact associated with this model.
        base_model:
          anyOf:
          - type: string
            title: Reference
            description: A reference to Model-Output.
          - type: object
            title: ModelOutput
            description: 'A model can be used by NIM for LLMs to run inference against
              it.

              How exactly the inference will be done, depends on the type of model

              (e.g., a foundation model, a fine-tuned model, a prompt-engineered model)'
          title: Base Model
          description: Link to another model which is used as a base for the current
            model. Used in conjunction with `peft`, `prompt` and `guardrails`.
        api_endpoint:
          allOf:
          - $ref: '#/components/schemas/APIEndpointData'
          description: Data about the inference endpoint for this model.
        peft:
          allOf:
          - $ref: '#/components/schemas/ParameterEfficientFinetuningDataDE'
          description: Data about the parameter efficient fine-tuning for this model.
        prompt:
          allOf:
          - $ref: '#/components/schemas/PromptDataDE'
          description: Data about the prompt engineering for this model.
        guardrails:
          allOf:
          - $ref: '#/components/schemas/GuardrailConfigDE'
          description: Data about the guardrail configuration for this model.
        schema_version:
          type: string
          title: Schema Version
          description: The version of the schema for the object. Internal use only.
          default: '1.0'
        project:
          type: string
          title: Project
          description: The id of project associated with this entity.
        custom_fields:
          type: object
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      title: ModelOutputDE
      description: 'A model can be used by NIM for LLMs to run inference against it.

        How exactly the inference will be done, depends on the type of model

        (e.g., a foundation model, a fine-tuned model, a prompt-engineered model)'
    ModelOutputEV:
      properties:
        schema_version:
          type: string
          title: Schema Version
          description: The version of the schema for the object. Internal use only.
          default: '1.0'
        id:
          type: string
          title: Id
          description: The ID of the entity. With the exception of namespaces, this
            is always a semantically-prefixed base58-encoded uuid4 [<prefix>-base58(uuid4())].
        description:
          type: string
          title: Description
          description: The description of the entity.
        type_prefix:
          type: string
          title: Type Prefix
          default: model
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        created_at:
          type: string
          format: date-time
          title: Created At
          description: Timestamp for when the entity was created.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: Timestamp for when the entity was last updated.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
        name:
          type: string
          maxLength: 255
          pattern: ^[\w\-\+.@:]*$
          title: Name
          description: The name of the entity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
          default: ''
        version_id:
          type: string
          title: Version Id
          description: A unique, immutable id for the version. This is similar to
            the commit hash.
          default: main
        version_tags:
          items:
            $ref: '#/components/schemas/VersionTag'
          type: array
          title: Version Tags
          description: The list of version tags associated with this entity.
        spec:
          allOf:
          - $ref: '#/components/schemas/ModelSpec'
          description: Detailed specification for the model.
        artifact:
          allOf:
          - $ref: '#/components/schemas/ModelArtifact'
          description: A set of checkpoint files, configs, and other auxiliary info
            associated with this model.
        base_model:
          anyOf:
          - type: string
            title: Reference
            description: A reference to ModelOutput.
          - type: object
            title: ModelOutput
            description: Information about a machine learning model, typically an
              LLM.
          title: Base Model
          description: Link to another model which is used as a base for the current
            model.
        api_endpoint:
          allOf:
          - $ref: '#/components/schemas/APIEndpointData'
          description: Data about the inference endpoint for this model.
        peft:
          allOf:
          - $ref: '#/components/schemas/ParameterEfficientFinetuningData'
          description: Configuration parameters for parameter efficient fine-tuning
            (PEFT) built into this model. PEFT methods like LoRA provide efficient
            model customization by training a small number of additional parameters
            while keeping the base model frozen.
        prompt:
          allOf:
          - $ref: '#/components/schemas/PromptData'
          description: Configuration for prompt engineering, which involves crafting
            input text to guide the model's behavior and responses through system
            prompts, few-shot examples, and other techniques.
        guardrails:
          allOf:
          - $ref: '#/components/schemas/GuardrailConfig'
          description: Data about the guardrail configuration built into this model.
            Guardrails provide safety and quality controls around model outputs by
            defining rules and filters that validate, modify or block responses based
            on criteria like toxicity, factuality, or custom business logic.
      type: object
      title: ModelOutputEV
      description: Information about a machine learning model, typically an LLM.
    ModelPeftFilter:
      properties:
        lora:
          type: boolean
          title: Lora
          description: Filter models with LoRA fine-tuning.
      type: object
      title: ModelPeftFilter
    ModelPrecision:
      type: string
      enum:
      - int8
      - bf16
      - fp16
      - fp32
      - fp8-mixed
      - bf16-mixed
      title: ModelPrecision
      description: 'Type of model precision.


        ## Values

        - `"int8"` - 8-bit integer precision

        - `"bf16"` - Brain floating point precision

        - `"fp16"` - 16-bit floating point precision

        - `"fp32"` - 32-bit floating point precision

        - `"fp8-mixed"` - Mixed 8-bit floating point precision available on Hopper
        and later architectures.

        - `"bf16-mixed"` - Mixed Brain floating point precision'
    ModelPrecisionDE:
      type: string
      enum:
      - int8
      - bf16
      - fp16
      - fp32
      title: ModelPrecisionDE
      description: Types of model precision.
    ModelSortField:
      type: string
      enum:
      - created_at
      - -created_at
      - name
      - -name
      title: ModelSortField
    ModelSpec:
      properties:
        num_parameters:
          type: integer
          title: Num Parameters
          description: The total number of trainable parameters in the model's neural
            network architecture.
        context_size:
          type: integer
          title: Context Size
          description: The maximum number of tokens to process together in a single
            forward pass through the model.
        num_virtual_tokens:
          type: integer
          title: Num Virtual Tokens
          description: The number of virtual tokens the model can support for techniques
            such as prompt tuning, where special trainable embeddings are prepended
            to inputs.
        is_chat:
          type: boolean
          title: Is Chat
          description: Indicates if the model is designed for multi-turn conversation
            rather than single-prompt completion.
      type: object
      required:
      - num_parameters
      - context_size
      - num_virtual_tokens
      - is_chat
      title: ModelSpec
      description: Detailed specification about a model.
    ModelSpecDE:
      properties:
        num_parameters:
          type: integer
          title: Num Parameters
        context_size:
          type: integer
          title: Context Size
        num_virtual_tokens:
          type: integer
          title: Num Virtual Tokens
        is_chat:
          type: boolean
          title: Is Chat
          description: Whether or not this is a chat model
      type: object
      required:
      - num_parameters
      - context_size
      - num_virtual_tokens
      - is_chat
      title: ModelSpecDE
      description: Detailed spec about a model.
    ModelUpdate:
      properties:
        description:
          type: string
          title: Description
          description: The description of the entity.
        spec:
          allOf:
          - $ref: '#/components/schemas/ModelSpec'
          description: Detailed specification for the model.
        artifact:
          allOf:
          - $ref: '#/components/schemas/ModelArtifact'
          description: A set of checkpoint files, configs, and other auxiliary info
            associated with this model.
        base_model:
          anyOf:
          - type: string
            title: Reference
            description: A reference to Model.
          - $ref: '#/components/schemas/ModelInput'
          title: Base Model
          description: Link to another model which is used as a base for the current
            model.
        api_endpoint:
          allOf:
          - $ref: '#/components/schemas/APIEndpointData'
          description: Data about the inference endpoint for this model.
        peft:
          allOf:
          - $ref: '#/components/schemas/ParameterEfficientFinetuningData'
          description: Configuration parameters for parameter efficient fine-tuning
            (PEFT) built into this model. PEFT methods like LoRA provide efficient
            model customization by training a small number of additional parameters
            while keeping the base model frozen.
        prompt:
          allOf:
          - $ref: '#/components/schemas/PromptData'
          description: Configuration for prompt engineering, which involves crafting
            input text to guide the model's behavior and responses through system
            prompts, few-shot examples, and other techniques.
        guardrails:
          allOf:
          - $ref: '#/components/schemas/GuardrailConfigInput'
          description: Data about the guardrail configuration built into this model.
            Guardrails provide safety and quality controls around model outputs by
            defining rules and filters that validate, modify or block responses based
            on criteria like toxicity, factuality, or custom business logic.
        schema_version:
          type: string
          title: Schema Version
          description: The version of the schema for the object. Internal use only.
          default: '1.0'
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      title: ModelUpdate
      description: Information about a machine learning model, typically an LLM.
    ModelsPage:
      properties:
        object:
          type: string
          title: Object
          default: list
        data:
          items:
            $ref: '#/components/schemas/ModelOutput'
          type: array
          title: Data
        pagination:
          allOf:
          - $ref: '#/components/schemas/PaginationData'
          description: Pagination information.
        sort:
          type: string
          title: Sort
          description: The field on which the results are sorted.
        filter:
          allOf:
          - $ref: '#/components/schemas/ModelFilter'
          description: Filtering information.
      type: object
      required:
      - data
      title: ModelsPage
    ModelsResponse:
      properties:
        object:
          type: string
          title: Object
          description: The `data` type
          default: list
        data:
          items:
            $ref: '#/components/schemas/ModelsResponseEntry'
          type: array
          title: Data
          description: List of models
      type: object
      title: ModelsResponse
      description: "Struct matching OpenAI /models response as of 20250512\n{\n  \
        \  \"object\": \"list\",\n    \"data\": [\n        {\n            \"id\":\
        \ \"gpt-4o-realtime-preview-2024-12-17\",\n            \"object\": \"model\"\
        ,\n            \"created\": 1733945430,\n            \"owned_by\": \"system\"\
        \n        },\n        ...\n}"
    ModelsResponseEntry:
      properties:
        id:
          type: string
          title: Id
          description: Unique identifier for Model
        object:
          type: string
          title: Object
          description: Unique identifier for Model
          default: model
        created:
          type: integer
          title: Created
          description: Epoch time in seconds when model was created
        owned_by:
          type: string
          title: Owned By
          description: Model Owner
          default: system
      type: object
      title: ModelsResponseEntry
      description: Individual model dict from within ModelsResponse
    NIMDeploymentConfig:
      properties:
        image_name:
          type: string
          title: Image Name
          description: The name of the Docker image.
        image_tag:
          type: string
          title: Image Tag
          description: The tag of the Docker image.
        gpu:
          type: integer
          title: Gpu
          description: The number of GPUs needed for a deployment.
        additional_envs:
          additionalProperties:
            type: string
          type: object
          title: Additional Envs
          description: Additional environment variables to pass to the deployment.
        namespace:
          type: string
          title: Namespace
          description: The Kubernetes namespace of the deployment.
        disable_lora_support:
          type: boolean
          title: Disable Lora Support
          description: '**EXPERIMENTAL**: When true, prevents setting default values
            for NIM_PEFT_SOURCE, NIM_PEFT_REFRESH_INTERVAL and related service-level
            environment variables. This will load the NIM without support for LoRAs.
            This is required for some NIMs which do not support LoRAs. This feature
            is experimental and may change in future versions.

            '
          default: false
          x-experimental: true
      type: object
      required:
      - image_name
      - image_tag
      - gpu
      title: NIMDeploymentConfig
      description: Configuration for a NIM deployment.
    Namespace:
      properties:
        id:
          type: string
          title: Id
          description: The ID of the entity. With the exception of namespaces, this
            is always a semantically-prefixed base58-encoded uuid4 [<prefix>-base58(uuid4())].
        created_at:
          type: string
          format: date-time
          title: Created At
          description: Timestamp for when the entity was created.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: Timestamp for when the entity was last updated.
        description:
          type: string
          title: Description
          description: The description of the entity.
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      title: Namespace
      description: A namespace inside the platform.
    NamespaceInput:
      properties:
        id:
          type: string
          title: Id
          description: The ID of the entity. With the exception of namespaces, this
            is always a semantically-prefixed base58-encoded uuid4 [<prefix>-base58(uuid4())].
        description:
          type: string
          title: Description
          description: The description of the entity.
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      title: NamespaceInput
      description: A namespace inside the platform.
    NamespaceUpdate:
      properties:
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        description:
          type: string
          title: Description
          description: The description of the entity.
        schema_version:
          type: string
          title: Schema Version
          description: The version of the schema for the object. Internal use only.
          default: '1.0'
        project:
          type: string
          title: Project
          description: The URN of the project associated with this entity.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      title: NamespaceUpdate
      description: A namespace inside the platform.
    NamespacesPage:
      properties:
        object:
          type: string
          title: Object
          default: list
        data:
          items:
            $ref: '#/components/schemas/Namespace'
          type: array
          title: Data
        pagination:
          allOf:
          - $ref: '#/components/schemas/PaginationData'
          description: Pagination information.
        sort:
          type: string
          title: Sort
          description: The field on which the results are sorted.
        filter:
          allOf:
          - $ref: '#/components/schemas/NoFilter'
          description: Filtering information.
      type: object
      required:
      - data
      title: NamespacesPage
    NoFilter:
      properties: {}
      type: object
      title: NoFilter
    NodeAffinityInput:
      properties:
        requiredDuringSchedulingIgnoredDuringExecution:
          $ref: '#/components/schemas/NodeSelectorInput'
        preferredDuringSchedulingIgnoredDuringExecution:
          type: array
          items:
            $ref: '#/components/schemas/PreferredSchedulingTermInput'
          title: Preferredduringschedulingignoredduringexecution
      type: object
      title: NodeAffinityInput
    NodeAffinityOutput:
      properties:
        requiredDuringSchedulingIgnoredDuringExecution:
          $ref: '#/components/schemas/NodeSelectorOutput'
        preferredDuringSchedulingIgnoredDuringExecution:
          type: array
          items:
            $ref: '#/components/schemas/PreferredSchedulingTermOutput'
          title: Preferredduringschedulingignoredduringexecution
      type: object
      title: NodeAffinityOutput
    NodeSelectorInput:
      properties:
        nodeSelectorTerms:
          items:
            $ref: '#/components/schemas/NodeSelectorTerm'
          type: array
          title: Nodeselectorterms
      type: object
      required:
      - nodeSelectorTerms
      title: NodeSelectorInput
    NodeSelectorOutput:
      properties:
        nodeSelectorTerms:
          items:
            $ref: '#/components/schemas/NodeSelectorTerm'
          type: array
          title: Nodeselectorterms
      type: object
      required:
      - nodeSelectorTerms
      title: NodeSelectorOutput
    NodeSelectorTerm:
      properties:
        matchExpressions:
          type: array
          items:
            $ref: '#/components/schemas/LabelSelectorRequirement'
          title: Matchexpressions
      type: object
      title: NodeSelectorTerm
    OutputRails:
      properties:
        parallel:
          type: boolean
          title: Parallel
          description: If True, the output rails are executed in parallel.
          default: false
        flows:
          items:
            type: string
          type: array
          title: Flows
          description: The names of all the flows that implement output rails.
        streaming:
          allOf:
          - $ref: '#/components/schemas/OutputRailsStreamingConfig'
          description: Configuration for streaming output rails.
        apply_to_reasoning_traces:
          type: boolean
          title: Apply To Reasoning Traces
          description: If True, output rails will apply guardrails to both reasoning
            traces and output response. If False, output rails will only apply guardrails
            to the output response excluding the reasoning traces, thus keeping reasoning
            traces unaltered.
          default: false
      type: object
      title: OutputRails
      description: Configuration of output rails.
    OutputRailsStreamingConfig:
      properties:
        enabled:
          type: boolean
          title: Enabled
          description: Enables streaming mode when True.
          default: false
        chunk_size:
          type: integer
          title: Chunk Size
          description: The number of tokens in each processing chunk. This is the
            size of the token block on which output rails are applied.
          default: 200
        context_size:
          type: integer
          title: Context Size
          description: The number of tokens carried over from the previous chunk to
            provide context for continuity in processing.
          default: 50
        stream_first:
          type: boolean
          title: Stream First
          description: If True, token chunks are streamed immediately before output
            rails are applied.
          default: true
      type: object
      title: OutputRailsStreamingConfig
      description: Configuration for managing streaming output of LLM tokens.
    OutputStream:
      type: string
      enum:
      - step_outputs
      - logs
      title: OutputStream
    OutputType:
      type: string
      enum:
      - code
      - text
      - structured
      title: OutputType
    Ownership:
      properties:
        created_by:
          type: string
          title: Created By
          description: The ID of the user that created this entity.
          default: ''
        access_policies:
          additionalProperties:
            type: string
          type: object
          title: Access Policies
          description: A general object for capturing access policies which can be
            used by an external service to determine ACLs
          default: {}
      type: object
      title: Ownership
      description: 'Information about ownership of an entity.


        If the entity is a namespace, the `access_policies` will typically apply to
        all entities inside the namespace.'
    PTuningFinetuningData:
      properties:
        token_embeddings:
          items:
            items:
              type: number
            type: array
          type: array
          title: Token Embeddings
          description: Learned continuous prompt embeddings that help optimize the
            model for specific tasks.
      type: object
      required:
      - token_embeddings
      title: PTuningFinetuningData
      description: Data about a p-tuned model.
    PaginationData:
      properties:
        page:
          type: integer
          title: Page
          description: The current page number.
        page_size:
          type: integer
          title: Page Size
          description: The page size used for the query.
        current_page_size:
          type: integer
          title: Current Page Size
          description: The size for the current page.
        total_pages:
          type: integer
          title: Total Pages
          description: The total number of pages.
        total_results:
          type: integer
          title: Total Results
          description: The total number of results.
      type: object
      required:
      - page
      - page_size
      - current_page_size
      - total_pages
      - total_results
      title: PaginationData
    ParameterEfficientFinetuningData:
      properties:
        finetuning_type:
          allOf:
          - $ref: '#/components/schemas/FinetuningType'
          description: The type of finetuning.
        lora:
          allOf:
          - $ref: '#/components/schemas/LoraFinetuningData'
          description: Configuration parameters for low-rank adaptation (LoRA) fine
            tuning, which injects trainable rank decomposition matrices into transformer
            layers to reduce parameters while maintaining quality. These parameters
            control adaptation strength using alpha scaling and layer selection (MLP/output)
            to optimize the balance between model size and performance.
        p_tuning:
          allOf:
          - $ref: '#/components/schemas/PTuningFinetuningData'
          description: Configuration details for P-tuning optimization of the model.
      type: object
      required:
      - finetuning_type
      title: ParameterEfficientFinetuningData
      description: Data about a parameter-efficient finetuning.
    ParameterEfficientFinetuningDataDE:
      properties:
        finetuning_type:
          allOf:
          - $ref: '#/components/schemas/FinetuningTypeDE'
          description: The type of finetuning.
        lora:
          allOf:
          - $ref: '#/components/schemas/LoraFinetuningData'
          description: The Lora finetuning data associated with this finetuning.
        p_tuning:
          allOf:
          - $ref: '#/components/schemas/PTuningFinetuningData'
          description: The p-tuning data associated with this finetuning.
      type: object
      required:
      - finetuning_type
      title: ParameterEfficientFinetuningDataDE
      description: Data about a parameter-efficient finetuning.
    PatronusEvaluateApiParams:
      properties:
        success_strategy:
          allOf:
          - $ref: '#/components/schemas/PatronusEvaluationSuccessStrategy'
          description: Strategy to determine whether the Patronus Evaluate API Guardrail
            passes or not.
          default: all_pass
        params:
          type: object
          title: Params
          description: Parameters to the Patronus Evaluate API
      type: object
      title: PatronusEvaluateApiParams
      description: Config to parameterize the Patronus Evaluate API call
    PatronusEvaluateConfigInput:
      properties:
        evaluate_config:
          allOf:
          - $ref: '#/components/schemas/PatronusEvaluateApiParams'
          description: Configuration passed to the Patronus Evaluate API
      type: object
      title: PatronusEvaluateConfigInput
      description: Config for the Patronus Evaluate API call
    PatronusEvaluateConfigOutput:
      properties:
        evaluate_config:
          allOf:
          - $ref: '#/components/schemas/PatronusEvaluateApiParams'
          description: Configuration passed to the Patronus Evaluate API
      type: object
      title: PatronusEvaluateConfigOutput
      description: Config for the Patronus Evaluate API call
    PatronusEvaluationSuccessStrategy:
      type: string
      enum:
      - all_pass
      - any_pass
      title: PatronusEvaluationSuccessStrategy
      description: 'Strategy for determining whether a Patronus Evaluation API

        request should pass, especially when multiple evaluators

        are called in a single request.

        ALL_PASS requires all evaluators to pass for success.

        ANY_PASS requires only one evaluator to pass for success.'
    PatronusRailConfigInput:
      properties:
        input:
          allOf:
          - $ref: '#/components/schemas/PatronusEvaluateConfigInput'
          description: Patronus Evaluate API configuration for an Input Guardrail
        output:
          allOf:
          - $ref: '#/components/schemas/PatronusEvaluateConfigInput'
          description: Patronus Evaluate API configuration for an Output Guardrail
      type: object
      title: PatronusRailConfigInput
      description: Configuration data for the Patronus Evaluate API
    PatronusRailConfigOutput:
      properties:
        input:
          allOf:
          - $ref: '#/components/schemas/PatronusEvaluateConfigOutput'
          description: Patronus Evaluate API configuration for an Input Guardrail
        output:
          allOf:
          - $ref: '#/components/schemas/PatronusEvaluateConfigOutput'
          description: Patronus Evaluate API configuration for an Output Guardrail
      type: object
      title: PatronusRailConfigOutput
      description: Configuration data for the Patronus Evaluate API
    PersonSamplerParams:
      properties:
        locale:
          type: string
          title: Locale
          description: Locale string, determines the language and geographic locale
            that a synthetic person will be sampled from. E.g, en_US, en_GB, fr_FR,
            ...
          default: en_US
        sex:
          allOf:
          - $ref: '#/components/schemas/Sex'
          title: Sex
          description: If specified, then only synthetic people of the specified sex
            will be sampled.
        city:
          anyOf:
          - items:
              type: string
            type: array
          - type: string
          title: City
          description: If specified, then only synthetic people from these cities
            will be sampled.
        age_range:
          type: array
          items:
            type: integer
          title: Age Range
          description: If specified, then only synthetic people within this age range
            will be sampled.
          default:
          - 18
          - 114
        state:
          anyOf:
          - items:
              type: string
            type: array
          - type: string
          title: State
          description: Only supported for 'en_US' locale. If specified, then only
            synthetic people from these states will be sampled. States must be given
            as two-letter abbreviations.
        with_synthetic_personas:
          type: boolean
          title: With Synthetic Personas
          description: If True, then append synthetic persona columns to each generated
            person.
          default: false
      type: object
      title: PersonSamplerParams
    PlatformJob:
      properties:
        id:
          type: string
          title: Id
        name:
          type: string
          title: Name
        description:
          type: string
          title: Description
        project:
          type: string
          title: Project
        created_at:
          type: string
          format: date-time
          title: Created At
        updated_at:
          type: string
          format: date-time
          title: Updated At
        source:
          type: string
          title: Source
        spec:
          type: object
          title: Spec
          description: Job Spec
        platform_spec:
          $ref: '#/components/schemas/PlatformJobSpecOutput'
        status:
          allOf:
          - $ref: '#/components/schemas/PlatformJobStatus'
          default: created
        status_details:
          type: object
          title: Status Details
        warnings:
          type: array
          items:
            type: object
          title: Warnings
        ownership:
          type: object
          title: Ownership
        custom_fields:
          type: object
          title: Custom Fields
          description: Custom Fields
      type: object
      required:
      - id
      - name
      - source
      - spec
      - platform_spec
      title: PlatformJob
    PlatformJobLog:
      properties:
        id:
          type: integer
          title: Id
        timestamp:
          type: string
          format: date-time
          title: Timestamp
        job_id:
          type: string
          title: Job Id
        job_step:
          type: string
          title: Job Step
        message:
          type: string
          title: Message
      type: object
      required:
      - id
      - timestamp
      - job_id
      - job_step
      - message
      title: PlatformJobLog
    PlatformJobLogPage:
      properties:
        logs:
          items:
            $ref: '#/components/schemas/PlatformJobLog'
          type: array
          title: Logs
        total:
          type: integer
          title: Total
        next_page:
          type: string
          title: Next Page
        prev_page:
          type: string
          title: Prev Page
      type: object
      required:
      - logs
      - total
      - next_page
      - prev_page
      title: PlatformJobLogPage
    PlatformJobRequest:
      properties:
        name:
          type: string
          title: Name
        description:
          type: string
          title: Description
        project:
          type: string
          title: Project
        spec:
          type: object
          title: Spec
        platform_spec:
          $ref: '#/components/schemas/PlatformJobSpecInput'
        source:
          type: string
          title: Source
        ownership:
          type: object
          title: Ownership
        custom_fields:
          type: object
          title: Custom Fields
      type: object
      required:
      - name
      - spec
      - platform_spec
      - source
      title: PlatformJobRequest
    PlatformJobResult:
      properties:
        job_id:
          type: string
          title: Job Id
        result_id:
          type: string
          title: Result Id
        status:
          $ref: '#/components/schemas/PlatformJobStatus'
      type: object
      required:
      - job_id
      - result_id
      - status
      title: PlatformJobResult
    PlatformJobResultListFilter:
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/PlatformJobStatus'
          description: The current status.
      type: object
      title: PlatformJobResultListFilter
    PlatformJobResultSortField:
      type: string
      enum:
      - created_at
      - -created_at
      - updated_at
      - -updated_at
      title: PlatformJobResultSortField
    PlatformJobResultsPage:
      properties:
        object:
          type: string
          title: Object
          description: The type of object being returned.
          default: list
        data:
          items:
            $ref: '#/components/schemas/PlatformJobResult'
          type: array
          title: Data
        pagination:
          allOf:
          - $ref: '#/components/schemas/PaginationData'
          description: Pagination information.
        sort:
          type: string
          title: Sort
          description: The field on which the results are sorted.
        filter:
          allOf:
          - $ref: '#/components/schemas/PlatformJobResultListFilter'
          description: Filtering information.
      type: object
      required:
      - data
      title: PlatformJobResultsPage
    PlatformJobSortField:
      type: string
      enum:
      - created_at
      - -created_at
      - updated_at
      - -updated_at
      title: PlatformJobSortField
    PlatformJobSpecInput:
      properties:
        steps:
          items:
            $ref: '#/components/schemas/PlatformJobStepInput'
          type: array
          title: Steps
      type: object
      required:
      - steps
      title: PlatformJobSpecInput
    PlatformJobSpecOutput:
      properties:
        steps:
          items:
            $ref: '#/components/schemas/PlatformJobStepOutput'
          type: array
          title: Steps
      type: object
      required:
      - steps
      title: PlatformJobSpecOutput
    PlatformJobStatus:
      type: string
      enum:
      - created
      - pending
      - active
      - cancelled
      - cancelling
      - error
      - completed
      title: PlatformJobStatus
      description: 'Enumeration of possible job statuses.


        This enum represents the various states a job can be in during its lifecycle,

        from creation to a terminal state.'
    PlatformJobStatusUpdateRequest:
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/PlatformJobStatus'
          description: The new status to set for the job.
        status_details:
          type: object
          title: Status Details
          description: Optional details about the status update.
      type: object
      required:
      - status
      title: PlatformJobStatusUpdateRequest
      description: 'Request model for updating job status.


        This model is used when updating the status of a job.'
    PlatformJobStepInput:
      properties:
        name:
          type: string
          title: Name
        environment:
          type: object
          title: Environment
        executor:
          anyOf:
          - type: string
          - oneOf:
            - $ref: '#/components/schemas/CPUExecutionProvider'
            discriminator:
              propertyName: provider
              mapping:
                cpu: '#/components/schemas/CPUExecutionProvider'
          title: Executor
        config:
          type: object
          title: Config
      type: object
      required:
      - name
      - executor
      - config
      title: PlatformJobStepInput
    PlatformJobStepOutput:
      properties:
        name:
          type: string
          title: Name
        environment:
          type: object
          title: Environment
        executor:
          anyOf:
          - type: string
          - oneOf:
            - $ref: '#/components/schemas/CPUExecutionProvider'
            discriminator:
              propertyName: provider
              mapping:
                cpu: '#/components/schemas/CPUExecutionProvider'
          title: Executor
        config:
          type: object
          title: Config
      type: object
      required:
      - name
      - executor
      - config
      title: PlatformJobStepOutput
    PlatformJobsListFilter:
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/PlatformJobStatus'
          description: The current status.
        source:
          type: string
          title: Source
          description: The source of the job.
      type: object
      title: PlatformJobsListFilter
    PlatformJobsPage:
      properties:
        object:
          type: string
          title: Object
          description: The type of object being returned.
          default: list
        data:
          items:
            $ref: '#/components/schemas/PlatformJob'
          type: array
          title: Data
        pagination:
          allOf:
          - $ref: '#/components/schemas/PaginationData'
          description: Pagination information.
        sort:
          type: string
          title: Sort
          description: The field on which the results are sorted.
        filter:
          allOf:
          - $ref: '#/components/schemas/PlatformJobsListFilter'
          description: Filtering information.
      type: object
      required:
      - data
      title: PlatformJobsPage
    PoissonSamplerParams:
      properties:
        mean:
          type: number
          title: Mean
          description: Mean number of events in a fixed interval.
      type: object
      required:
      - mean
      title: PoissonSamplerParams
    PreferredSchedulingTermInput:
      properties:
        weight:
          type: integer
          title: Weight
        preference:
          $ref: '#/components/schemas/LabelSelectorTerm'
      type: object
      required:
      - weight
      - preference
      title: PreferredSchedulingTermInput
    PreferredSchedulingTermOutput:
      properties:
        weight:
          type: integer
          title: Weight
        preference:
          $ref: '#/components/schemas/LabelSelectorTerm'
      type: object
      required:
      - weight
      - preference
      title: PreferredSchedulingTermOutput
    PreviewRequest:
      properties:
        config:
          $ref: '#/components/schemas/DataDesignerConfig'
      type: object
      required:
      - config
      title: PreviewRequest
    PrivateAIDetection:
      properties:
        server_endpoint:
          type: string
          title: Server Endpoint
          description: The endpoint for the private AI detection server.
          default: http://localhost:8080/process/text
        input:
          allOf:
          - $ref: '#/components/schemas/PrivateAIDetectionOptions'
          description: Configuration of the entities to be detected on the user input.
        output:
          allOf:
          - $ref: '#/components/schemas/PrivateAIDetectionOptions'
          description: Configuration of the entities to be detected on the bot output.
        retrieval:
          allOf:
          - $ref: '#/components/schemas/PrivateAIDetectionOptions'
          description: Configuration of the entities to be detected on retrieved relevant
            chunks.
      type: object
      title: PrivateAIDetection
      description: Configuration for Private AI.
    PrivateAIDetectionOptions:
      properties:
        entities:
          items:
            type: string
          type: array
          title: Entities
          description: The list of entities that should be detected.
      type: object
      title: PrivateAIDetectionOptions
      description: Configuration options for Private AI.
    Project:
      properties:
        created_at:
          type: string
          format: date-time
          title: Created At
          description: Timestamp for when the entity was created.
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: Timestamp for when the entity was last updated.
        name:
          type: string
          maxLength: 255
          pattern: ^[\w\-\+.@:]*$
          title: Name
          description: The name of the entity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
          default: ''
        description:
          type: string
          title: Description
          description: The description of the entity.
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      title: Project
      description: A project is a logical grouping of multiple resources.
    ProjectFilter:
      properties:
        name:
          type: string
          title: Name
          description: Filter by project name.
        namespace:
          type: string
          title: Namespace
          description: Filter by namespace id.
      type: object
      title: ProjectFilter
    ProjectInput:
      properties:
        name:
          type: string
          maxLength: 255
          pattern: ^[\w\-\+.@:]*$
          title: Name
          description: The name of the entity. Must be unique inside the namespace.
            If not specified, it will be the same as the automatically generated id.
          default: ''
        description:
          type: string
          title: Description
          description: The description of the entity.
        namespace:
          type: string
          title: Namespace
          description: The namespace of the entity. This can be missing for namespace
            entities or in deployments that don't use namespaces.
          default: default
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      title: ProjectInput
      description: A project is a logical grouping of multiple resources.
    ProjectSortField:
      type: string
      enum:
      - created_at
      - -created_at
      - name
      - -name
      title: ProjectSortField
    ProjectUpdate:
      properties:
        description:
          type: string
          title: Description
          description: The description of the entity.
        custom_fields:
          type: object
          additionalProperties:
            type: string
          title: Custom Fields
          description: A set of custom fields that the user can define and use for
            various purposes.
        ownership:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Ownership information for the entity
      type: object
      title: ProjectUpdate
      description: A project is a logical grouping of multiple resources.
    ProjectsPage:
      properties:
        object:
          type: string
          title: Object
          default: list
        data:
          items:
            $ref: '#/components/schemas/Project'
          type: array
          title: Data
        pagination:
          allOf:
          - $ref: '#/components/schemas/PaginationData'
          description: Pagination information.
        sort:
          type: string
          title: Sort
          description: The field on which the results are sorted.
        filter:
          allOf:
          - $ref: '#/components/schemas/ProjectFilter'
          description: Filtering information.
      type: object
      required:
      - data
      title: ProjectsPage
    PromptData:
      properties:
        system_prompt:
          type: string
          title: System Prompt
          description: Initial instructions that define the model's role and behavior
            for the conversation.
        inference_params:
          allOf:
          - $ref: '#/components/schemas/InferenceParams'
          description: Custom settings that control the model's text generation behavior.
        reasoning_params:
          allOf:
          - $ref: '#/components/schemas/ReasoningParams'
          description: Custom settings that control the model's reasoning behavior.
        icl_few_shot_examples:
          type: string
          title: Few-shot In-Context Learning
          description: Example input-output pairs that guide the model in understanding
            the desired task format and behavior.
        system_prompt_template:
          type: string
          title: System Prompt Template
          description: The template which will be used to compile the final prompt
            used for prompting the LLM. Currently supports only {{icl_few_shot_examples}}
      type: object
      title: PromptData
      description: Prompt engineering data.
    PromptDataDE:
      properties:
        system_prompt:
          type: string
          title: System Prompt
          description: The system prompt that should be applied during inference.
        inference_params:
          allOf:
          - $ref: '#/components/schemas/InferenceParams'
          description: Inference parameters that should be overridden.
        icl_few_shot_examples:
          type: string
          title: Few-shot In-Context Learning
          description: A string including a set of examples. These are pre-pended
            to the prompt.
        system_prompt_template:
          type: string
          title: System Prompt Template
          description: The template which will be used to compile the final prompt
            used for prompting the LLM. Currently supports only {{icl_few_shot_examples}}
      type: object
      title: PromptDataDE
      description: Prompt engineering data.
    RAGPipelineDataInput:
      properties:
        retriever:
          allOf:
          - $ref: '#/components/schemas/RetrieverTargetInput'
          description: The retriever pipeline included in the RAG pipeline.
        model:
          anyOf:
          - type: string
            title: Reference
            description: A reference to ModelInputEV.
          - $ref: '#/components/schemas/ModelInputEV'
          title: Model
          description: The generation model for the RAG pipeline.
        context_ordering:
          type: string
          title: Context Ordering
          description: The context ordering for the RAG pipeline.
          default: desc
      type: object
      required:
      - retriever
      - model
      title: RAGPipelineDataInput
      description: Data for evaluating a RAG pipeline.
    RAGPipelineDataOutput:
      properties:
        retriever:
          allOf:
          - $ref: '#/components/schemas/RetrieverTargetOutput'
          description: The retriever pipeline included in the RAG pipeline.
        model:
          anyOf:
          - type: string
            title: Reference
            description: A reference to ModelOutputEV.
          - $ref: '#/components/schemas/ModelOutputEV'
          title: Model
          description: The generation model for the RAG pipeline.
        context_ordering:
          type: string
          title: Context Ordering
          description: The context ordering for the RAG pipeline.
          default: desc
      type: object
      required:
      - retriever
      - model
      title: RAGPipelineDataOutput
      description: Data for evaluating a RAG pipeline.
    RAGTargetInput:
      properties:
        pipeline:
          allOf:
          - $ref: '#/components/schemas/RAGPipelineDataInput'
          description: RAG pipeline.
        cached_outputs:
          allOf:
          - $ref: '#/components/schemas/CachedOutputsData'
          description: Cached pre-generated RAG outputs.
      type: object
      title: RAGTargetInput
    RAGTargetOutput:
      properties:
        pipeline:
          allOf:
          - $ref: '#/components/schemas/RAGPipelineDataOutput'
          description: RAG pipeline.
        cached_outputs:
          allOf:
          - $ref: '#/components/schemas/CachedOutputsData'
          description: Cached pre-generated RAG outputs.
      type: object
      title: RAGTargetOutput
    RailStatus:
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/StatusEnum'
          description: Status of the individual rail.
      type: object
      required:
      - status
      title: RailStatus
    RailsConfigDataInput:
      properties:
        fact_checking:
          $ref: '#/components/schemas/FactCheckingRailConfig'
        autoalign:
          allOf:
          - $ref: '#/components/schemas/AutoAlignRailConfig'
          description: Configuration data for the AutoAlign guardrails API.
        patronus:
          allOf:
          - $ref: '#/components/schemas/PatronusRailConfigInput'
          description: Configuration data for the Patronus Evaluate API.
        sensitive_data_detection:
          allOf:
          - $ref: '#/components/schemas/SensitiveDataDetection'
          description: Configuration for detecting sensitive data.
        jailbreak_detection:
          allOf:
          - $ref: '#/components/schemas/JailbreakDetectionConfig'
          description: Configuration for jailbreak detection.
        injection_detection:
          allOf:
          - $ref: '#/components/schemas/InjectionDetection'
          description: Configuration for injection detection.
        privateai:
          allOf:
          - $ref: '#/components/schemas/PrivateAIDetection'
          description: Configuration for Private AI.
        fiddler:
          allOf:
          - $ref: '#/components/schemas/FiddlerGuardrails'
          description: Configuration for Fiddler Guardrails.
        clavata:
          allOf:
          - $ref: '#/components/schemas/ClavataRailConfig'
          description: Configuration for Clavata.
      type: object
      title: RailsConfigDataInput
      description: Configuration data for specific rails that are supported out-of-the-box.
    RailsConfigDataOutput:
      properties:
        fact_checking:
          $ref: '#/components/schemas/FactCheckingRailConfig'
        autoalign:
          allOf:
          - $ref: '#/components/schemas/AutoAlignRailConfig'
          description: Configuration data for the AutoAlign guardrails API.
        patronus:
          allOf:
          - $ref: '#/components/schemas/PatronusRailConfigOutput'
          description: Configuration data for the Patronus Evaluate API.
        sensitive_data_detection:
          allOf:
          - $ref: '#/components/schemas/SensitiveDataDetection'
          description: Configuration for detecting sensitive data.
        jailbreak_detection:
          allOf:
          - $ref: '#/components/schemas/JailbreakDetectionConfig'
          description: Configuration for jailbreak detection.
        injection_detection:
          allOf:
          - $ref: '#/components/schemas/InjectionDetection'
          description: Configuration for injection detection.
        privateai:
          allOf:
          - $ref: '#/components/schemas/PrivateAIDetection'
          description: Configuration for Private AI.
        fiddler:
          allOf:
          - $ref: '#/components/schemas/FiddlerGuardrails'
          description: Configuration for Fiddler Guardrails.
        clavata:
          allOf:
          - $ref: '#/components/schemas/ClavataRailConfig'
          description: Configuration for Clavata.
      type: object
      title: RailsConfigDataOutput
      description: Configuration data for specific rails that are supported out-of-the-box.
    RailsInput:
      properties:
        config:
          allOf:
          - $ref: '#/components/schemas/RailsConfigDataInput'
          description: Configuration data for specific rails that are supported out-of-the-box.
        input:
          allOf:
          - $ref: '#/components/schemas/InputRails'
          description: Configuration of the input rails.
        output:
          allOf:
          - $ref: '#/components/schemas/OutputRails'
          description: Configuration of the output rails.
        retrieval:
          allOf:
          - $ref: '#/components/schemas/RetrievalRails'
          description: Configuration of the retrieval rails.
        dialog:
          allOf:
          - $ref: '#/components/schemas/DialogRails'
          description: Configuration of the dialog rails.
        actions:
          allOf:
          - $ref: '#/components/schemas/ActionRails'
          description: Configuration of action rails.
      additionalProperties: false
      type: object
      title: RailsInput
      description: Configuration of specific rails.
    RailsOutput:
      properties:
        config:
          allOf:
          - $ref: '#/components/schemas/RailsConfigDataOutput'
          description: Configuration data for specific rails that are supported out-of-the-box.
        input:
          allOf:
          - $ref: '#/components/schemas/InputRails'
          description: Configuration of the input rails.
        output:
          allOf:
          - $ref: '#/components/schemas/OutputRails'
          description: Configuration of the output rails.
        retrieval:
          allOf:
          - $ref: '#/components/schemas/RetrievalRails'
          description: Configuration of the retrieval rails.
        dialog:
          allOf:
          - $ref: '#/components/schemas/DialogRails'
          description: Configuration of the dialog rails.
        actions:
          allOf:
          - $ref: '#/components/schemas/ActionRails'
          description: Configuration of action rails.
      additionalProperties: false
      type: object
      title: RailsOutput
      description: Configuration of specific rails.
    ReasoningModelConfig:
      properties:
        remove_reasoning_traces:
          type: boolean
          title: Remove Reasoning Traces
          description: For reasoning models (e.g. DeepSeek-r1), if the output parser
            should remove reasoning traces.
          default: true
        remove_thinking_traces:
          type: boolean
          title: Remove Thinking Traces
          deprecated: true
        start_token:
          type: string
          title: Start Token
          description: The start token used for reasoning traces.
          default: <think>
        end_token:
          type: string
          title: End Token
          description: The end token used for reasoning traces.
          default: </think>
      type: object
      title: ReasoningModelConfig
      description: Configuration for reasoning models/LLMs, including start and end
        tokens for reasoning traces.
    ReasoningParams:
      properties:
        end_token:
          type: string
          title: End Token
          description: Configure the end token to trim reasoning context based on
            the model's reasoning API. Used for omitting Nemotron reasoning steps
            from output denoted with </think> tags
        effort:
          type: string
          title: Effort
          description: Option for OpenAI models to specify low, medium, or high reasoning
            effort which balances between speed and reasoning accuracy.
      type: object
      title: ReasoningParams
      description: Custom settings that control the model's reasoning behavior.
    RetrievalRails:
      properties:
        flows:
          items:
            type: string
          type: array
          title: Flows
          description: The names of all the flows that implement retrieval rails.
      type: object
      title: RetrievalRails
      description: Configuration of retrieval rails.
    RetrieverPipelineDataInput:
      properties:
        query_embedding_model:
          anyOf:
          - type: string
            title: Reference
            description: A reference to ModelInputEV.
          - $ref: '#/components/schemas/ModelInputEV'
          title: Query Embedding Model
          description: The query embedding model.
        index_embedding_model:
          anyOf:
          - type: string
            title: Reference
            description: A reference to ModelInputEV.
          - $ref: '#/components/schemas/ModelInputEV'
          title: Index Embedding Model
          description: The index embedding model.
        reranker_model:
          anyOf:
          - type: string
            title: Reference
            description: A reference to ModelInputEV.
          - $ref: '#/components/schemas/ModelInputEV'
          title: Reranker Model
          description: The reranker model.
        top_k:
          type: integer
          title: Top K
          description: The top k results to be used.
          default: 10
      type: object
      required:
      - query_embedding_model
      - index_embedding_model
      title: RetrieverPipelineDataInput
      description: Data for evaluating a retriever pipeline.
    RetrieverPipelineDataOutput:
      properties:
        query_embedding_model:
          anyOf:
          - type: string
            title: Reference
            description: A reference to ModelOutputEV.
          - $ref: '#/components/schemas/ModelOutputEV'
          title: Query Embedding Model
          description: The query embedding model.
        index_embedding_model:
          anyOf:
          - type: string
            title: Reference
            description: A reference to ModelOutputEV.
          - $ref: '#/components/schemas/ModelOutputEV'
          title: Index Embedding Model
          description: The index embedding model.
        reranker_model:
          anyOf:
          - type: string
            title: Reference
            description: A reference to ModelOutputEV.
          - $ref: '#/components/schemas/ModelOutputEV'
          title: Reranker Model
          description: The reranker model.
        top_k:
          type: integer
          title: Top K
          description: The top k results to be used.
          default: 10
      type: object
      required:
      - query_embedding_model
      - index_embedding_model
      title: RetrieverPipelineDataOutput
      description: Data for evaluating a retriever pipeline.
    RetrieverTargetInput:
      properties:
        pipeline:
          allOf:
          - $ref: '#/components/schemas/RetrieverPipelineDataInput'
          description: Retriever pipeline run by Evaluator.
        cached_outputs:
          allOf:
          - $ref: '#/components/schemas/CachedOutputsData'
          description: Cached pre-generated retriever outputs.
      type: object
      title: RetrieverTargetInput
    RetrieverTargetOutput:
      properties:
        pipeline:
          allOf:
          - $ref: '#/components/schemas/RetrieverPipelineDataOutput'
          description: Retriever pipeline run by Evaluator.
        cached_outputs:
          allOf:
          - $ref: '#/components/schemas/CachedOutputsData'
          description: Cached pre-generated retriever outputs.
      type: object
      title: RetrieverTargetOutput
    Rubric:
      properties:
        scoring:
          additionalProperties:
            type: string
          type: object
          title: Scoring
          description: 'Dictionary specifying score: description pairs for rubric
            scoring.'
        name:
          type: string
          title: Name
          description: A clear, pythonic class name for this rubric.
        description:
          type: string
          title: Description
          description: An informative and detailed assessment guide for using this
            rubric.
          default: ''
      type: object
      required:
      - scoring
      - name
      title: Rubric
    SFTParameters:
      properties:
        hidden_dropout:
          type: number
          title: Hidden Dropout
          description: Dropout probability for hidden state transformer.
        attention_dropout:
          type: number
          title: Attention Dropout
          description: Dropout probability for attention.
      type: object
      title: SFTParameters
      description: Specific parameters for SFT.
    SamplerColumn:
      properties:
        name:
          type: string
          title: Name
        type:
          $ref: '#/components/schemas/SamplerType'
        params:
          anyOf:
          - $ref: '#/components/schemas/SubcategorySamplerParams'
          - $ref: '#/components/schemas/CategorySamplerParams'
          - $ref: '#/components/schemas/DatetimeSamplerParams'
          - $ref: '#/components/schemas/PersonSamplerParams'
          - $ref: '#/components/schemas/TimeDeltaSamplerParams'
          - $ref: '#/components/schemas/UUIDSamplerParams'
          - $ref: '#/components/schemas/BernoulliSamplerParams'
          - $ref: '#/components/schemas/BernoulliMixtureSamplerParams'
          - $ref: '#/components/schemas/BinomialSamplerParams'
          - $ref: '#/components/schemas/GaussianSamplerParams'
          - $ref: '#/components/schemas/PoissonSamplerParams'
          - $ref: '#/components/schemas/UniformSamplerParams'
          - $ref: '#/components/schemas/ScipySamplerParams'
          title: Params
        conditional_params:
          type: object
          additionalProperties:
            anyOf:
            - $ref: '#/components/schemas/SubcategorySamplerParams'
            - $ref: '#/components/schemas/CategorySamplerParams'
            - $ref: '#/components/schemas/DatetimeSamplerParams'
            - $ref: '#/components/schemas/PersonSamplerParams'
            - $ref: '#/components/schemas/TimeDeltaSamplerParams'
            - $ref: '#/components/schemas/UUIDSamplerParams'
            - $ref: '#/components/schemas/BernoulliSamplerParams'
            - $ref: '#/components/schemas/BernoulliMixtureSamplerParams'
            - $ref: '#/components/schemas/BinomialSamplerParams'
            - $ref: '#/components/schemas/GaussianSamplerParams'
            - $ref: '#/components/schemas/PoissonSamplerParams'
            - $ref: '#/components/schemas/UniformSamplerParams'
            - $ref: '#/components/schemas/ScipySamplerParams'
          title: Conditional Params
          default: {}
        convert_to:
          type: string
          title: Convert To
        drop:
          type: boolean
          title: Drop
          description: If true, remove this column from the final dataset before evaluation.
          default: false
      type: object
      required:
      - name
      - type
      - params
      title: SamplerColumn
      description: "Data Designer column that uses a sampler to generate data.\n\n\
        Sampler columns can be conditioned on other sampler columns using the `conditional_params`\
        \ argument,\nwhich is a dictionary of conditions and parameters. Conditions\
        \ are specified as strings involving\nthe names of other sampler columns and\
        \ the operators `==`, `!=`, `>`, `>=`, `<`, `<=`.\n\nArgs:\n    name: Name\
        \ of the column.\n    type: Type of sampler to use.\n    params: Parameters\
        \ for the sampler. If conditional_params are provided,\n        these parameters\
        \ will be used as the default when no condition is met.\n    conditional_params:\
        \ Conditional parameters for the sampler. The keys of the\n        dict are\
        \ conditions from other columns, and the values are the parameters\n     \
        \   for the sampler.\n    convert_to: Optional data conversion to apply to\
        \ the generated data. For\n        numerical columns this can be \"int\" or\
        \ \"float\", and for datetime columns,\n        this can be a datetime format\
        \ string (e.g. \"%Y/%m/%d\")."
    SamplerType:
      type: string
      enum:
      - bernoulli
      - bernoulli_mixture
      - binomial
      - category
      - datetime
      - gaussian
      - person
      - poisson
      - scipy
      - subcategory
      - timedelta
      - uniform
      - uuid
      title: SamplerType
    SamplingStrategy:
      type: string
      enum:
      - ordered
      - shuffle
      title: SamplingStrategy
    ScipySamplerParams:
      properties:
        dist_name:
          type: string
          title: Dist Name
          description: Name of a scipy.stats distribution.
        dist_params:
          type: object
          title: Dist Params
          description: Parameters of the scipy.stats distribution given in `dist_name`.
      type: object
      required:
      - dist_name
      - dist_params
      title: ScipySamplerParams
    Score:
      properties:
        value:
          type: number
          title: Value
        stats:
          allOf:
          - $ref: '#/components/schemas/ScoreStats'
          description: Computed score statistics for the score.
      type: object
      required:
      - value
      title: Score
      description: A core computed for a metric, as part of an evaluation.
    ScoreStats:
      properties:
        count:
          type: integer
          title: Count
          description: The number of values used for computing the score.
        sum:
          type: number
          title: Sum
          description: The sum of all values used for computing the score.
        sum_squared:
          type: number
          title: Sum Squared
          description: The sum of the square of all values used for computing the
            score.
        min:
          type: number
          title: Min
          description: The minimum of all values used for computing the score.
        max:
          type: number
          title: Max
          description: The maximum of all values used for computing the score.
        mean:
          type: number
          title: Mean
          description: The mean of all values used for computing the score.
        variance:
          type: number
          title: Variance
          description: "This is the population variance, not the sample variance.\n\
            \n        See https://towardsdatascience.com/variance-sample-vs-population-3ddbd29e498a\n\
            \        for details."
        stddev:
          type: number
          title: Stddev
          description: "This is the population standard deviation, not the sample\
            \ standard deviation.\n\n        See https://towardsdatascience.com/variance-sample-vs-population-3ddbd29e498a\n\
            \        for details.\n    "
        stderr:
          type: number
          title: Stderr
          description: The standard error.
      type: object
      title: ScoreStats
      description: Stats for a score.
    Seed:
      properties:
        dataset:
          type: string
          title: Dataset
        sampling_strategy:
          allOf:
          - $ref: '#/components/schemas/SamplingStrategy'
          default: ordered
        with_replacement:
          type: boolean
          title: With Replacement
          default: false
      type: object
      required:
      - dataset
      title: Seed
    SensitiveDataDetection:
      properties:
        recognizers:
          items:
            type: object
          type: array
          title: Recognizers
          description: Additional custom recognizers. Check out https://microsoft.github.io/presidio/tutorial/08_no_code/
            for more details.
        input:
          allOf:
          - $ref: '#/components/schemas/SensitiveDataDetectionOptions'
          description: Configuration of the entities to be detected on the user input.
        output:
          allOf:
          - $ref: '#/components/schemas/SensitiveDataDetectionOptions'
          description: Configuration of the entities to be detected on the bot output.
        retrieval:
          allOf:
          - $ref: '#/components/schemas/SensitiveDataDetectionOptions'
          description: Configuration of the entities to be detected on retrieved relevant
            chunks.
      type: object
      title: SensitiveDataDetection
      description: Configuration of what sensitive data should be detected.
    SensitiveDataDetectionOptions:
      properties:
        entities:
          items:
            type: string
          type: array
          title: Entities
          description: The list of entities that should be detected. Check out https://microsoft.github.io/presidio/supported_entities/
            forthe list of supported entities.
        mask_token:
          type: string
          title: Mask Token
          description: The token that should be used to mask the sensitive data.
          default: '*'
        score_threshold:
          type: number
          title: Score Threshold
          description: The score threshold that should be used to detect the sensitive
            data.
          default: 0.2
      type: object
      title: SensitiveDataDetectionOptions
    Sex:
      type: string
      enum:
      - Male
      - Female
      title: Sex
    SingleCallConfig:
      properties:
        enabled:
          type: boolean
          title: Enabled
          default: false
        fallback_to_multiple_calls:
          type: boolean
          title: Fallback To Multiple Calls
          description: Whether to fall back to multiple calls if a single call is
            not possible.
          default: true
      type: object
      title: SingleCallConfig
      description: Configuration for the single LLM call option for topical rails.
    StatusEnum:
      type: string
      enum:
      - blocked
      - success
      title: StatusEnum
    StatusLog:
      properties:
        updated_at:
          type: string
          format: date-time
          title: Updated At
          description: The time when the status was updated.
        message:
          type: string
          title: Message
          description: Optional message for the status of the job.
        detail:
          type: string
          title: Detail
          description: Optional details for the status of the job.
      type: object
      required:
      - updated_at
      title: StatusLog
    SubcategorySamplerParams:
      properties:
        category:
          type: string
          title: Category
          description: Name of parent category to this subcategory.
        values:
          additionalProperties:
            items:
              anyOf:
              - type: string
              - type: integer
              - type: number
            type: array
          type: object
          title: Values
          description: Mapping from each value of parent category to a list of subcategory
            values.
      type: object
      required:
      - category
      - values
      title: SubcategorySamplerParams
    TargetStatus:
      type: string
      enum:
      - created
      - pending
      - downloading
      - failed
      - ready
      - cancelled
      - unknown
      - deleted
      - deleting
      - delete_failed
      title: TargetStatus
      description: 'Normalized statuses for targets.


        - **CREATED**: The target is created, but not yet scheduled.

        - **PENDING**: The target is waiting for resource allocation.

        - **DOWNLOADING**: The target is downloading.

        - **FAILED**: The target failed to execute and terminated.

        - **READY**: The target is ready to be used.

        - **CANCELLED**: The target download was cancelled.

        - **UNKNOWN**: The target status is unknown.

        - **DELETED**: The target is deleted.

        - **DELETING**: The target is currently being deleted.

        - **DELETE_FAILED**: Failed to delete the target.'
    TargetType:
      type: string
      enum:
      - model
      - cached_outputs
      - retriever
      - rag
      - rows
      - dataset
      title: TargetType
    TaskConfigInput:
      properties:
        type:
          type: string
          title: Type
          description: The type of the task.
        params:
          type: object
          title: Params
          description: Additional parameters related to the task.
        metrics:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MetricConfig'
          title: Metrics
          description: Metrics to be computed for the task.
        dataset:
          anyOf:
          - type: string
            title: Reference
            description: A reference to DatasetInputEV.
          - $ref: '#/components/schemas/DatasetInputEV'
          title: Dataset
          description: Optional dataset reference.Typically, if not specified, means
            that the type of task has an implicit dataset.
      type: object
      required:
      - type
      title: TaskConfigInput
      description: Configuration object for a task which is part of an evaluation.
    TaskConfigOutput:
      properties:
        type:
          type: string
          title: Type
          description: The type of the task.
        params:
          type: object
          title: Params
          description: Additional parameters related to the task.
        metrics:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MetricConfig'
          title: Metrics
          description: Metrics to be computed for the task.
        dataset:
          anyOf:
          - type: string
            title: Reference
            description: A reference to DatasetEV.
          - $ref: '#/components/schemas/DatasetEV'
          title: Dataset
          description: Optional dataset reference.Typically, if not specified, means
            that the type of task has an implicit dataset.
      type: object
      required:
      - type
      title: TaskConfigOutput
      description: Configuration object for a task which is part of an evaluation.
    TaskPrompt:
      properties:
        task:
          type: string
          title: Task
          description: The id of the task associated with this prompt.
        content:
          type: string
          title: Content
          description: The content of the prompt, if it's a string.
        messages:
          type: array
          items:
            anyOf:
            - $ref: '#/components/schemas/MessageTemplate'
            - type: string
          title: Messages
          description: The list of messages included in the prompt. Used for chat
            models.
        models:
          type: array
          items:
            type: string
          title: Models
          description: 'If specified, the prompt will be used only for the given LLM
            engines/models. The format is a list of strings with the format: <engine>
            or <engine>/<model>.'
        output_parser:
          type: string
          title: Output Parser
          description: The name of the output parser to use for this prompt.
        max_length:
          type: integer
          title: Max Length
          description: The maximum length of the prompt in number of characters.
          default: 16000
        mode:
          type: string
          title: Mode
          description: Corresponds to the `prompting_mode` for which this prompt is
            fetched. Default is 'standard'.
          default: standard
        stop:
          type: array
          items:
            type: string
          title: Stop
          description: If specified, will be configure stop tokens for models that
            support this.
        max_tokens:
          type: integer
          title: Max Tokens
          description: The maximum number of tokens that can be generated in the chat
            completion.
      type: object
      required:
      - task
      title: TaskPrompt
      description: Configuration for prompts that will be used for a specific task.
    TaskResultInput:
      properties:
        metrics:
          additionalProperties:
            $ref: '#/components/schemas/MetricResultInput'
          type: object
          title: Metrics
          description: The value for all the metrics computed for the task.
      type: object
      title: TaskResultInput
      description: The evaluation results for a task.
    TaskResultOutput:
      properties:
        metrics:
          additionalProperties:
            $ref: '#/components/schemas/MetricResultOutput'
          type: object
          title: Metrics
          description: The value for all the metrics computed for the task.
      type: object
      title: TaskResultOutput
      description: The evaluation results for a task.
    TaskStatus:
      type: string
      enum:
      - pending
      - running
      - completed
      - failed
      title: TaskStatus
      description: The status of a task in an evaluation.
    TimeDeltaSamplerParams:
      properties:
        dt_min:
          type: integer
          minimum: 0.0
          title: Dt Min
          description: Minimum possible time-delta for sampling range, inclusive.
            Must be less than `dt_max`.
        dt_max:
          type: integer
          exclusiveMinimum: 0.0
          title: Dt Max
          description: Maximum possible time-delta for sampling range, exclusive.
            Must be greater than `dt_min`.
        reference_column_name:
          type: string
          title: Reference Column Name
          description: Name of an existing datetime column to condition time-delta
            sampling on.
        unit:
          allOf:
          - $ref: '#/components/schemas/Unit'
          title: Unit
          description: Sampling units, e.g. the smallest possible time interval between
            samples.
          default: D
      type: object
      required:
      - dt_min
      - dt_max
      - reference_column_name
      title: TimeDeltaSamplerParams
    Toleration:
      properties:
        key:
          type: string
          title: Key
          description: Taint key that the toleration applies to
        operator:
          type: string
          title: Operator
          description: 'Operator: "Exists" or "Equal"'
          default: Equal
        value:
          type: string
          title: Value
          description: Value to match
        effect:
          type: string
          title: Effect
          description: 'Taint effect to match: "NoSchedule", "PreferNoSchedule", or
            "NoExecute"'
        tolerationSeconds:
          type: integer
          title: Tolerationseconds
          description: Only for NoExecute; how long the toleration lasts
      type: object
      title: Toleration
    ToolSchemaInput:
      properties:
        type:
          type: string
          const: function
          title: Type
          description: Type of tool - currently only 'function' is supported
          default: function
        function:
          allOf:
          - $ref: '#/components/schemas/FunctionSchemaInput'
          description: Schema defining the function
      additionalProperties: false
      type: object
      required:
      - function
      title: ToolSchemaInput
    ToolSchemaOutput:
      properties:
        type:
          type: string
          const: function
          title: Type
          description: Type of tool - currently only 'function' is supported
          default: function
        function:
          allOf:
          - $ref: '#/components/schemas/FunctionSchemaOutput'
          description: Schema defining the function
      additionalProperties: false
      type: object
      required:
      - function
      title: ToolSchemaOutput
    TopLogprob:
      properties:
        token:
          type: string
          title: Token
          description: The token.
        bytes:
          type: array
          items:
            type: integer
          title: Bytes
          description: UTF-8 bytes representation of the token.
        logprob:
          type: number
          title: Logprob
          description: The log probability of this token.
      type: object
      required:
      - token
      - logprob
      title: TopLogprob
      description: Represents an alternative token and its log probability.
    TrainingPodSpecInput:
      properties:
        node_selectors:
          type: object
          additionalProperties:
            type: string
          title: Node Selectors
          description: Additional arguments for node selector
        annotations:
          type: object
          additionalProperties:
            type: string
          title: Annotations
          description: Additional arguments for annotations
        tolerations:
          type: array
          items:
            $ref: '#/components/schemas/Toleration'
          title: Tolerations
          description: Additional arguments for tolerations
        node_affinity:
          allOf:
          - $ref: '#/components/schemas/NodeAffinityInput'
          description: The kubernentes node affinity to apply to the training pods
      type: object
      title: TrainingPodSpecInput
    TrainingPodSpecOutput:
      properties:
        node_selectors:
          type: object
          additionalProperties:
            type: string
          title: Node Selectors
          description: Additional arguments for node selector
        annotations:
          type: object
          additionalProperties:
            type: string
          title: Annotations
          description: Additional arguments for annotations
        tolerations:
          type: array
          items:
            $ref: '#/components/schemas/Toleration'
          title: Tolerations
          description: Additional arguments for tolerations
        node_affinity:
          allOf:
          - $ref: '#/components/schemas/NodeAffinityOutput'
          description: The kubernentes node affinity to apply to the training pods
      type: object
      title: TrainingPodSpecOutput
    TrainingType:
      type: string
      enum:
      - dpo
      - sft
      - distillation
      title: TrainingType
    UUIDSamplerParams:
      properties:
        prefix:
          type: string
          title: Prefix
          description: String prepended to the front of the UUID.
        short_form:
          type: boolean
          title: Short Form
          description: If true, all UUIDs sampled will be truncated at 8 characters.
          default: false
        uppercase:
          type: boolean
          title: Uppercase
          description: If true, all letters in the UUID will be capitalized.
          default: false
      type: object
      title: UUIDSamplerParams
    UniformDistribution:
      properties:
        distribution_type:
          allOf:
          - $ref: '#/components/schemas/DistributionType'
          default: uniform
        params:
          $ref: '#/components/schemas/UniformDistributionParams'
      type: object
      required:
      - params
      title: UniformDistribution
    UniformDistributionParams:
      properties:
        low:
          type: number
          title: Low
        high:
          type: number
          title: High
      type: object
      required:
      - low
      - high
      title: UniformDistributionParams
    UniformSamplerParams:
      properties:
        low:
          type: number
          title: Low
          description: Lower bound of the uniform distribution, inclusive.
        high:
          type: number
          title: High
          description: Upper bound of the uniform distribution, inclusive.
      type: object
      required:
      - low
      - high
      title: UniformSamplerParams
    Unit:
      type: string
      enum:
      - Y
      - M
      - D
      - h
      - m
      - s
      title: Unit
    UsageInfo:
      properties:
        prompt_tokens:
          type: integer
          title: Prompt Tokens
          description: Number of tokens in the prompt.
          default: 0
        total_tokens:
          type: integer
          title: Total Tokens
          description: Total number of tokens used in the request (prompt + completion).
          default: 0
        completion_tokens:
          type: integer
          title: Completion Tokens
          description: Number of tokens in the generated completion.
          default: 0
      type: object
      title: UsageInfo
    UserMessagesConfig:
      properties:
        embeddings_only:
          type: boolean
          title: Embeddings Only
          description: Whether to use only embeddings for computing the user canonical
            form messages.
          default: false
        embeddings_only_similarity_threshold:
          type: number
          title: Embeddings Only Similarity Threshold
          description: The similarity threshold to use when using only embeddings
            for computing the user canonical form messages.
        embeddings_only_fallback_intent:
          type: string
          title: Embeddings Only Fallback Intent
          description: Defines the fallback intent when the similarity is below the
            threshold. If set to None, the user intent is computed normally using
            the LLM. If set to a string value, that string is used as the intent.
      type: object
      title: UserMessagesConfig
      description: Configuration for how the user messages are interpreted.
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
      - loc
      - msg
      - type
      title: ValidationError
    VersionTag:
      properties:
        name:
          type: string
          title: Name
          description: The name of the version. Typically should be kept lower case,
            no space, no '/', no `@`.
        created_by:
          type: string
          title: Created By
          description: The ID of the user that created this entity.
          default: ''
        created_at:
          type: string
          format: date-time
          title: Created At
          description: Timestamp for when the version tag was created.
      type: object
      required:
      - name
      title: VersionTag
      description: 'A version tag marks a particular version for an entity.


        The name must be unique across all version tags for the same entity name.'
    WandBIntegration:
      properties:
        type:
          type: string
          const: wandb
          title: Type
          default: wandb
        wandb:
          allOf:
          - $ref: '#/components/schemas/WandBIntegrationData'
          description: WandB configuration settings
      type: object
      required:
      - wandb
      title: WandBIntegration
      description: WandB integration configuration
    WandBIntegrationData:
      properties:
        project:
          type: string
          title: Project
          description: The name of the project under which this run will be logged.
          examples:
          - nvidia-nemo-customizer
        entity:
          type: string
          title: Entity
          description: The username or team name under which the run will be logged.
          examples:
          - ai-research-eng
        tags:
          type: array
          items:
            type: string
          title: Tags
          description: A list of tags to label this run.
          examples:
          - - long-context
            - reasoning
        notes:
          type: string
          title: Notes
          description: A description of the run
          examples:
          - experiment with long context
      type: object
      title: WandBIntegrationData
      description: 'Weights & Biases (W&B) configuration that is mapped to W&B python
        sdk settings:

        https://docs.wandb.ai/ref/python/init'
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags:
- name: Completions
  description: Operations related to generating completions.
- name: Customization
  description: Operations related to customizations.
- name: Evaluation
  description: Operations related to evaluation.
- name: Guardrails
  description: Operations related to guardrail configurations.
- name: Deployment
  description: Operations related model deployments.
- name: Namespaces
  description: Operations related to namespaces.
- name: Models
  description: Operations related to models.
- name: Datasets
  description: Operations related to datasets.
- name: Projects
  description: Operations related to projects.
